import{l as c}from"./index-BD-tyB7H.js";import{d as g,e as A,E as R,b as l}from"./ApplicationSessionManager-CECkmrBg.js";import{O as f,M as I,S as T}from"./index-CrI3GNrK.js";import{f as p,g as y,a as _}from"./mockAccessRequirements-BKs0zqzM.js";import{m}from"./MockSubmission-BB-QZyq3.js";import{M as S}from"./mock_user_profile-DulivbBT.js";const d=new Map,C=t=>[c.rest.get(`${t}${g(":id")}`,async(n,r,a)=>{let e=404,s={reason:`Mock Service worker could not find an access requirement with ID ${n.params.id}`};const o=p.find(i=>i.id.toString()===n.params.id);return o&&(s=o,e=200),r(a.status(e),a.json(s))}),c.rest.get(`${t}${A(":id")}`,async(n,r,a)=>{let e=404,s={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${n.params.id}`};const o=y.find(i=>i.ownerObjectType===f.ACCESS_REQUIREMENT&&String(i.ownerObjectId)===n.params.id);return o&&(s=o,e=200),r(a.status(e),a.json(s))})],q=(t,n=":entityId",r=p)=>[c.rest.get(`${t}${R(n)}`,async(a,e,s)=>{const i={results:r,totalNumberOfResults:r.length};return e(s.status(200),s.json(i))})],M=(t,n=[_])=>c.rest.get(`${t}/repo/v1/team/:teamId/accessRequirement`,async(r,a,e)=>{const o={results:n,totalNumberOfResults:n.length};return a(e.status(200),e.json(o))}),w=(t,n)=>(n&&n.forEach(r=>{d.set(r.accessRequirementId,r)}),[c.rest.get(`${t}${l(":id")}`,async(r,a,e)=>{let s;const o=p.find(u=>r.params.id===u.id.toString());let i=d.get(r.params.id);if(i&&(s=i),!s&&o){const u=o.concreteType===I;s={accessRequirementId:r.params.id,concreteType:u?"org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus":"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0,currentSubmissionStatus:u?{submissionId:m.id,submittedBy:m.submittedBy,modifiedOn:m.modifiedOn,state:T.APPROVED}:void 0}}const E=s?200:404;return a(e.status(E),e.json(s))})]);function b(t){return c.rest.post(`${t}/repo/v1/accessApproval`,async(n,r,a)=>{const e=await n.json(),s=200,o={...e,id:123,etag:"mock-etag",createdOn:new Date().toISOString(),modifiedOn:new Date().toISOString(),createdBy:String(S),modifiedBy:String(S)};return d.set(String(e.requirementId),{accessRequirementId:String(e.requirementId),concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0}),r(a.status(s),a.json(o))})}function O(t){return[...C(t),...q(t),M(t),...w(t),b(t)]}export{q as a,w as b,O as c,C as g};
