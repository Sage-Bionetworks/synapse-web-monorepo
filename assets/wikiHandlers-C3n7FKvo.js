import{m as o}from"./mockAccessRequirements-B8uhFQzV.js";import{a as i,i as b}from"./mock_file_handle-3Ozoui7p.js";import{R as u,S as m,n as r,O as I}from"./VerificationSubmission-CMrrYimb.js";import{M as e,a as l}from"./mock_user_profile-CCzWeUML.js";import{ad as y,ae as k,af as w}from"./useFiles-dN7ewnVn.js";import{h as g,H as S}from"./index-DdNRMMTG.js";import{M as h,f as O}from"./mockWiki-CUQx1XWq.js";import{b as C}from"./mockWikiPageKey-UzMQNoAo.js";import{B as T}from"./BasicMockedCrudService-Dxm1rE2e.js";const R={id:"3",accessRequirementId:String(o.id),accessRequirementVersion:1,requestId:"1",ducFileHandleId:String(i),irbFileHandleId:String(i),accessorChanges:[{userId:e.toString(),type:r.RENEW_ACCESS},{userId:l.toString(),type:r.REVOKE_ACCESS}],researchProjectSnapshot:{id:"1",accessRequirementId:String(o.id),institution:"Bage Sionetworks",projectLead:"Nick G",intendedDataUseStatement:"Updated IDU",createdOn:"2022-05-10T15:49:56.292Z",modifiedOn:"2022-05-11T13:25:06.021Z",createdBy:e.toString(),modifiedBy:e.toString(),etag:"8d0d4ec8-4cd9-45a7-b09d-390cd64cfca4"},isRenewalSubmission:!0,publication:"",summaryOfUse:"",submittedOn:"2022-05-11T13:25:20.262Z",modifiedOn:"2022-05-11T13:26:18.583Z",submittedBy:e.toString(),modifiedBy:e.toString(),state:m.REJECTED,rejectedReason:`Thank you for submitting your data access request. Before I can accept your request, please address the following:

Fix incorrect data.

Please contact us at act@sagebionetworks.org if you have any questions.

Regards,
Access and Compliance Team (ACT)
act@sagebionetworks.org`,etag:"626f9567-bf5f-41e0-9bbf-cf1cd23e6b54",subjectId:"syn12156790",subjectType:u.ENTITY},j={id:"1",accessRequirementId:String(o.id),accessRequirementVersion:1,requestId:"1",ducFileHandleId:String(i),irbFileHandleId:String(i),attachments:[String(i),String(b)],accessorChanges:[{userId:e.toString(),type:r.GAIN_ACCESS},{userId:l.toString(),type:r.GAIN_ACCESS}],researchProjectSnapshot:{id:"1",accessRequirementId:String(o.id),institution:"Bage Sionetworks",projectLead:"Nick G",intendedDataUseStatement:"I plan to see if the data is real data, because I suspect that this is really fake data created solely for a testing environment where software engineers pretend to be the users for whom they are trying to build features.",createdOn:"2022-05-10T15:49:56.292Z",modifiedOn:"2022-05-10T15:49:56.292Z",createdBy:e.toString(),modifiedBy:e.toString(),etag:"7ea28f9e-81cb-43be-a614-9eb1a0dabafc"},isRenewalSubmission:!1,submittedOn:"2022-05-10T15:50:19.275Z",modifiedOn:"2022-05-10T15:50:19.275Z",submittedBy:e.toString(),modifiedBy:e.toString(),state:m.SUBMITTED,etag:"40820b64-c436-486b-8fb8-afef931fbcb3",subjectId:"syn12156790",subjectType:u.ENTITY},B={id:"2",accessRequirementId:String(o.id),accessRequirementVersion:1,requestId:"2",ducFileHandleId:String(i),irbFileHandleId:String(i),attachments:[String(i)],accessorChanges:[{userId:e.toString(),type:r.GAIN_ACCESS}],researchProjectSnapshot:{id:"2",accessRequirementId:String(o.id),institution:"None",projectLead:"NickACT",intendedDataUseStatement:"Give me data pls",createdOn:"2022-05-10T17:17:14.757Z",modifiedOn:"2022-05-10T17:18:17.913Z",createdBy:e.toString(),modifiedBy:e.toString(),etag:"270234fd-da28-4098-8fd2-5693fee82c19"},isRenewalSubmission:!1,submittedOn:"2022-05-10T17:18:28.801Z",modifiedOn:"2022-05-10T17:20:09.356Z",submittedBy:e.toString(),modifiedBy:e.toString(),state:m.APPROVED,etag:"5fefb2d1-8600-4e1e-96e1-cf57f2ff7fd0",subjectId:"syn12156790",subjectType:u.ENTITY},A={id:"4",accessRequirementId:String(o.id),accessRequirementVersion:1,requestId:"1",ducFileHandleId:String(i),irbFileHandleId:String(i),attachments:[String(i),String(b)],accessorChanges:[{userId:"3431185",type:r.RENEW_ACCESS},{userId:"3350396",type:r.GAIN_ACCESS},{userId:"3371908",type:r.REVOKE_ACCESS}],researchProjectSnapshot:{id:"1",accessRequirementId:String(o.id),institution:"Bage Sionetworks",projectLead:"Adam H",intendedDataUseStatement:"I plan to see if the data is real data, because I suspect that this is really fake data created solely for a testing environment.",createdOn:"2022-05-10T15:49:56.292Z",modifiedOn:"2022-05-10T15:49:56.292Z",createdBy:"3431185",modifiedBy:"3431185",etag:"7ea28f9e-81cb-43be-a614-9eb1a0dabafc"},isRenewalSubmission:!1,submittedOn:"2022-05-10T15:50:19.275Z",modifiedOn:"2022-05-10T15:50:19.275Z",submittedBy:"3431185",modifiedBy:"3431185",state:m.SUBMITTED,etag:"40820b64-c436-486b-8fb8-afef931fbcb3",subjectId:"syn12156790",subjectType:u.ENTITY},_={id:"5",accessRequirementId:String(o.id),accessRequirementVersion:1,requestId:"1",ducFileHandleId:String(i),irbFileHandleId:String(i),attachments:[String(i),String(b)],accessorChanges:[{userId:e.toString(),type:r.GAIN_ACCESS},{userId:l.toString(),type:r.GAIN_ACCESS}],researchProjectSnapshot:{id:"1",accessRequirementId:String(o.id),institution:"Bage Sionetworks",projectLead:"Nick G",intendedDataUseStatement:"I plan to see if the data is real data, because I suspect that this is really fake data created solely for a testing environment where software engineers pretend to be the users for whom they are trying to build features.",createdOn:"2022-05-10T15:49:56.292Z",modifiedOn:"2022-05-10T15:49:56.292Z",createdBy:e.toString(),modifiedBy:e.toString(),etag:"7ea28f9e-81cb-43be-a614-9eb1a0dabafc"},isRenewalSubmission:!1,submittedOn:"2022-05-10T15:50:19.275Z",modifiedOn:"2022-05-10T15:50:19.275Z",submittedBy:e.toString(),modifiedBy:e.toString(),state:m.CANCELLED,etag:"40820b64-c436-486b-8fb8-afef931fbcb3",subjectId:"syn12156790",subjectType:u.ENTITY},V=[B,R,j,A,_],f=[I.ENTITY,I.ACCESS_REQUIREMENT,I.EVALUATION],p=new T({initialData:O,idField:"id",autoGenerateId:!0}),P=new T({initialData:C});function q(t){return f.map(d=>g.get(`${t}${y(d,":ownerObjectId",":wikiPageId")}`,({params:s})=>{let n=404,a={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a wiki page with ID ${s.wikiPageId}`};const c=p.getOneById(s.wikiPageId);return c&&(a=c,n=200),S.json(a,{status:n})}))}const N=t=>[...q(t),g.get(`${t}/repo/v1/:objectType/:objectId/wiki2/:wikiId/attachmenthandles`,()=>{const s={list:[]};return S.json(s,{status:200})})];function D(t){return f.map(d=>g.get(`${t}${k(d)}/:ownerObjectId/wikikey`,({params:s})=>{let n=404,a={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a WikiPageKey for ${d} ${s.ownerObjectId}`};const c=P.getOneByPredicate(E=>E.ownerObjectId===s.ownerObjectId);return c&&(a=c,n=200),S.json(a,{status:n})}))}function Z(t){return f.map(d=>g.post(`${t}${w(d,":ownerObjectId")}`,async({request:s})=>{const n=await s.json(),a=new Date().toISOString(),c=p.create({...n,etag:h,createdBy:String(e),createdOn:a,modifiedBy:String(e),modifiedOn:a});return S.json(c,{status:201})}))}function H(t){return f.map(d=>g.put(`${t}${y(d,":ownerObjectId",":wikiPageId")}`,async({request:s})=>{const n=await s.json(),a=p.update(n.id,n,"replace");return S.json(a,{status:201})}))}function Y(t){return[...N(t),...D(t),...Z(t),...H(t)]}export{V as a,Y as b,N as g,B as m};
