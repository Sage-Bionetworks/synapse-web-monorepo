import{l as c}from"./index-1WQ5ookb.js";import{d as E,e as R,E as g,b as l}from"./SynapseClient-C60GJd01.js";import{O as f,M as I,S as y}from"./index-Bm-ar3Hy.js";import{f as p,g as T,a as q}from"./mockAccessRequirements-BNNto0bR.js";import{m}from"./MockSubmission-DN2kU49h.js";import{M as S}from"./mock_user_profile-DyzXylki.js";const d=new Map,_=e=>[c.rest.get(`${e}${E(":id")}`,async(r,t,a)=>{let s=404,n={reason:`Mock Service worker could not find an access requirement with ID ${r.params.id}`};const o=p.find(i=>i.id.toString()===r.params.id);return o&&(n=o,s=200),t(a.status(s),a.json(n))}),c.rest.get(`${e}${R(":id")}`,async(r,t,a)=>{let s=404,n={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${r.params.id}`};const o=T.find(i=>i.ownerObjectType===f.ACCESS_REQUIREMENT&&String(i.ownerObjectId)===r.params.id);return o&&(n=o,s=200),t(a.status(s),a.json(n))})];function C(e){return c.rest.put(`${e}${E(":id")}`,async(r,t,a)=>{const s=await r.json();return t(a.status(200),a.json(s))})}const w=(e,r=":entityId",t=p)=>[c.rest.get(`${e}${g(r)}`,async(a,s,n)=>{const i={results:t,totalNumberOfResults:t.length};return s(n.status(200),n.json(i))})],M=(e,r=[q])=>c.rest.get(`${e}/repo/v1/team/:teamId/accessRequirement`,async(t,a,s)=>{const o={results:r,totalNumberOfResults:r.length};return a(s.status(200),s.json(o))}),$=(e,r)=>(r&&r.forEach(t=>{d.set(t.accessRequirementId,t)}),[c.rest.get(`${e}${l(":id")}`,async(t,a,s)=>{let n;const o=p.find(u=>t.params.id===u.id.toString());let i=d.get(t.params.id);if(i&&(n=i),!n&&o){const u=o.concreteType===I;n={accessRequirementId:t.params.id,concreteType:u?"org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus":"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0,currentSubmissionStatus:u?{submissionId:m.id,submittedBy:m.submittedBy,modifiedOn:m.modifiedOn,state:y.APPROVED}:void 0}}const A=n?200:404;return a(s.status(A),s.json(n))})]);function j(e){return c.rest.post(`${e}/repo/v1/accessApproval`,async(r,t,a)=>{const s=await r.json(),n=200,o={...s,id:123,etag:"mock-etag",createdOn:new Date().toISOString(),modifiedOn:new Date().toISOString(),createdBy:String(S),modifiedBy:String(S)};return d.set(String(s.requirementId),{accessRequirementId:String(s.requirementId),concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0}),t(a.status(n),a.json(o))})}function D(e){return[..._(e),C(e),...w(e),M(e),...$(e),j(e)]}export{w as a,$ as b,D as c,_ as g};
