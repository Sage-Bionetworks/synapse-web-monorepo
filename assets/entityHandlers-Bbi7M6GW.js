import{N as f,aD as E,aE as u,aF as S,aG as w,aH as D,aI as b,aJ as $,aA as g}from"./useFiles-BQg2l_mC.js";import{b as T}from"./StringUtils-NPb0VexC.js";import{h as i,H as a}from"./index-CqDvZtPB.js";import{b as L,a as v}from"./index-6PkaAEe9.js";import{b as _}from"./mockEntity-BOe_flvY.js";import"./VerificationSubmission-BDh1zA9f.js";import{m as N}from"./mockSchema-DZXQI4Rp.js";import{u as R}from"./uniqueId-DoI5JSaB.js";const I={S3:"S3",GOOGLECLOUDSTORAGE:"GOOGLECLOUDSTORAGE",HTTPS:"HTTPS"},O=1111,h=2222,j=3333,C=4444,y={storageLocationId:f,uploadType:I.S3,banner:"",concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination",projectStorageLocationUsage:{maxAllowedFileBytes:1024*1024*1024*100,sumFileBytes:0,storageLocationId:f,isOverLimit:!1}},k={...y,baseKey:"exampleS3BaseKey",stsEnabled:!0,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},A={...k,storageLocationId:O,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalS3Bucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalS3UploadDestination"},U={...y,baseKey:"exampleGCPBaseKey",storageLocationId:h,uploadType:I.GOOGLECLOUDSTORAGE,bucket:"myExternalGCPBucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination"},M={...y,storageLocationId:j,uploadType:I.HTTPS,url:"https://myurl.fake",concreteType:"org.sagebionetworks.repo.model.file.ExternalUploadDestination"},G={...y,storageLocationId:C,uploadType:I.HTTPS,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalObjectStoreBucket",keyPrefixUUID:"uuidKeyPrefix",concreteType:"org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination"},x=[k,A,U,M,G];function B(r){const n=r.map(T);return v.filter(o=>n.includes(T(o.id)))}function d(r){const n=B([r]);if(n.length!=0)return n[0]}function H(r,n){return i.post(`${r}${g(":entityId")}`,({params:o})=>{let t=404,e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${o.entityId}`};{const s=d(o.entityId);s!=null&&s.bundle&&(e=s.bundle,t=200)}return a.json(e,{status:t})})}function P(r,n){return i.post(`${r}${g(":entityId",":versionNumber")}`,({params:o})=>{const t=o.entityId,e=parseInt(o.versionNumber);let s=404,c={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${t}`};{const l=d(t);if(l){const p=l.bundle;l.versions&&l.versions[e]?c={...p,entity:l.versions[e]}:c=p,s=200}}return a.json(c,{status:s})})}const Z=r=>[i.post(`${r}${E}`,async({request:n})=>{let o=200;const t=await n.json();let e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:"..."};return t?t.name===_?(e.reason="Invalid project name",o=403):e={id:R("syn"),...t}:(o=400,e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock service worker received the following malformed body for PUT ${E} : ${JSON.stringify(t)}`}),a.json(e,{status:o})}),i.get(`${r}${u(":entityId")}`,({params:n})=>{let o=404,t={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity with ID ${n.entityId}`};const e=d(n.entityId);return e&&(t=e.entity,o=200),a.json(t,{status:o})}),i.get(`${r}${S(":entityId")}`,({params:n})=>{let o=404,t={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find mock entity versions for ID ${n.entityId}`};const e=d(n.entityId);return e&&e.versionInfo&&(t={results:e.versionInfo},o=200),a.json(t,{status:o})}),i.get(`${r}${w(":entityId",":versionNumber")}`,({params:n})=>{let o=404;const t=n.entityId,e=n.versionNumber.toString(),s=parseInt(e);let c={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock versioned entity with ID ${t}.${e}`};const l=d(n.entityId);return l&&l.versions&&l.versions[s]&&(c=l.versions[s],o=200),a.json(c,{status:o})}),H(r),P(r),i.get(`${r}${D(":entityId")}`,()=>a.json(N,{status:200})),i.get(`${r}${b(":entityId")}`,({params:n})=>{let o=404,t={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${n.entityId}`};const e=d(n.entityId);return e!=null&&e.json&&(t=e.json,o=200),a.json(t,{status:o})}),i.post(`${r}${$}`,async({params:n,request:o})=>{let t=404,e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${n.entityId}`};const c=(await o.json()).references.map(l=>{var m;const p=(m=d(l.targetId))==null?void 0:m.entityHeader;if(p)return{...p,id:l.targetId}}).filter(l=>!!l);return c&&(e={results:c},t=200),a.json(e,{status:t})}),i.get(`${r}${u(":entityId")}/path`,({params:n})=>{let o=404,t={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity path using ID ${n.entityId}`};const e=d(n.entityId);return e&&e.path&&(t=e.path,o=200),a.json(t,{status:o})}),i.get(`${r}/file/v1/entity/:id/uploadDestination`,()=>{const n=y;return a.json(n,{status:200})}),i.get(`${r}/file/v1/entity/:id/uploadDestination/:storageLocationId`,({params:n})=>{let o=404,t={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find an uploadDestination using storageLocationId ${n.storageLocationId}`};const e=x.find(s=>Number(n.storageLocationId)===s.storageLocationId);return e&&(t=e,o=200),a.json(t,{status:o})}),i.get(`${r}/repo/v1/projects`,()=>{const n={results:L.map(o=>({name:o.name,id:o.id,lastActivity:"2024-01-04T21:11:59.000Z",modifiedBy:parseInt(o.entity.modifiedBy),modifiedOn:o.entity.modifiedOn}))};return a.json(n,{status:200})}),i.post(`${r}${u(":entityId")}/acl`,async({params:n,request:o})=>{var c;const t=d(n.entityId);let e,s;return t?(c=t.bundle)!=null&&c.accessControlList?(e=403,s={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:"Resource already has an ACL."}):(s=await o.json(),e=201):(e=404,s={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${n.entityId}`}),a.json(s,{status:e})}),i.put(`${r}${u(":entityId")}/acl`,async({params:n,request:o})=>{var c;const t=d(n.entityId);let e,s;return t?(c=t==null?void 0:t.bundle)!=null&&c.accessControlList?(s=await o.json(),e=200):(s={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:"Cannot update ACL for a resource which inherits its permissions."},e=403):(e=404,s={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${n.entityId}`}),a.json(s,{status:e})}),i.delete(`${r}${u(":entityId")}/acl`,({params:n})=>{var s;const o=d(n.entityId);let t,e;return o?(s=o==null?void 0:o.bundle)!=null&&s.accessControlList?(e="",t=200):(e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:"Cannot delete ACL for a resource which inherits its permissions."},t=403):(t=404,e={concreteType:"org.sagebionetworks.repo.model.ErrorResponse",reason:`Mock Service worker could not find a mock entity bundle with ID ${n.entityId}`}),a.json(e,{status:t})})];export{Z as g};
