import{j as p}from"./iframe-DkJtXMGY.js";import{R as a}from"./RowDataTableWithQuery-i89ttjOT.js";import"./index-r8ZA1smB.js";import"./SqlFunctions-DDowXms4.js";import"./SkeletonButton-Wvy1B_g_.js";import"./SkeletonInlineBlock-BZs9NYqd.js";import"./SkeletonTable-Boy2sN_O.js";import"./SkeletonParagraph-D2M_qyIo.js";import"./RowDataTable-D_MBhnwR.js";import"./StyledTableContainer-5GgQ8JVv.js";import"./SynapseCardLabel-CApjzGOw.js";import"./CardUtils-DdB6zdzp.js";import"./EntityLink-BqpJWKI0.js";import"./useEntity-CO16wdW2.js";import"./pickBy-TCGe6MDQ.js";import"./isString-BGlEt5YE.js";import"./_baseIteratee-fqRe5hEX.js";import"./useQueries-Z-3gwq5U.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-iYy68X6j.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-B1ApGHDu.js";import"./useGetEntityHeaders-BV7RK0QT.js";import"./EntityIcon-Ll_hyWOT.js";import"./ErrorChip-CrnWChky.js";import"./Chip-C5Eg6zQf.js";import"./MarkdownSynapse-Cj88j8IZ.js";import"./UserBadge-D10KGNES.js";import"./MenuItem-__VZzdvD.js";import"./Card-BrdkgB5x.js";import"./ImageFileHandle-DbQaeOJS.js";import"./index-DHBZhc45.js";import"./Box-Bc8zTrL5.js";import"./GenericCard-D6upJ6NM.js";import"./HeaderCard-DgnyGXKz.js";import"./index-CZnpuZdd.js";import"./Icon-DuD-wSZN.js";import"./mouse-F2dtrZbS.js";import"./SortDown-BDmhnzcB.js";import"./ShowMore-DjnVUSyA.js";import"./HeaderCardV2-BelcqZLk.js";import"./index-BhkdXidL.js";import"./SustainabilityScorecard-BliSH4iY.js";import"./Close-BlNc4-DS.js";import"./Dial-CfqrUfhP.js";import"./CheckIcon-BdExinfJ.js";import"./NoContentAvailable-Ci0gHtSP.js";import"./FileHandleLink-CP-6M3-C.js";const e={name:"Name",grantDOI:"DOI",dataType:"Data Type(s)"},n={sql:"SELECT * FROM syn52694652"},mr={title:"UI/RowDataTable/RowDataTableWithQuery",component:a,parameters:{chromatic:{viewports:[600,1200]}}},r={render:i=>p.jsx(a,{...i}),args:{query:n,columnAliases:e,displayedColumns:["studyId","name","grantDOI"],columnLinks:[{isMarkdown:!1,matchColumnName:"Grant DOI",linkColumnName:"Grant DOI"}]}};var o,t,m;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: args => <RowDataTableWithQuery {...args} />,
  args: {
    query: mockQuery,
    columnAliases: dataColumnAliases,
    displayedColumns: ['studyId', 'name', 'grantDOI'],
    columnLinks: [{
      isMarkdown: false,
      matchColumnName: 'Grant DOI',
      linkColumnName: 'Grant DOI'
    }]
  }
}`,...(m=(t=r.parameters)==null?void 0:t.docs)==null?void 0:m.source}}};const ar=["Demo"];export{r as Demo,ar as __namedExportsOrder,mr as default};
