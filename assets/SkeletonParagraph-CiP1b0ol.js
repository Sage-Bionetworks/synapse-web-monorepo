import{j as t}from"./jsx-runtime-Du8NFWEI.js";import{S as i}from"./Skeleton-1jrlRaLC.js";import{r as s,R as d}from"./index-Dl6G-zuu.js";import{t as u}from"./times-CNSOYeu0.js";const r=e=>t.jsx(i,{style:{...e.style,display:"inline-block"},...e});try{r.displayName="SkeletonInlineBlock",r.__docgenInfo={description:"Skeleton with a display value of `inline-block`. MUI applies `display: block` with high specificity, so it's easiest to just apply the style to the component.",displayName:"SkeletonInlineBlock",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLSpanElement | null) => void) | RefObject<HTMLSpanElement> | null"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}const o=({numRows:e=5,rowHeight:n,className:p})=>{const[c,m]=s.useState([]);return s.useEffect(()=>{const a=[];u(e,l=>{a.push(t.jsx(d.Fragment,{children:t.jsx(i,{height:n,width:l===e-1?"35%":"100%"})},l))}),m(a)},[e,n]),t.jsx("div",{className:p,children:c})};try{o.displayName="SkeletonParagraph",o.__docgenInfo={description:"Skeleton component designed to mimic a paragraph.",displayName:"SkeletonParagraph",props:{numRows:{defaultValue:{value:"5"},description:"",name:"numRows",required:!1,type:{name:"number"}},rowHeight:{defaultValue:null,description:"",name:"rowHeight",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}export{o as S,r as a};
