import{t as o}from"./VerificationSubmission-NmfK1W18.js";import{g as u,b5 as d,b6 as l,B as S,b7 as f,M as O}from"./useFiles-C1ighHnt.js";import"./StringUtils-Dsx1COFf.js";import{h as i,H as n}from"./index-BL40JgFt.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-B4A1WP5w.js";import"./SynapseConstants-Csz7obg_.js";import"./OrientationBanner-Cq_tYaVj.js";import"./index-AELP8EyN.js";import"./index-C0JvWMff.js";import"./iframe-DNXoYa4O.js";import"./spreadSx-CwcO6WA9.js";import"./react-DQONDSgG.js";import"./FullWidthAlert-C_x8NeKc.js";import"./Alert-BDgiv6yE.js";import"./createTheme-B3F90xOt.js";import"./DefaultPropsProvider-Cr3dPd9g.js";import"./useSlot-D3cOw50Q.js";import"./useForkRef-DbtxdJG_.js";import"./createSimplePaletteValueFilter-C1IGZ-iD.js";import"./createSvgIcon-koTmqTDS.js";import"./Close-CWCFLhOT.js";import"./IconButton--vg-yfR-.js";import"./useTimeout-BTkZDFKk.js";import"./ButtonBase-BYY4hzrD.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress--neujvzt.js";import"./Paper-DNg490FH.js";import"./useTheme-CGyFDzld.js";import"./useTheme-oQB9tHIv.js";import"./Stack-ErGFFWoh.js";import"./extendSxProp-BVQBrtSx.js";import"./getThemeProps-Db77coRQ.js";import"./Box-Cf0Q_2JL.js";import"./AlertTitle-DuB1Vbeo.js";import"./Typography-CS8I5n2T.js";import"./index-DLsodws3.js";import"./ClickAwayListener-Co9NCCCU.js";import"./getReactElementRef-DYzm166M.js";import"./index-kJ3q-whD.js";import"./index-DwXwC2jP.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-ZuxCxpoj.js";import"./Tooltip-B8Tb7fkD.js";import"./index-DznA_vW2.js";import"./useControlled-JW-RUyV0.js";import"./Popper-BkTsEBSY.js";import"./Button-DPEBK_F3.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-BzmGstcF.js";import"./QueryClientProvider-BwFe2xR9.js";import"./Link-3sQ-XwAe.js";import"./Collapse-BCnqgjTK.js";import"./_baseUniq-Cb2QqR7r.js";import"./_Uint8Array-KnS-zlSM.js";import"./isArray-B2GEIt4T.js";import"./_getTag-Bbp68GcC.js";import"./isEqual-DxfPqfeo.js";import"./merge-CPltTFYH.js";import"./_initCloneObject-KSbHlFJl.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-h24MK7uO.js";import"./inputBaseClasses-52cWq4Ml.js";import"./calculateFriendlyFileSize-Dx0ihCia.js";import"./CheckCircleTwoTone-DLZUc_ip.js";import"./InfoTwoTone-DIOaCUV3.js";import"./useMutation-z7mpAMu5.js";import"./dayjs.min-BEb6uDil.js";import"./chunk-AYJ5UCUI-DJWi0FRW.js";import"./cloneDeep-Cx4KKtL5.js";import"./Skeleton-Bhvm0MZh.js";import"./SkeletonButton-LZl1uBOu.js";import"./SkeletonInlineBlock-B-lXrb85.js";import"./SkeletonTable-BJKoo5Xz.js";import"./times-BqpQIjaC.js";import"./toInteger-Kr63dL2h.js";import"./isSymbol-Cp-HXGWp.js";import"./SkeletonParagraph-CTXfhJ1G.js";import"./MarkdownSynapse-BVMbN0ut.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
