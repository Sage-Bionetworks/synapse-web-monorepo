import{u as o}from"./VerificationSubmission-CNoSrCdk.js";import{g as u,bb as d,bc as l,B as S,bd as f,M as O}from"./useFiles-D_gVWFHx.js";import"./StringUtils-CwQ1lgbR.js";import{h as i,H as n}from"./index-CCJT-wxx.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-CdRDtfwU.js";import"./SynapseConstants-MtbKIoc0.js";import"./OrientationBanner-TuzAQv9d.js";import"./index-Bgb0qH91.js";import"./index-B25hjvII.js";import"./iframe-CanEKFkf.js";import"./spreadSx-CwcO6WA9.js";import"./react-gdPSVHxq.js";import"./FullWidthAlert-CsnT3S0Z.js";import"./Alert-CMUYxoU4.js";import"./createTheme-CeLgvmU3.js";import"./DefaultPropsProvider-BT4R1ruD.js";import"./useSlot-FmPpnltM.js";import"./useForkRef-C_zmFNEw.js";import"./createSimplePaletteValueFilter-Dmw5w500.js";import"./createSvgIcon-B3urn6DB.js";import"./Close-BFk95YTC.js";import"./IconButton-Bo1_iaRr.js";import"./useTimeout-CT9u6xIp.js";import"./ButtonBase-DVVpaHYC.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-a2Aa-IB0.js";import"./Paper-CrOcAKNw.js";import"./useTheme-W4kAWd5b.js";import"./useTheme-S_q5Ryto.js";import"./Stack-CX78Gz_0.js";import"./extendSxProp-MkfofRzG.js";import"./getThemeProps-BIWXTvD7.js";import"./Box-DvcAnSFU.js";import"./AlertTitle-JLHtZuQn.js";import"./Typography-C1n2Gc-4.js";import"./index-CNqkfiqy.js";import"./ClickAwayListener-Bjyhl2ez.js";import"./getReactElementRef-B5zyHyCE.js";import"./index-DN2r2ujZ.js";import"./index-h-VymCwS.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-ymICMWfx.js";import"./Tooltip-BuHnAymE.js";import"./index-DQDbwlvs.js";import"./useControlled-D0puIBKv.js";import"./Popper-CUKMxY22.js";import"./Button-DtzkNhDQ.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-Bfg-ZGUc.js";import"./QueryClientProvider-Bp731WZp.js";import"./Link-DZC6UXn4.js";import"./Collapse-CZ2ygZqM.js";import"./_baseUniq-DS_qtplq.js";import"./_Uint8Array-CWekYRsx.js";import"./isArray-BQjuIHDh.js";import"./_getTag-DA_-6Xr_.js";import"./isEqual-CBHP1RPv.js";import"./merge-BDNvaxBl.js";import"./_initCloneObject-DZRG-IW9.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-zN12Tza6.js";import"./inputBaseClasses-Dqo0IIFM.js";import"./calculateFriendlyFileSize-RGx1gGOH.js";import"./CheckCircleTwoTone-DcmFcPP3.js";import"./InfoTwoTone-DR6uvdma.js";import"./useMutation-BaIPXJDt.js";import"./dayjs.min-DonIRj0C.js";import"./chunk-AYJ5UCUI-CY7fVuNR.js";import"./cloneDeep-BzZKBefz.js";import"./Skeleton-CnthbRVq.js";import"./SkeletonButton-Bo0Ej_pf.js";import"./SkeletonInlineBlock-D__YF-Sv.js";import"./SkeletonTable-CoUb_3o4.js";import"./times-B-7UfHs6.js";import"./toInteger-DERtW0xG.js";import"./isSymbol-FGFUqC0g.js";import"./SkeletonParagraph-DKEZf3Po.js";import"./MarkdownSynapse-DpgB2C32.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
