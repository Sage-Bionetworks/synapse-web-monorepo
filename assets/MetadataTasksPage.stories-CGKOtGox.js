import{U as F,j as s,as as C,cs as I,ct as w,da as j,aD as q,aE as P,r as _,b_ as G,B as V,_ as R,dP as E,dO as B}from"./iframe-SFoYirDz.js";import{I as N}from"./InfiniteTableLayout-moTqtAw1.js";import{u as O,c as v,g as L,S as D}from"./StyledTanStackTable-CIWuYi_e.js";import{C as l}from"./ColumnHeader-B4m_oZNu.js";import{U as A}from"./UserBadge-DEHXVbtz.js";import{u as H}from"./useInfiniteQuery-BXG3TdfN.js";import{u as $}from"./useEntityBundle-Dn65PMqz.js";import{g as U,a as z}from"./useGridSession-8ilj0zqM.js";import"./index-r8ZA1smB.js";import"./StyledTableContainer-DL8c-Bhf.js";import"./ExpandCollapseButton-BJuhwKhd.js";import"./index-3-fk0DoQ.js";import"./EnumFacetFilterUI-DDqwNBM1.js";import"./FacetFilterHeader-Cmviy3Hc.js";import"./FormControlLabel-BdI7Ynze.js";import"./Checkbox-C0ba4mce.js";import"./SwitchBase-B1PJBJjS.js";import"./Radio-DepSv39E.js";import"./MenuItem-CfJpQ_dM.js";import"./HelpTwoTone-D6G1UBLM.js";import"./SkeletonTable-Drqg7wxh.js";import"./Card-CkGOMELO.js";import"./Chip-05FYIvnY.js";import"./waitForAsyncResult-B0KfBxeI.js";import"./queryOptions-C9woPjwX.js";const Q=F(s.jsx("path",{d:"M19 5v9h-5v5H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10l6-6V5c0-1.1-.9-2-2-2m-7 11H7v-2h5zm5-4H7V8h10z"}));function p(t){const a=t.taskProperties;if(a==null)throw new Error("CurationTask is missing taskProperties");switch(a.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return a.fileViewId;case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return a.recordSetId;default:throw new Error(`Unknown taskProperties concreteType: ${a.concreteType}`)}}try{p.displayName="getGridSourceIdForTask",p.__docgenInfo={description:`For a given CurationTask that could be used to create a GridSession, return the ID of the source entity that would be
used to create the GridSession.`,displayName:"getGridSourceIdForTask",props:{taskId:{defaultValue:null,description:`The unique identifier issued to this task when it was created.
@memberof CurationTask`,name:"taskId",required:!1,type:{name:"{number}"}},dataType:{defaultValue:null,description:`Will match the data type that a contributor plans to contribute.  The dataType must be unique within a project.
@memberof CurationTask`,name:"dataType",required:!1,type:{name:"{string}"}},projectId:{defaultValue:null,description:`The synId of the project.
@memberof CurationTask`,name:"projectId",required:!1,type:{name:"{string}"}},instructions:{defaultValue:null,description:`Instructions to the data contributor.
@memberof CurationTask`,name:"instructions",required:!1,type:{name:"{string}"}},etag:{defaultValue:null,description:`Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.
@memberof CurationTask`,name:"etag",required:!1,type:{name:"{string}"}},createdOn:{defaultValue:null,description:"@memberof CurationTask",name:"createdOn",required:!1,type:{name:"{string}"}},modifiedOn:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedOn",required:!1,type:{name:"{string}"}},createdBy:{defaultValue:null,description:"@memberof CurationTask",name:"createdBy",required:!1,type:{name:"{string}"}},modifiedBy:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedBy",required:!1,type:{name:"{string}"}},taskProperties:{defaultValue:null,description:"@memberof CurationTask",name:"taskProperties",required:!1,type:{name:"{CurationTaskProperties}"}}}}}catch{}function W(t,a){const{synapseClient:e,keyFactory:n}=C();return H({...a,queryKey:n.getCurationTaskListKey(t),queryFn:r=>e.curationTaskServicesClient.postRepoV1CurationTaskList({listCurationTaskRequest:{projectId:t,nextPageToken:r.pageParam}}),initialPageParam:void 0,getNextPageParam:r=>r.nextPageToken})}function K(t,a){return`${I(w.PORTAL_ENDPOINT)}Synapse:${t}`}function J(t){return`${I(w.PORTAL_ENDPOINT)}Grid:${t}`}function m(t){switch(t.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",initialQuery:{sql:`SELECT * FROM ${t.fileViewId}`}};case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",recordSetId:t.recordSetId};default:throw new Error(`Unknown taskProperties concreteType: ${t.concreteType}`)}}try{m.displayName="getCreateGridRequestForMetadataTask",m.__docgenInfo={description:"Generates a CreateGridRequest for a metadata task based on its properties.",displayName:"getCreateGridRequestForMetadataTask",props:{concreteType:{defaultValue:null,description:`Indicates which implementation of CurationTaskProperties this object represents. Possible values include: 'org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties' and 'org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties'.
@memberof FileBasedMetadataTaskProperties
@memberof RecordBasedMetadataTaskProperties`,name:"concreteType",required:!0,type:{name:`{string}
{string}`}},uploadFolderId:{defaultValue:null,description:`The synId of the folder where data files of this type are to be uploaded.
@memberof FileBasedMetadataTaskProperties`,name:"uploadFolderId",required:!1,type:{name:"{string}"}},fileViewId:{defaultValue:null,description:`The synId of the FileView that shows all data of this type.  This FileView will be used to start new grid sessions for file annotation curation.
@memberof FileBasedMetadataTaskProperties`,name:"fileViewId",required:!1,type:{name:"{string}"}},recordSetId:{defaultValue:null,description:`The synId of the RecordSet that will contain all record-based metadata for a specific type.  This RecordSet will be used to start new grid sessions for both 'upsert' and record-based curation for this type.
@memberof RecordBasedMetadataTaskProperties`,name:"recordSetId",required:!1,type:{name:"{string}"}}}}}catch{}async function X(t,a){const{queryClient:e}=a,{keyFactory:n,synapseClient:r}=a.synapseContext,o=await e.fetchQuery(U({sourceId:t},{keyFactory:n,synapseClient:r}));return j(o.page)?null:o.page[0]}function Y(){const t=q(),a=C(),{mutateAsync:e}=z();return P({mutationFn:async({sourceId:n,createRequest:r})=>{const o=await X(n,{queryClient:t,synapseContext:a});return o??(await e(r)).gridSession}})}function Z(){const{mutateAsync:t}=Y();return P({mutationFn:async({curationTask:a})=>{const e=a.taskProperties;if(e==null)throw new Error("CurationTask is missing taskProperties");const n=p(a),r=m(e);return await t({sourceId:n,createRequest:r})}})}function f(t){const{curationTask:a}=t,{mutateAsync:e,isPending:n}=Z(),r=_.useCallback(async()=>{const i=await e({curationTask:a}),d=J(i.sessionId);window.open(d,"_blank","noopener")},[a,e]),o=s.jsx(G,{title:"Open a Working Copy document to edit metadata",children:s.jsx(V,{size:"small",startIcon:s.jsx(Q,{}),loading:n,onClick:()=>{r()},children:"Working Copy"})});return s.jsx(s.Fragment,{children:o})}try{f.displayName="MetadataTaskTableActionCell",f.__docgenInfo={description:`Handles rendering the 'Actions' cell in the Metadata Task table, which provides buttons for the user
to accomplish the actions they can take on a Metadata Task, such as opening a data grid for the entity referenced
by the task.`,displayName:"MetadataTaskTableActionCell",props:{curationTask:{defaultValue:null,description:"",name:"curationTask",required:!0,type:{name:"CurationTask"}},canEdit:{defaultValue:null,description:"",name:"canEdit",required:!0,type:{name:"boolean"}}}}}catch{}function ee(t){const a=v();return[a.accessor("dataType",{header:e=>s.jsx(l,{...e,title:"Data Type"}),cell:({row:e,getValue:n})=>{const r=p(e.original);return s.jsx(R,{href:K(r),children:n()})},enableSorting:!1,enableColumnFilter:!1}),a.accessor("instructions",{header:e=>s.jsx(l,{...e,title:"Instructions"}),cell:({getValue:e})=>s.jsx("p",{children:e()}),enableSorting:!1,enableColumnFilter:!1}),a.accessor("modifiedBy",{header:e=>s.jsx(l,{...e,title:"Modified By"}),cell:({getValue:e})=>s.jsx(A,{userId:e()}),enableSorting:!1,enableColumnFilter:!1}),a.accessor("modifiedOn",{header:e=>s.jsx(l,{...e,title:"Modified On"}),cell:({getValue:e})=>E(B(e())),enableSorting:!1,enableColumnFilter:!1}),a.display({id:"actions",header:e=>s.jsx(l,{...e,title:"Actions"}),cell:({row:e})=>s.jsx(f,{curationTask:e.original,canEdit:t})})]}function g(t){var T;const{projectId:a}=t,{data:e,hasNextPage:n,fetchNextPage:r,isLoading:o,isFetchingNextPage:i}=W(a),{data:d,isLoading:S}=$(a),M=((T=d==null?void 0:d.permissions)==null?void 0:T.canEdit)??!1,x=_.useMemo(()=>(e==null?void 0:e.pages.flatMap(c=>c.page))??[],[e]);return{table:O({data:x,columns:ee(M),getRowId:c=>String(c.taskId),getCoreRowModel:L(),columnResizeMode:"onChange",manualSorting:!1,meta:{getWrapInExpandableTd:c=>c.column.id==="instructions"}}),isLoading:o||S,hasNextPage:n,fetchNextPage:r,isFetchingNextPage:i}}try{g.displayName="useMetadataTaskTable",g.__docgenInfo={description:"Provides a table instance and loading states for displaying metadata curation tasks associated with a project.",displayName:"useMetadataTaskTable",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}function y(t){const{projectId:a}=t,{table:e,isLoading:n,hasNextPage:r,fetchNextPage:o,isFetchingNextPage:i}=g({projectId:a});return s.jsx(N,{table:s.jsx(D,{table:e,styledTableContainerProps:{sx:{my:2}}}),isLoading:n,isEmpty:!n&&e.getRowModel().rows.length===0,hasNextPage:r,onFetchNextPageClicked:()=>{o()},isFetchingNextPage:i})}try{y.displayName="MetadataTasksPage",y.__docgenInfo={description:"Displays a list of metadata curation tasks for a particular project, with actions that can be performed on each task.",displayName:"MetadataTasksPage",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}const Me={title:"Synapse/Entity/MetadataTaskTable",component:y},u={name:"MetadataTaskTable",args:{projectId:"syn12554559"},parameters:{stack:"development"}};var k,h,b;u.parameters={...u.parameters,docs:{...(k=u.parameters)==null?void 0:k.docs,source:{originalSource:`{
  name: 'MetadataTaskTable',
  args: {
    projectId: 'syn12554559'
  },
  parameters: {
    stack: 'development'
  }
}`,...(b=(h=u.parameters)==null?void 0:h.docs)==null?void 0:b.source}}};const xe=["Demo"];export{u as Demo,xe as __namedExportsOrder,Me as default};
