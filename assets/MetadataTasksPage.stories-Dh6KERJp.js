import{j as o}from"./jsx-runtime-D_zvdyIk.js";import{I as F}from"./InfiniteTableLayout-BmOHxuZu.js";import{u as j,c as q,g as G,S as V}from"./StyledTanStackTable-CVcBKU2n.js";import{C as m}from"./ColumnHeader-PSlc4XuE.js";import{U as R}from"./UserBadge-BYNynW9u.js";import{l as C,g as I,B as w}from"./useFiles-DpJBj2AL.js";import"./OrientationBanner-C9wDwZSC.js";import{r as P}from"./index-BbTPqiCn.js";import"./VerificationSubmission-BDh1zA9f.js";import"./StringUtils-C95LMFI-.js";import{u as B}from"./useInfiniteQuery-Dl6G7Eag.js";import{u as E}from"./useEntityBundle-CkyZnq9h.js";import{f as N}from"./DateFormatter-Cx9se4eB.js";import{d as O}from"./dayjs.min-B-Cmgun6.js";import{u as S}from"./useMutation-B8qQRwG6.js";import{g as L,u as v}from"./useGridSession--8JoEHUG.js";import{i as D}from"./_baseUniq-D2vZ8VQ3.js";import{u as A}from"./QueryClientProvider-DROpbOor.js";import{T as H}from"./Tooltip-DIv0rXnM.js";import{B as $}from"./Button-DO_YtF-L.js";import{c as z}from"./createSvgIcon-DB8vrG54.js";import{L as Q}from"./Link-t4uxn4d5.js";import"./LoadingScreen-CwiLH8uN.js";import"./Backdrop-DkQYsTeg.js";import"./createTheme-C8aN_5H7.js";import"./useSlot-DH9rqZvE.js";import"./useForkRef-BDlNsu6F.js";import"./DefaultPropsProvider-DfeCRuM2.js";import"./Fade-DblKOQCF.js";import"./useTheme-D1Mz9iKf.js";import"./useTheme-CiV8_rAf.js";import"./getReactElementRef-BnzINgQV.js";import"./useTimeout-D3iui2zG.js";import"./index-BEGoUC_S.js";import"./iframe-BDeBTOK4.js";import"./index-QvRUPdA0.js";import"./Box-DVYF36LU.js";import"./extendSxProp-C7UKrf5K.js";import"./Typography-CyqgmQqf.js";import"./index-RffKHa2K.js";import"./createSimplePaletteValueFilter-CkWiCtpD.js";import"./LinearProgress-Du-3dBeY.js";import"./index-CKApejzQ.js";import"./StyledTableContainer-B7yA9ivs.js";import"./merge-V-4g9wfx.js";import"./_Uint8Array-DLQNtMzN.js";import"./isArray-DP3AaeZx.js";import"./_initCloneObject-DzFlCXpP.js";import"./identity-DKeuBCMA.js";import"./ExpandCollapseButton-CtbrHdru.js";import"./IconSvg-C5qsd30Z.js";import"./spreadSx-CwcO6WA9.js";import"./LayersTwoTone-DfAxQ7L_.js";import"./ContentCopyTwoTone-DsBNkC_e.js";import"./HelpOutlineTwoTone-CUc0C_FR.js";import"./ErrorOutlined-BClx7LBf.js";import"./GetAppTwoTone-BrTgFPO5.js";import"./InfoOutlined-DX3MMlly.js";import"./PhoneTwoTone-CAont7xY.js";import"./DeleteTwoTone-DcCr44yB.js";import"./CheckCircleTwoTone-JwoKdBR7.js";import"./index-DxDswEVX.js";import"./index-CAsVpK1Y.js";import"./const-BP60AzNb.js";import"./Skeleton-Dc4-dhYQ.js";import"./EnumFacetFilterUI-B3q1k5qV.js";import"./FacetFilterHeader-JdAQxdyU.js";import"./IconButton-bBx42FY4.js";import"./ButtonBase-B6SxUwFg.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-Di39B066.js";import"./FormControlLabel-Cav9qzx6.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-CSuk6tJp.js";import"./Checkbox-CQrsggq2.js";import"./SwitchBase-CTCFdyyt.js";import"./useControlled-Cezacta0.js";import"./mergeSlotProps-BMJNUZQB.js";import"./Radio-3JoarmcO.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Select-CUAcVkeg.js";import"./Menu-DMgKLQJA.js";import"./Grow-DBmkL7Nf.js";import"./Popover-BagoC3GC.js";import"./isHostComponent-DVu5iVWx.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Modal-nTPshs7W.js";import"./getScrollbarSize-CaCM53D3.js";import"./Paper-CW_EMfLy.js";import"./MenuList-CCFrxMgK.js";import"./List-pNBnRpKx.js";import"./FormControl-DnevGwDT.js";import"./isMuiElement-DXkV99eq.js";import"./inputBaseClasses-CzCcMIdu.js";import"./InputBase-zrs_u1K0.js";import"./Input-YvTkdz55.js";import"./MenuItem-B3EB8xm3.js";import"./dividerClasses-CubX0hrV.js";import"./TextField-DNu-b85-.js";import"./InputLabel-Dv-OQIJl.js";import"./FormLabel-BvtGjSmk.js";import"./FormHelperText-2KuHUtKt.js";import"./Collapse-BvEvwhh1.js";import"./noop-DX6rZLP_.js";import"./isEqual-BDrI-DAW.js";import"./_getTag-8zR4n8vk.js";import"./HelpTwoTone-DKqmwGdN.js";import"./SynapseConstants-CqTJLipI.js";import"./useQuery-BazSUp96.js";import"./SkeletonTable-BGgT4bkS.js";import"./times-D2v-CNuV.js";import"./toInteger-CZcw0g2Z.js";import"./isSymbol-BRKELcfc.js";import"./ToastMessage-CHpAk-Ra.js";import"./FullWidthAlert-BXBdUtvq.js";import"./Alert--2zsbDLV.js";import"./Close-FgBi9k_n.js";import"./Stack-Dkx_EbsU.js";import"./useThemeProps-BGnqLams.js";import"./getThemeProps-BkdBMERG.js";import"./AlertTitle-Do0KjEmZ.js";import"./ClickAwayListener-CgxM2Y3N.js";import"./uniqueId-BzfRbjRH.js";import"./toString-CaaFPOKx.js";import"./CSSTransition-EVS3WDHd.js";import"./Divider-DcX8JeIR.js";import"./Card--W3kN1U5.js";import"./Avatar-BA3vkPcL.js";import"./Chip-DEDDpc4r.js";import"./fetchWithExponentialTimeout-UV9FrpR8.js";import"./tinycolor-Begke6kS.js";import"./calculateFriendlyFileSize-C9qxO0pM.js";import"./InfoTwoTone-DPKU0Q1t.js";import"./chunk-AYJ5UCUI-CooKSxTU.js";import"./cloneDeep-CmGcLtYN.js";import"./index-CnsReYf-.js";import"./react-BknCWz1L.js";import"./localizedFormat-DcDj2y6M.js";import"./utc-CT2pH-2l.js";import"./waitForAsyncResult-Cb_jNxh0.js";import"./queryOptions-C9woPjwX.js";import"./Popper-DA9vNxNk.js";const U=z(o.jsx("path",{d:"M19 5v9h-5v5H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10l6-6V5c0-1.1-.9-2-2-2m-7 11H7v-2h5zm5-4H7V8h10z"}));function l(t){const r=t.taskProperties;if(r==null)throw new Error("CurationTask is missing taskProperties");switch(r.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return r.fileViewId;case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return r.recordSetId;default:throw new Error(`Unknown taskProperties concreteType: ${r.concreteType}`)}}try{l.displayName="getGridSourceIdForTask",l.__docgenInfo={description:`For a given CurationTask that could be used to create a GridSession, return the ID of the source entity that would be
used to create the GridSession.`,displayName:"getGridSourceIdForTask",props:{taskId:{defaultValue:null,description:`The unique identifier issued to this task when it was created.
@memberof CurationTask`,name:"taskId",required:!1,type:{name:"{number}"}},dataType:{defaultValue:null,description:`Will match the data type that a contributor plans to contribute.  The dataType must be unique within a project.
@memberof CurationTask`,name:"dataType",required:!1,type:{name:"{string}"}},projectId:{defaultValue:null,description:`The synId of the project.
@memberof CurationTask`,name:"projectId",required:!1,type:{name:"{string}"}},instructions:{defaultValue:null,description:`Instructions to the data contributor.
@memberof CurationTask`,name:"instructions",required:!1,type:{name:"{string}"}},etag:{defaultValue:null,description:`Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.
@memberof CurationTask`,name:"etag",required:!1,type:{name:"{string}"}},createdOn:{defaultValue:null,description:"@memberof CurationTask",name:"createdOn",required:!1,type:{name:"{string}"}},modifiedOn:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedOn",required:!1,type:{name:"{string}"}},createdBy:{defaultValue:null,description:"@memberof CurationTask",name:"createdBy",required:!1,type:{name:"{string}"}},modifiedBy:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedBy",required:!1,type:{name:"{string}"}},taskProperties:{defaultValue:null,description:"@memberof CurationTask",name:"taskProperties",required:!1,type:{name:"{CurationTaskProperties}"}}}}}catch{}function W(t,r){const{synapseClient:e,keyFactory:i}=C();return B({...r,queryKey:i.getCurationTaskListKey(t),queryFn:a=>e.curationTaskServicesClient.postRepoV1CurationTaskList({listCurationTaskRequest:{projectId:t,nextPageToken:a.pageParam}}),initialPageParam:void 0,getNextPageParam:a=>a.nextPageToken})}function K(t,r){return`${I(w.PORTAL_ENDPOINT)}Synapse:${t}`}function J(t){return`${I(w.PORTAL_ENDPOINT)}Grid:${t}`}function u(t){switch(t.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",initialQuery:{sql:`SELECT * FROM ${t.fileViewId}`}};case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",recordSetId:t.recordSetId};default:throw new Error(`Unknown taskProperties concreteType: ${t.concreteType}`)}}try{u.displayName="getCreateGridRequestForMetadataTask",u.__docgenInfo={description:"Generates a CreateGridRequest for a metadata task based on its properties.",displayName:"getCreateGridRequestForMetadataTask",props:{concreteType:{defaultValue:null,description:`Indicates which implementation of CurationTaskProperties this object represents. Possible values include: 'org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties' and 'org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties'.
@memberof FileBasedMetadataTaskProperties
@memberof RecordBasedMetadataTaskProperties`,name:"concreteType",required:!0,type:{name:`{string}
{string}`}},uploadFolderId:{defaultValue:null,description:`The synId of the folder where data files of this type are to be uploaded.
@memberof FileBasedMetadataTaskProperties`,name:"uploadFolderId",required:!1,type:{name:"{string}"}},fileViewId:{defaultValue:null,description:`The synId of the FileView that shows all data of this type.  This FileView will be used to start new grid sessions for file annotation curation.
@memberof FileBasedMetadataTaskProperties`,name:"fileViewId",required:!1,type:{name:"{string}"}},recordSetId:{defaultValue:null,description:`The synId of the RecordSet that will contain all record-based metadata for a specific type.  This RecordSet will be used to start new grid sessions for both 'upsert' and record-based curation for this type.
@memberof RecordBasedMetadataTaskProperties`,name:"recordSetId",required:!1,type:{name:"{string}"}}}}}catch{}async function X(t,r){const{queryClient:e}=r,{keyFactory:i,synapseClient:a}=r.synapseContext,s=await e.fetchQuery(L({sourceId:t},{keyFactory:i,synapseClient:a}));return D(s.page)?null:s.page[0]}function Y(){const t=A(),r=C(),{mutateAsync:e}=v();return S({mutationFn:async({sourceId:i,createRequest:a})=>{const s=await X(i,{queryClient:t,synapseContext:r});return s??(await e(a)).gridSession}})}function Z(){const{mutateAsync:t}=Y();return S({mutationFn:async({curationTask:r})=>{const e=r.taskProperties;if(e==null)throw new Error("CurationTask is missing taskProperties");const i=l(r),a=u(e);return await t({sourceId:i,createRequest:a})}})}function f(t){const{curationTask:r}=t,{mutateAsync:e,isPending:i}=Z(),a=P.useCallback(async()=>{const n=await e({curationTask:r}),d=J(n.sessionId);window.open(d,"_blank","noopener")},[r,e]),s=o.jsx(H,{title:"Open a Working Copy document to edit metadata",children:o.jsx($,{size:"small",startIcon:o.jsx(U,{}),loading:i,onClick:()=>{a()},children:"Working Copy"})});return o.jsx(o.Fragment,{children:s})}try{f.displayName="MetadataTaskTableActionCell",f.__docgenInfo={description:`Handles rendering the 'Actions' cell in the Metadata Task table, which provides buttons for the user
to accomplish the actions they can take on a Metadata Task, such as opening a data grid for the entity referenced
by the task.`,displayName:"MetadataTaskTableActionCell",props:{curationTask:{defaultValue:null,description:"",name:"curationTask",required:!0,type:{name:"CurationTask"}},canEdit:{defaultValue:null,description:"",name:"canEdit",required:!0,type:{name:"boolean"}}}}}catch{}function ee(t){const r=q();return[r.accessor("dataType",{header:e=>o.jsx(m,{...e,title:"Data Type"}),cell:({row:e,getValue:i})=>{const a=l(e.original);return o.jsx(Q,{href:K(a),children:i()})},enableSorting:!1,enableColumnFilter:!1}),r.accessor("instructions",{header:e=>o.jsx(m,{...e,title:"Instructions"}),cell:({getValue:e})=>o.jsx("p",{children:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedBy",{header:e=>o.jsx(m,{...e,title:"Modified By"}),cell:({getValue:e})=>o.jsx(R,{userId:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedOn",{header:e=>o.jsx(m,{...e,title:"Modified On"}),cell:({getValue:e})=>N(O(e())),enableSorting:!1,enableColumnFilter:!1}),r.display({id:"actions",header:e=>o.jsx(m,{...e,title:"Actions"}),cell:({row:e})=>o.jsx(f,{curationTask:e.original,canEdit:t})})]}function g(t){var T;const{projectId:r}=t,{data:e,hasNextPage:i,fetchNextPage:a,isLoading:s,isFetchingNextPage:n}=W(r),{data:d,isLoading:_}=E(r),M=((T=d==null?void 0:d.permissions)==null?void 0:T.canEdit)??!1,x=P.useMemo(()=>(e==null?void 0:e.pages.flatMap(p=>p.page))??[],[e]);return{table:j({data:x,columns:ee(M),getRowId:p=>String(p.taskId),getCoreRowModel:G(),columnResizeMode:"onChange",manualSorting:!1,meta:{getWrapInExpandableTd:p=>p.column.id==="instructions"}}),isLoading:s||_,hasNextPage:i,fetchNextPage:a,isFetchingNextPage:n}}try{g.displayName="useMetadataTaskTable",g.__docgenInfo={description:"Provides a table instance and loading states for displaying metadata curation tasks associated with a project.",displayName:"useMetadataTaskTable",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}function y(t){const{projectId:r}=t,{table:e,isLoading:i,hasNextPage:a,fetchNextPage:s,isFetchingNextPage:n}=g({projectId:r});return o.jsx(F,{table:o.jsx(V,{table:e,styledTableContainerProps:{sx:{my:2}}}),isLoading:i,isEmpty:!i&&e.getRowModel().rows.length===0,hasNextPage:a,onFetchNextPageClicked:()=>{s()},isFetchingNextPage:n})}try{y.displayName="MetadataTasksPage",y.__docgenInfo={description:"Displays a list of metadata curation tasks for a particular project, with actions that can be performed on each task.",displayName:"MetadataTasksPage",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}const Or={title:"Synapse/Entity/MetadataTaskTable",component:y},c={name:"MetadataTaskTable",args:{projectId:"syn12554559"},parameters:{stack:"development"}};var k,h,b;c.parameters={...c.parameters,docs:{...(k=c.parameters)==null?void 0:k.docs,source:{originalSource:`{
  name: 'MetadataTaskTable',
  args: {
    projectId: 'syn12554559'
  },
  parameters: {
    stack: 'development'
  }
}`,...(b=(h=c.parameters)==null?void 0:h.docs)==null?void 0:b.source}}};const Lr=["Demo"];export{c as Demo,Lr as __namedExportsOrder,Or as default};
