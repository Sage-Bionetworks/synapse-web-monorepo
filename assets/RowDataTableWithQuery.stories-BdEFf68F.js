import{j as p}from"./iframe-Ci1lmE8g.js";import{R as a}from"./RowDataTableWithQuery-Bwl0y36j.js";import"./index-r8ZA1smB.js";import"./SqlFunctions-DhkJEscO.js";import"./SkeletonButton-CC-6gNoS.js";import"./SkeletonInlineBlock-B2RYwmUI.js";import"./SkeletonTable-DkbE7er9.js";import"./SkeletonParagraph-ITJPOI8x.js";import"./RowDataTable-Dg4Oq0Sn.js";import"./StyledTableContainer-C2YduroY.js";import"./SynapseCardLabel-CYZxnGbO.js";import"./CardUtils-DHnUfP64.js";import"./EntityLink-Bzj0KVFg.js";import"./useEntity-vafuLvak.js";import"./pickBy-DBr0S374.js";import"./isString-D4RD_z4s.js";import"./_baseIteratee-BQlpWk-E.js";import"./useQueries-DsbpWbBj.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-DWL-Og4B.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-DbW89d5B.js";import"./useGetEntityHeaders-DP9Iv32P.js";import"./EntityIcon-42iM6nRf.js";import"./ErrorChip-FIzpsWdF.js";import"./Chip-7ZjY8iwO.js";import"./MarkdownSynapse-3G1qoarh.js";import"./UserBadge-DRfGM4AR.js";import"./MenuItem-DNhPNPdH.js";import"./Card-B9m98vxz.js";import"./ImageFileHandle-D_Zr00TH.js";import"./index-5z_r4Nft.js";import"./Box-Bf1kGzep.js";import"./GenericCard-D3T3aTgT.js";import"./HeaderCard-DVQoMaih.js";import"./index-BFzEH3FB.js";import"./Icon-tt8zq_br.js";import"./mouse-0GM7jwcJ.js";import"./SortDown-CmQpCgNs.js";import"./ShowMore-DJispNax.js";import"./HeaderCardV2-c9LPmt-8.js";import"./index-BdMb-1ps.js";import"./SustainabilityScorecard-D-vwGDas.js";import"./Close-CELbEfBf.js";import"./Dial-D30wlEtj.js";import"./CheckIcon-gSvO-QLN.js";import"./NoContentAvailable-CVUuE437.js";import"./FileHandleLink-CdsM9Yua.js";const e={name:"Name",grantDOI:"DOI",dataType:"Data Type(s)"},n={sql:"SELECT * FROM syn52694652"},mr={title:"UI/RowDataTable/RowDataTableWithQuery",component:a,parameters:{chromatic:{viewports:[600,1200]}}},r={render:i=>p.jsx(a,{...i}),args:{query:n,columnAliases:e,displayedColumns:["studyId","name","grantDOI"],columnLinks:[{isMarkdown:!1,matchColumnName:"Grant DOI",linkColumnName:"Grant DOI"}]}};var o,t,m;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: args => <RowDataTableWithQuery {...args} />,
  args: {
    query: mockQuery,
    columnAliases: dataColumnAliases,
    displayedColumns: ['studyId', 'name', 'grantDOI'],
    columnLinks: [{
      isMarkdown: false,
      matchColumnName: 'Grant DOI',
      linkColumnName: 'Grant DOI'
    }]
  }
}`,...(m=(t=r.parameters)==null?void 0:t.docs)==null?void 0:m.source}}};const ar=["Demo"];export{r as Demo,ar as __namedExportsOrder,mr as default};
