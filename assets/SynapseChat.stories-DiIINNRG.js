import{S as p}from"./SynapseChat-Bu8rzR_S.js";import{g as e}from"./chatHandlers-BSqxq5in.js";import{M as t}from"./SynapseClient-C1Ifdsgn.js";import{g as a}from"./userProfileHandlers-DunkVjw9.js";import{g as s}from"./entityHandlers-DPs3WlKX.js";import"./jsx-runtime-DoxjgJx5.js";import"./index-Cu9bd8lq.js";import"./SkeletonButton-qvhv91j_.js";import"./Skeleton-D3uxr_0h.js";import"./createTheme-CFwAOJQC.js";import"./index-GEGPABih.js";import"./styled-uoyYAB-L.js";import"./colorManipulator-CSxSE2hh.js";import"./Button-BkvFhVsL.js";import"./ButtonBase-CwAnxZmp.js";import"./TransitionGroupContext-C4KIfRep.js";import"./useForkRef-Bm_QQ74L.js";import"./useIsFocusVisible-Lp1_y5xp.js";import"./SkeletonInlineBlock-xinjJ1wr.js";import"./SkeletonTable-BnQ5noh_.js";import"./times-BHmAKp8a.js";import"./_baseTimes-DoMoQz2v.js";import"./identity-DKeuBCMA.js";import"./toInteger-CYyrx-ZX.js";import"./isObject-C3e4t58V.js";import"./isSymbol-BzKS7Qf1.js";import"./isArray-ggc3KxVp.js";import"./Box-tOdEuW_y.js";import"./SkeletonParagraph-D8hc_zPd.js";import"./utils-Cz4ynwjU.js";import"./index-BlO3JfGB.js";import"./ListItem-CRhDLg2K.js";import"./List-DCKeaqo7.js";import"./listItemButtonClasses-Ibz6wQu0.js";import"./isMuiElement-yx-QWTmT.js";import"./isHostComponent-DVu5iVWx.js";import"./ListItemText-DVxJOeuN.js";import"./listItemTextClasses-BX68iLeJ.js";import"./Typography-Ctk8_6Bo.js";import"./createSvgIcon--fcRVpp9.js";import"./useMutation-DAMF4D7y.js";import"./useQuery-ChYzlhEH.js";import"./useInfiniteQuery-DxmW4HQc.js";import"./RegularExpressions-B4Jr_WQF.js";import"./index-lW5bDacg.js";import"./OrientationBanner-Ct6IgTPI.js";import"./FullWidthAlert-CpohRhD9.js";import"./Alert-DevAguyB.js";import"./mergeSlotProps-bXd1ns9H.js";import"./Paper-C3XTRciO.js";import"./IconButton-rjGZl5Ij.js";import"./Stack-BCUKu9qx.js";import"./AlertTitle-F01TNSvq.js";import"./Grow-Dczl5MLz.js";import"./ClickAwayListener-Ba-YFlDA.js";import"./ownerDocument-DW-IO8s5.js";import"./Tooltip-Cr4lETRB.js";import"./index-_EfqdWAV.js";import"./useControlled-JEQ1v-P8.js";import"./useId-g68bhPgm.js";import"./TextField-Babz9VTU.js";import"./FormControl-D2SAlsbf.js";import"./useFormControl-vG3XTiAH.js";import"./inputBaseClasses-CcXvGEyU.js";import"./ownerWindow-BN2rbQ_G.js";import"./InputLabel-HjQ8NhiL.js";import"./Select-DyEO4Yas.js";import"./Menu-DP0ZqW8h.js";import"./Modal-DrOgiQfJ.js";import"./Backdrop-C06rXI7r.js";import"./Fade-BXejYtqq.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./createChainedFunction-BO_9K8Jh.js";import"./MenuList-4qTTYqEf.js";import"./ArrowUpward-CAQmf2j-.js";import"./index-FyOhf-dK.js";import"./util-Ct2ns1Jn.js";import"./index-C2pXwPwl.js";import"./asyncJobHandlers-CwkgqJxc.js";import"./BasicMockedCrudService-BLHgO69P.js";import"./cloneDeep-FcqOClIJ.js";import"./_baseClone-Cb_rEwKL.js";import"./_Uint8Array-C7sos_v8.js";import"./_Map-BfIf8dAI.js";import"./_initCloneObject-Sqh2TOTy.js";import"./_defineProperty-7gnA7JV6.js";import"./_getAllKeys-CzafqgHr.js";import"./_getTag-CC1n5fj9.js";import"./isEqual-vNlsDXvh.js";import"./_cacheHas-C64lAb-V.js";import"./_setToArray-CSiN_fit.js";import"./uniqueId-CSw6ftlJ.js";import"./toString-CYyvKWOl.js";import"./SynapseConstants-DKOAl3NQ.js";import"./tinycolor-Begke6kS.js";import"./InfoTwoTone-C882d77b.js";import"./CheckCircleTwoTone-nCTn5zJK.js";import"./dayjs.min-D1RcYm3-.js";import"./index-SDyqs4cU.js";import"./tiny-invariant-CopsF_GD.js";import"./Link-ceK_fu-q.js";import"./StringUtils-DWIjEO6C.js";import"./mockEntity-KGFz3U_A.js";import"./mock_user_profile-CyZOyNQ0.js";import"./mockFileEntity-CVhPutWk.js";import"./mock_file_handle-ByOgAZ02.js";import"./mockProject-BGFdxlAo.js";import"./mockTeam-D1EfI-uU.js";import"./index-Du6141aY.js";import"./mockTableEntity-2-gQEvTr.js";import"./mockFileEntityACLVariants-Ds-naSlD.js";import"./fakerUtils-bF6LKVwK.js";import"./mockSchema-DxN21y93.js";const ht={title:"Synapse/Chat",component:p,parameters:{chromatic:{viewports:[600,1200]}}},r={args:{initialMessage:"hello"},parameters:{stack:"mock",msw:{handlers:[...a(t),...s(t),...e(t)]}}};var o,m,i;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  args: {
    initialMessage: 'hello'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getUserProfileHandlers(MOCK_REPO_ORIGIN), ...getEntityHandlers(MOCK_REPO_ORIGIN), ...getChatbotHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(i=(m=r.parameters)==null?void 0:m.docs)==null?void 0:i.source}}};const Ot=["ChatWithSynapse"];export{r as ChatWithSynapse,Ot as __namedExportsOrder,ht as default};
