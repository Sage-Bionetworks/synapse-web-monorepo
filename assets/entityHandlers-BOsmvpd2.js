import{l}from"./index-CGGsuVLc.js";import{a6 as k,a7 as I,a8 as f,a9 as S,aa as g,ab as _,ac as N,ad as $,ae as T,af as E}from"./SynapseClient-D4M9LQNp.js";import{U as m}from"./index-Pxtlv3yl.js";import{m as v}from"./index-B0XlAcVw.js";import{a as L}from"./mockEntity-BzKmnVrb.js";import{m as O}from"./mockSchema-eHnId466.js";import{a as b}from"./mockProject-RUC7XCll.js";import"./OrientationBanner-BV5RFxzC.js";import"./getEndpoint-CjoHA800.js";import"./index-Dl6G-zuu.js";import"./jsx-runtime-Du8NFWEI.js";import{u as w}from"./uniqueId-DePWDRrE.js";const U=1111,j=2222,A=3333,M=4444,y={storageLocationId:k,uploadType:m.S3,banner:"",concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},D={...y,baseKey:"exampleS3BaseKey",stsEnabled:!0,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},h={...D,storageLocationId:U,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalS3Bucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalS3UploadDestination"},C={...y,baseKey:"exampleGCPBaseKey",storageLocationId:j,uploadType:m.GOOGLECLOUDSTORAGE,bucket:"myExternalGCPBucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination"},G={...y,storageLocationId:A,uploadType:m.HTTPS,url:"https://myurl.fake",concreteType:"org.sagebionetworks.repo.model.file.ExternalUploadDestination"},R={...y,storageLocationId:M,uploadType:m.HTTPS,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalObjectStoreBucket",keyPrefixUUID:"uuidKeyPrefix",concreteType:"org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination"},B=[D,h,C,G,R];function P(a){const t=a.map(E);return v.filter(r=>t.includes(E(r.id)))}function p(a){const t=P([a]);if(t.length!=0)return t[0]}function K(a,t){return l.rest.post(`${a}${T(":entityId")}`,async(r,e,s)=>{let o=404,n={reason:`Mock Service worker could not find a mock entity bundle with ID ${r.params.entityId}`};if(t)n=t,o=200;else{const i=p(r.params.entityId);i!=null&&i.bundle&&(n=i.bundle,o=200)}return e(s.status(o),s.json(n))})}function H(a,t){return l.rest.post(`${a}${T(":entityId",":versionNumber")}`,async(r,e,s)=>{const o=r.params.entityId,n=parseInt(r.params.versionNumber);let i=404,c={reason:`Mock Service worker could not find a mock entity bundle with ID ${o}`};if(t)c=t,i=200;else{const d=p(o);if(d){const u=d.bundle;d.versions&&d.versions[n]?c={...u,entity:d.versions[n]}:c=u,i=200}}return e(s.status(i),s.json(c))})}const et=a=>[l.rest.post(`${a}${I}`,async(t,r,e)=>{let s=200;const o=await t.json();let n={reason:"..."};return o?o.name===L?(n.reason="Invalid project name",s=403):n={id:w("syn"),...o}:(s=400,n={reason:`Mock service worker received the following malformed body for PUT ${I} : ${JSON.stringify(o)}`}),r(e.status(s),e.json(n))}),l.rest.get(`${a}${f(":entityId")}`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity with ID ${t.params.entityId}`};const n=p(t.params.entityId);return n&&(o=n.entity,s=200),r(e.status(s),e.json(o))}),l.rest.get(`${a}${S(":entityId")}`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find mock entity versions for ID ${t.params.entityId}`};const n=p(t.params.entityId);return n&&n.versionInfo&&(o={results:n.versionInfo},s=200),r(e.status(s),e.json(o))}),l.rest.get(`${a}${g(":entityId",":versionNumber")}`,async(t,r,e)=>{let s=404;const o=t.params.entityId,n=t.params.versionNumber.toString(),i=parseInt(n);let c={reason:`Mock Service worker could not find a mock versioned entity with ID ${o}.${n}`};const d=p(t.params.entityId);return d&&d.versions&&d.versions[i]&&(c=d.versions[i],s=200),r(e.status(s),e.json(c))}),K(a),H(a),l.rest.get(`${a}${_(":entityId")}`,async(t,r,e)=>r(e.status(200),e.json(O))),l.rest.get(`${a}${N(":entityId")}`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${t.params.entityId}`};const n=p(t.params.entityId);return n!=null&&n.json&&(o=n.json,s=200),r(e.status(s),e.json(o))}),l.rest.post(`${a}${$}`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity bundle with ID ${t.params.entityId}`};const i=t.body.references.map(c=>{var u;const d=(u=p(c.targetId))==null?void 0:u.entityHeader;if(d)return{...d,id:c.targetId}}).filter(c=>!!c);return i&&(o={results:i},s=200),r(e.status(s),e.json(o))}),l.rest.get(`${a}${f(":entityId")}/path`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find a mock entity path using ID ${t.params.entityId}`};const n=p(t.params.entityId);return n&&n.path&&(o=n.path,s=200),r(e.status(s),e.json(o))}),l.rest.get(`${a}/file/v1/entity/:id/uploadDestination`,async(t,r,e)=>{const s={banner:"",storageLocationId:1,uploadType:m.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(e.status(200),e.json(s))}),l.rest.get(`${a}/file/v1/entity/:id/uploadDestination/:storageLocationId`,async(t,r,e)=>{let s=404,o={reason:`Mock Service worker could not find an uploadDestination using storageLocationId ${t.params.storageLocationId}`};const n=B.find(i=>Number(t.params.storageLocationId)===i.storageLocationId);return n&&(o=n,s=200),r(e.status(s),e.json(o))}),l.rest.get(`${a}/repo/v1/projects`,async(t,r,e)=>{const s={results:b.map(o=>({name:o.name,id:o.id,lastActivity:"2024-01-04T21:11:59.000Z",modifiedBy:parseInt(o.entity.modifiedBy),modifiedOn:o.entity.modifiedOn}))};return r(e.status(200),e.json(s))})];export{et as g};
