import{$ as T,a0 as p,a1 as D}from"./useFiles-Bt_N3vpj.js";import{h as d,H as r}from"./index-E5UbYjX5.js";import{m as _,M as g}from"./mockAccessRequirements-3iAn6vbZ.js";import{o as c}from"./VerificationSubmission-CDh9xETu.js";import{M as t,a as l}from"./mock_user_profile-Bg50HGfI.js";import{e as S,f as A,g as E,h as C}from"./mock_file_handle-7frMWCuU.js";import{M as I}from"./MockResearchProject-Bji3XTPv.js";import{B as u}from"./BasicMockedCrudService-C9zvTqhx.js";const M="3541518",O="49813181",m={id:M,accessorChanges:[{userId:String(t),type:c.GAIN_ACCESS}],attachments:[E,C],createdBy:String(t),createdOn:"2023-04-19T13:06:51+00:00",ducFileHandleId:A,irbFileHandleId:S,modifiedBy:String(t),modifiedOn:"2023-04-19T13:06:51+00:00",researchProjectId:I,etag:"0",accessRequirementId:String(_.id),concreteType:"org.sagebionetworks.repo.model.dataaccess.Request"},R={id:O,accessorChanges:[{userId:String(t),type:c.GAIN_ACCESS},{userId:String(l),type:c.REVOKE_ACCESS}],attachments:[E,C],createdBy:String(t),createdOn:"2023-04-19T13:06:51+00:00",ducFileHandleId:A,irbFileHandleId:S,modifiedBy:String(t),modifiedOn:"2023-04-19T13:06:51+00:00",researchProjectId:I,etag:"0",accessRequirementId:String(_.id),concreteType:"org.sagebionetworks.repo.model.dataaccess.Renewal",publication:"My cool paper that used this data: https://doi.org/10.1016/j.cell.2011.02.013",summaryOfUse:"We ran a χ² test of homogeneity to determine if this data was representative of the rest of the population with consideration for similar large data collections."},i=new u({idField:"id",autoGenerateId:!0,initialData:[m,R]}),f=new u({initialData:[{accessRequirementId:String(_.id),requestId:m.id},{accessRequirementId:String(g),requestId:R.id}]});function L(o){return[d.get(`${o}${T(":id")}`,({params:s})=>{const e=f.getOneByField("accessRequirementId",s.id);if(e&&e.requestId){const a=i.getOneById(e.requestId);if(a)return r.json(a,{status:200})}return r.json({message:`MSW: Request or Renewal not found for access requirement ID: ${s.id}`},{status:404})}),d.post(`${o}${p}`,async({request:s})=>{const e=await s.json(),a=e.id?i.getOneById(e.id):null;let n;return a?n=i.update(e.id,e):n=i.create(e),r.json(n,{status:201})}),d.post(`${o}${D(":id")}`,()=>r.json({},{status:201}))]}export{L as g};
