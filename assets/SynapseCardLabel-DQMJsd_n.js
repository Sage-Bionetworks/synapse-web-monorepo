import{j as r}from"./jsx-runtime-D_zvdyIk.js";import{T as v,g as U}from"./CardUtils-DSRZv69U.js";import{f as H}from"./DateFormatter-C2XUkqkK.js";import{a as E}from"./SqlFunctions-CqOxgBqv.js";import"./StringUtils-Dsx1COFf.js";import{P as $}from"./useFiles-Cicb2Fab.js";import{F as B,g as _}from"./VerificationSubmission-NmfK1W18.js";import{d as O}from"./dayjs.min-BRrhIEIv.js";import{r as f}from"./index-BGNdVh4R.js";import{E as G}from"./EntityLink-3NLya-HU.js";import{M as L}from"./MarkdownSynapse-vhDxbZOi.js";import{U as S}from"./UserBadge-CtaZYpWZ.js";import"./OrientationBanner-BlUDpySg.js";import{u as q}from"./useEntity-CJ1_crdh.js";import{I as W}from"./ImageFileHandle-DIGH1ZK7.js";import{B as X}from"./Box-CyCxFDbh.js";import{L as j}from"./Link-YzWgcoa0.js";import{i as Q}from"./_baseUniq-d9dUqTFO.js";import{T as J}from"./Tooltip-CZAWndgC.js";const N=d=>{const{entityId:a}=d,[p,n]=f.useState(!1),{data:x}=q(a.toString()),u=x&&"dataFileHandleId"in x?x.dataFileHandleId:void 0;return u?r.jsx(X,{sx:{img:{height:p?"auto":"100px"},display:"grid",gridTemplateColumns:"auto 15px"},children:r.jsx("button",{onClick:()=>n(!p),children:r.jsx(W,{fileHandleAssociation:{associateObjectId:a.toString(),associateObjectType:B.FileEntity,fileHandleId:u}})})}):r.jsx(r.Fragment,{})};try{N.displayName="EntityColumnImage",N.__docgenInfo={description:"",displayName:"EntityColumnImage",props:{entityId:{defaultValue:null,description:"",name:"entityId",required:!0,type:{name:"string"}}}}}catch{}const e=d=>`https://bioregistry.io/${d}`,Y=[{regex:/(ado:\d{7})/,onMatch:e},{regex:/(agrkb:[1-9][0-9]{14})/,onMatch:e},{regex:/(anzctr:ACTRN\d+)/,onMatch:e},{regex:/(arrayexpress:[AEP]-\w{4}-\d+)/,onMatch:e},{regex:/(arxiv:(?:\w+(?:\-\w+)?(?:\.\w+)?)?\d{4,7}(?:\.\d+(?:v\d+)?)?)/,onMatch:e},{regex:/(atc:[A-Z](?:\d+(?:[A-Z]{1,2}(?:\d+)?)?)?)/,onMatch:e},{regex:/(atcc:(?:[a-zA-Z]+-)?\d+(?:\.\d)?)/,onMatch:e},{regex:/(bacdive:[0-9]+)/,onMatch:e},{regex:/(bfo:\d{7})/,onMatch:e},{regex:/(bgee.gene:[A-Za-z0-9]+)/,onMatch:e},{regex:/(biocyc:[A-Z-0-9]+(?:\:)?[A-Za-z0-9+_.%-:]+)/,onMatch:e},{regex:/(biogrid:\d+)/,onMatch:e},{regex:/(bioportal:(?:(?:\d+)|(?:\w+)))/,onMatch:e},{regex:/(bioproject:PRJ[DEN][A-Z]\d+)/,onMatch:e},{regex:/(biorxiv:(?:\d{4}\.\d{2}\.\d{2}\.)?\d{6,8}(?:v\d{1,3})?)/,onMatch:e},{regex:/(biosample:SAM[NED](?:\w)?\d+)/,onMatch:e},{regex:/(biostudies:S-[A-Z]{4}[\-\_A-Z\d]+)/,onMatch:e},{regex:/(bmrb:(?:bmr|bmse|bmst)?[0-9]{1,6})/,onMatch:e},{regex:/(brenda:(?:(?:\d+\.-\.-\.-)|(?:\d+\.\d+\.-\.-)|(?:\d+\.\d+\.\d+\.-)|(?:\d+\.\d+\.\d+\.\d+)))/,onMatch:e},{regex:/(brenda.ligand:\d+)/,onMatch:e},{regex:/(brenda.ligandgroup:\d+)/,onMatch:e},{regex:/(bto:\d{7})/,onMatch:e},{regex:/(cath:[1-6]\.[0-9]+\.[0-9]+\.[0-9]+)/,onMatch:e},{regex:/(cbioportal:[a-z0-9\_]+)/,onMatch:e},{regex:/(cdd:(?:cd)?\d{5})/,onMatch:e},{regex:/(cellimage:\d+)/,onMatch:e},{regex:/(cellxgene.collection:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/,onMatch:e},{regex:/(chebi:\d+)/,onMatch:e},{regex:/(chembl:CHEMBL\d+)/,onMatch:e},{regex:/(chembl.compound:CHEMBL\d+)/,onMatch:e},{regex:/(chemspider:\d+)/,onMatch:e},{regex:/(civic.aid:[0-9]+)/,onMatch:e},{regex:/(civic.did:[0-9]+)/,onMatch:e},{regex:/(civic.eid:[0-9]+)/,onMatch:e},{regex:/(civic.gid:[0-9]+)/,onMatch:e},{regex:/(civic.sid:[0-9]+)/,onMatch:e},{regex:/(civic.tid:[0-9]+)/,onMatch:e},{regex:/(civic.vid:[0-9]+)/,onMatch:e},{regex:/(clinicaltrials:NCT\d{8})/,onMatch:e},{regex:/(clinvar:\d+)/,onMatch:e},{regex:/(clinvar.record:RCV\d+(?:\.\d+)?)/,onMatch:e},{regex:/(complexportal:CPX-[0-9]+)/,onMatch:e},{regex:/(cosmic:[A-Z0-9][A-Z0-9-]*)/,onMatch:e},{regex:/(cosmic.cell:\d+)/,onMatch:e},{regex:/(cpt:\d+)/,onMatch:e},{regex:/(ctd.chemical:[CD]\d+)/,onMatch:e},{regex:/(ctri:CTRI\/\d{4}\/\d{2,3}\/\d+)/,onMatch:e},{regex:/(cvx:\d+)/,onMatch:e},{regex:/(dbgap:phs[0-9]{6}(?:.v\d+.p\d+)?)/,onMatch:e},{regex:/(dbsnp:rs\d+)/,onMatch:e},{regex:/(decipher:\d+)/,onMatch:e},{regex:/(depmap:ACH-\d+)/,onMatch:e},{regex:/(dhba:\d+)/,onMatch:e},{regex:/(disprot:DP\d{5})/,onMatch:e},{regex:/(dmba:\d+)/,onMatch:e},{regex:/(doi:10.\d{2,9}\/.*)/,onMatch:e},{regex:/(doid:\d+)/,onMatch:e},{regex:/(drks:DRKS\d+)/,onMatch:e},{regex:/(drugbank:DB\d{5})/,onMatch:e},{regex:/(drugcentral:\d+)/,onMatch:e},{regex:/(duo:\d{7})/,onMatch:e},{regex:/(ec:\d{1,2}(?:(?:(?:\.\d{1,3}){1,3})|(?:\.\d+){2}\.[nB]\d{1,3}|\.-\.-\.-|\.\d{1,3}\.-\.-|\.\d{1,3}\.\d{1,3}\.-)?)/,onMatch:e},{regex:/(ecacc:\d+)/,onMatch:e},{regex:/(edam:(?:data|topic|operation|format)\_\d{4})/,onMatch:e},{regex:/(ega.dataset:EGAD\d{11})/,onMatch:e},{regex:/(ega.study:EGAS\d{11})/,onMatch:e},{regex:/(emdb:EMD-\d{4,5})/,onMatch:e},{regex:/(empiar:\d+)/,onMatch:e},{regex:/(ena.embl:[A-Z]+[0-9]+(?:\.\d+)?)/,onMatch:e},{regex:/(ensembl:(?:(?:ENS[FPTG]\d{11}(?:\.\d+)?)|(?:FB\w{2}\d{7})|(?:Y[A-Z]{2}\d{3}[a-zA-Z](?:\-[A-Z])?)|(?:[A-Z_a-z0-9]+(?:\.)?(?:t)?(?:\d+)?(?:[a-z])?)))/,onMatch:e},{regex:/(ensembl.metazoa:\w+(?:\.)?\d+)/,onMatch:e},{regex:/(ensembl.plant:\w+(?:\.\d+)?(?:\.\d+)?)/,onMatch:e},{regex:/(euclinicaltrials:\d{4}\-\d{6}\-\d{2})/,onMatch:e},{regex:/(eupath:\d{7})/,onMatch:e},{regex:/(exac.variant:\d{1,2}\-\d+\-[GATC]\-[GATC])/,onMatch:e},{regex:/(fairsharing:(?:bsg-[dscp]?\d{6})|(?:FAIRsharing\.\w+))/,onMatch:e},{regex:/(flybase:FB\w{2}\d{7})/,onMatch:e},{regex:/(fma:\d+)/,onMatch:e},{regex:/(funderregistry:\d+)/,onMatch:e},{regex:/(gard:\d+)/,onMatch:e},{regex:/(gbif:\d+)/,onMatch:e},{regex:/(gdc:[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})/,onMatch:e},{regex:/(genecards:[A-Za-z-0-9_]+(?:\@)?)/,onMatch:e},{regex:/(geo:G(?:PL|SM|SE|DS)\d+)/,onMatch:e},{regex:/(go:\d{7})/,onMatch:e},{regex:/(gramene.gene:GR\:\d+)/,onMatch:e},{regex:/(gramene.growthstage:\d{7})/,onMatch:e},{regex:/(gramene.protein:\d+)/,onMatch:e},{regex:/(gtdb:[cdfgops]__\w+\S+)/,onMatch:e},{regex:/(hba:\d+)/,onMatch:e},{regex:/(hc.trial:\d+)/,onMatch:e},{regex:/(hgnc:\d{1,5})/,onMatch:e},{regex:/(hl7.v2codesystem:\d+)/,onMatch:e},{regex:/(hmdb:HMDB\d+)/,onMatch:e},{regex:/(icd10:(?:(?:[XVI]+)|(?:[A-Z][0-9]+(?:(?:-[A-Z][0-9]+)|(?:\.[0-9]))?)))/,onMatch:e},{regex:/(icd9:(?:(?:\d{1,3}-\d{1,3})|(?:(?:\d\d\d|V\d\d|E[8-9]\d\d)(?:\.\d{1,2})?)))/,onMatch:e},{regex:/(icdc:\d{6})/,onMatch:e},{regex:/(icf:\d+)/,onMatch:e},{regex:/(idr:[0-9]{4})/,onMatch:e},{regex:/(imgt.hla:[A-Z0-9*:]+)/,onMatch:e},{regex:/(inchi:InChI\=1S?\/[A-Za-z0-9\.]+(?:\+[0-9]+)?(?:\/[cnpqbtmsih][A-Za-z0-9\-\+\(?:\)\,\/\?\;\.]+)*)/,onMatch:e},{regex:/(inchikey:[A-Z]{14}\-[A-Z]{10}(?:\-[A-Z])?)/,onMatch:e},{regex:/(insdc:(?:[A-Z]\d{5}|[A-Z]{2}\d{6}|[A-Z]{4,6}\d{8,10}|[A-J][A-Z]{2}\d{5})(?:\.\d+)?)/,onMatch:e},{regex:/(insdc.sra:[SED]R[APRSXZ]\d+)/,onMatch:e},{regex:/(intact:EBI\-[0-9]+)/,onMatch:e},{regex:/(interpro:IPR\d{6})/,onMatch:e},{regex:/(iso.3166:\d+)/,onMatch:e},{regex:/(isrctn:ISRCTN\d+)/,onMatch:e},{regex:/(itis:\d+)/,onMatch:e},{regex:/(jaxmice:\d{6})/,onMatch:e},{regex:/(kegg:(?:(?:[CHDEGTMKR]\d+)|(?:\w+:[\w\d\.-]*)|(?:\w{2,4}\d{5})|(?:[a-z]{3,5})))/,onMatch:e},{regex:/(kegg.compound:C\d+)/,onMatch:e},{regex:/(kegg.disease:H\d+)/,onMatch:e},{regex:/(kegg.drug:D\d+)/,onMatch:e},{regex:/(kegg.glycan:G\d+)/,onMatch:e},{regex:/(kegg.pathway:\w{2,4}\d{5})/,onMatch:e},{regex:/(kegg.reaction:R\d+)/,onMatch:e},{regex:/(loinc:(?:\d|\w)+-\d)/,onMatch:e},{regex:/(massive:MSV\d+)/,onMatch:e},{regex:/(mba:\d+)/,onMatch:e},{regex:/(mesh:(?:C|D|M)\d{6,9})/,onMatch:e},{regex:/(metabolights:MTBLS\d+)/,onMatch:e},{regex:/(metacyc.compound:[A-Za-z0-9+_.%-:]+)/,onMatch:e},{regex:/(mgi:\d+)/,onMatch:e},{regex:/(mir:\d{8})/,onMatch:e},{regex:/(mirbase:MI\d{7})/,onMatch:e},{regex:/(mondo:\d{7})/,onMatch:e},{regex:/(ncbigene:\d+)/,onMatch:e},{regex:/(ncbiprotein:\w+_?\d+(?:.\d+)?)/,onMatch:e},{regex:/(ncbitaxon:(?:(?:\d+)|(?:[a-zA-Z_]+)))/,onMatch:e},{regex:/(ncit:[CRPA]\d+)/,onMatch:e},{regex:/(ndc:\d+\-\d+\-\d+)/,onMatch:e},{regex:/(ndfrt:N[0-9]{10})/,onMatch:e},{regex:/(nextprot:NX_\w+)/,onMatch:e},{regex:/(nord:\d+)/,onMatch:e},{regex:/(omim:\d+)/,onMatch:e},{regex:/(omop:\d+)/,onMatch:e},{regex:/(orcid:\d{4}-\d{4}-\d{4}-\d{3}(?:\d|X))/,onMatch:e},{regex:/(orphanet:C?\d+)/,onMatch:e},{regex:/(orphanet.ordo:C?\d+)/,onMatch:e},{regex:/(osf:[a-z0-9]{5})/,onMatch:e},{regex:/(panther.family:PTHR\d{5}(?:\:SF\d{1,3})?)/,onMatch:e},{regex:/(panther.pathway:P\d{5})/,onMatch:e},{regex:/(panther.pthcmp:(?:G|P|U|C|S)\d{5})/,onMatch:e},{regex:/(pba:\d+)/,onMatch:e},{regex:/(pdb:[0-9][A-Za-z0-9]{3})/,onMatch:e},{regex:/(pdb-ccd:\w{1,3})/,onMatch:e},{regex:/(pdb.ligand:[A-Za-z0-9]+)/,onMatch:e},{regex:/(pdc.study:PDC\d+)/,onMatch:e},{regex:/(peco:\d{7})/,onMatch:e},{regex:/(peptideatlas.dataset:PASS\d{5})/,onMatch:e},{regex:/(pfam:PF\d{5})/,onMatch:e},{regex:/(pfam.clan:CL\d+)/,onMatch:e},{regex:/(pharmgkb.disease:PA\d+)/,onMatch:e},{regex:/(pharmgkb.drug:PA\d+)/,onMatch:e},{regex:/(pharmgkb.gene:PA\w+)/,onMatch:e},{regex:/(pharmgkb.pathways:PA\d+)/,onMatch:e},{regex:/(pmc:PMC\d+(?:\.\d+)?)/,onMatch:e},{regex:/(pombase:S\w+(?:\.)?\w+(?:\.)?)/,onMatch:e},{regex:/(pride:\d{7})/,onMatch:e},{regex:/(pubchem.compound:\d+)/,onMatch:e},{regex:/(pubmed:\d+)/,onMatch:e},{regex:/(px:(?:R)?PXD\d{6})/,onMatch:e},{regex:/(radlex:RID\d+)/,onMatch:e},{regex:/(reactome:R-[A-Z]{3}-\d+(?:-\d+)?(?:\.\d+)?)/,onMatch:e},{regex:/(rebec:RBR-\w+)/,onMatch:e},{regex:/(refseq:(?:(?:(?:AC|AP|NC|NG|NM|NP|NR|NT|NW|WP|XM|XP|XR|YP|ZP)_\d+)|(?:NZ_[A-Z]{2,4}\d+))(?:\.\d+)?)/,onMatch:e},{regex:/(rfam:RF\d{5})/,onMatch:e},{regex:/(rfc:\d+)/,onMatch:e},{regex:/(rgd:\d{4,})/,onMatch:e},{regex:/(rhea:\d{5})/,onMatch:e},{regex:/(rnacentral:URS[0-9A-F]{10}(?:\_\d+)?)/,onMatch:e},{regex:/(ror:0[a-hj-km-np-tv-z|0-9]{6}[0-9]{2})/,onMatch:e},{regex:/(rrid:[a-zA-Z]+.+)/,onMatch:e},{regex:/(rrrc:\d+)/,onMatch:e},{regex:/(rxnorm:[0-9]{1,7})/,onMatch:e},{regex:/(scop:\d+)/,onMatch:e},{regex:/(sgd:(?:(?:S\d+$)|(?:Y[A-Z]{2}\d{3}[a-zA-Z](?:\-[A-Z])?)))/,onMatch:e},{regex:/(signor:SIGNOR\-[A-Z]+\d+)/,onMatch:e},{regex:/(snomedct:(?:\w+)?\d+)/,onMatch:e},{regex:/(so:\d{7})/,onMatch:e},{regex:/(ssbd.dataset:\d+)/,onMatch:e},{regex:/(ssbd.project:\d+)/,onMatch:e},{regex:/(stitch:\w{14})/,onMatch:e},{regex:/(string:(?:(?:[A-N,R-Z][0-9][A-Z][A-Z, 0-9][A-Z, 0-9][0-9])|(?:[O,P,Q][0-9][A-Z, 0-9][A-Z, 0-9][A-Z, 0-9][0-9])|(?:[0-9][A-Za-z0-9]{3})))/,onMatch:e},{regex:/(tao:\d{7})/,onMatch:e},{regex:/(tcdb:\d+(?:\.[A-Z])?(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?)/,onMatch:e},{regex:/(uberon:\d+)/,onMatch:e},{regex:/(unii:[A-Z0-9]+)/,onMatch:e},{regex:/(uniparc:UPI[A-F0-9]{10})/,onMatch:e},{regex:/(uniprot:(?:(?:[A-N,R-Z][0-9](?:[A-Z][A-Z, 0-9][A-Z, 0-9][0-9]){1,2})|(?:[O,P,Q][0-9][A-Z, 0-9][A-Z, 0-9][A-Z, 0-9][0-9])(?:\.\d+)?))/,onMatch:e},{regex:/(uniprot.isoform:(?:[A-N,R-Z][0-9][A-Z][A-Z, 0-9][A-Z, 0-9][0-9])|(?:[O,P,Q][0-9][A-Z, 0-9][A-Z, 0-9][A-Z, 0-9][0-9])(?:\-\d+))/,onMatch:e},{regex:/(uniprot.proteome:UP\d{9})/,onMatch:e},{regex:/(uniref:UniRef(?:100|90|50)_(?:[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9](?:[A-Z][A-Z0-9]{2}[0-9]){1,2}|UPI[A-F0-9]{10}))/,onMatch:e},{regex:/(wikidata:(?:Q|P|E|L)\d+)/,onMatch:e},{regex:/(wikigenes:\d+)/,onMatch:e},{regex:/(wikipathways:WP\d{1,5}(?:\_r\d+)?)/,onMatch:e},{regex:/(wormbase:(?:CE[0-9]{5}|WB[A-Z][a-z]+\d+))/,onMatch:e},{regex:/(xenbase:XB\-\w+\-\d+)/,onMatch:e},{regex:/(zenodo.record:\d+)/,onMatch:e},{regex:/(zfin:ZDB\-\w+\-\d+\-\d+)/,onMatch:e},{regex:/(zinc:(?:ZINC)?\d+)/,onMatch:e}],K={regex:new RegExp("((?:(?<=\\s)|^)syn\\d+)"),onMatch:d=>`${$.PORTAL}Synapse:${d}`},ee={regex:/(http:\/\/[^ ",]+)/,onMatch:d=>d},re={regex:/(https:\/\/[^ ",]+)/,onMatch:d=>d},de={regex:/(ftp:\/\/[^ ",]+)/,onMatch:d=>d},ne={regex:/(PMID:\d+)/,onMatch:d=>`https://pubmed.ncbi.nlm.nih.gov/${d.slice(5)}`},te={regex:/(MGI:\d+)/,onMatch:d=>`https://www.informatics.jax.org/allele/${d}`},ae={regex:/(AB_\d+)|(Addgene_\d+)|(CVCL_[a-zA-Z0-9]+)|(MMRRC_\d+-.{3})|(IMSR_JAX:\d+)/,onMatch:d=>`https://scicrunch.org/resolver/${d}`},ie={regex:/(ClinVar:VCV\d+)/,onMatch:d=>`https://www.ncbi.nlm.nih.gov/clinvar/variation/${d.slice(8)}`},ge={regex:/(ClinVar:RCV\d+)/,onMatch:d=>`https://www.ncbi.nlm.nih.gov/clinvar/${d.slice(8)}`},se={regex:/(arXiv:[a-zA-Z0-9.]+)/,onMatch:d=>`https://arxiv.org/abs/${d.slice(6)}`},oe={regex:/(rrid:[a-zA-Z]+.+)/,onMatch:d=>`https://bioregistry.io/${d}`},T=[ee,re,de,K,oe,ne,ae,te,ie,ge,se,...Y],le=T.map(d=>d.regex.source).join("|"),xe=new RegExp(le,"g");function M({text:d,className:a}){if(d==null)return r.jsx(r.Fragment,{});const p=d.split(xe);return r.jsx(r.Fragment,{children:p.map((n,x)=>{const m=T.find(u=>u.regex.test(n));return m?r.jsx(j,{href:m.onMatch(n),target:v.NEW_WINDOW,rel:"noopener noreferrer",className:a,children:n},x):n})})}try{M.displayName="Linkify",M.__docgenInfo={description:"",displayName:"Linkify",props:{text:{defaultValue:null,description:"",name:"text",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}function D(d){const{value:a,columnName:p,labelLink:n,selectColumns:x,columnModels:m,isHeader:u,className:b,rowData:k,rowId:V}=d;if(!a)return r.jsx("p",{children:a});const{strList:i,str:g,selectColumn:y}=U({columnName:p,value:a,selectColumns:x,columnModels:m}),I=y==null?void 0:y.columnType;if(!g)return r.jsx("p",{children:g});let h=b;const P={};if(u&&(h=b==null?void 0:b.concat(" ","SRC-lightLink")),I===_.USERID_LIST&&i)return r.jsx("p",{children:i.map((t,o)=>r.jsxs(f.Fragment,{children:[r.jsx(S,{userId:t,className:h}),o<i.length-1&&",  "]},t))});if(I===_.USERID&&g)return r.jsx(S,{userId:g,className:h});if(I===_.DATE&&g)return r.jsx("p",{children:H(O(Number(g)))});if(!n)return r.jsx(M,{text:g,className:h});if("resolveEntityName"in n&&n.resolveEntityName&&g){const{baseURL:t,URLColumnName:o}=n,c=`/${t}?${o}=${g}`;return r.jsx(G,{entity:g,link:c,showIcon:!1})}let s;if("isMapValueToReactNodeConfig"in n&&n.isMapValueToReactNodeConfig){const{Component:t}=n;s=r.jsx(t,{value:i||g,selectColumn:y})}else if("isMarkdown"in n&&n.isMarkdown)i?s=r.jsx("p",{children:i.map((t,o)=>r.jsxs(f.Fragment,{children:[r.jsx(L,{renderInline:!0,markdown:t},t),o<i.length-1&&",  "]},t))}):s=r.jsx(L,{renderInline:!0,markdown:a});else if("isEntityImage"in n&&n.isEntityImage)i?s=r.jsx("p",{children:i.map((t,o)=>r.jsxs(f.Fragment,{children:[r.jsx(N,{entityId:t}),o<i.length-1&&",  "]},t))}):s=r.jsx(N,{entityId:a});else{const t=i||g.split(",");let o;if("target"in n&&(o=n.target),"linkColumnName"in n){const c=E(n.linkColumnName,x,m);if(c==null)console.warn(`Could not determine column index of ${n.linkColumnName}`),s=r.jsx(r.Fragment,{children:a});else{const Z=k[c];Q(Z)?s=r.jsx(r.Fragment,{children:a}):s=r.jsx("p",{children:t.map((l,R)=>r.jsxs(f.Fragment,{children:[r.jsx(j,{href:Z??void 0,target:o??v.NEW_WINDOW,rel:"noopener noreferrer",className:h,style:P,children:l},l),R<t.length-1&&r.jsx("span",{style:{marginRight:4},children:", "})]},l))})}}else s=r.jsx("p",{children:t.map((c,Z)=>{const l=n,R=l.overrideValueWithRowID?V:c;let C="";if("baseURL"in l){const{baseURL:w,URLColumnName:A,wrapValueWithParens:z}=l,F=z?`(${R})`:R;C=`/${w}?${A}=${F}`}else if("overrideLinkURLColumnName"in l){const w=E(l.overrideLinkURLColumnName,x,m);if(w){const A=k[w];A&&(l.overrideLinkURLColumnTransform?C=l.overrideLinkURLColumnTransform(A):C=A)}}return r.jsxs(f.Fragment,{children:[r.jsx(j,{href:C,className:h,style:P,target:o??v.CURRENT_WINDOW,children:c},c),Z<t.length-1&&r.jsx("span",{style:{marginRight:4},children:", "})]},c)})})}return"tooltipText"in n&&n.tooltipText?r.jsx(J,{title:n.tooltipText,enterNextDelay:300,children:r.jsx("span",{children:s})}):s}try{D.displayName="SynapseCardLabel",D.__docgenInfo={description:"",displayName:"SynapseCardLabel",props:{value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"string"}},columnName:{defaultValue:null,description:"",name:"columnName",required:!0,type:{name:"string"}},labelLink:{defaultValue:null,description:"",name:"labelLink",required:!0,type:{name:"any"}},selectColumns:{defaultValue:null,description:"",name:"selectColumns",required:!0,type:{name:"SelectColumn[]"}},columnModels:{defaultValue:null,description:"",name:"columnModels",required:!0,type:{name:"ColumnModel[]"}},isHeader:{defaultValue:null,description:"",name:"isHeader",required:!0,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},rowData:{defaultValue:null,description:"",name:"rowData",required:!0,type:{name:"string[]"}},rowId:{defaultValue:null,description:"",name:"rowId",required:!1,type:{name:"string"}}}}}catch{}export{M as L,D as S};
