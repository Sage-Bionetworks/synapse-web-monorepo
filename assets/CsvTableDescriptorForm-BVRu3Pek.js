import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as p}from"./index-DYU4zQP4.js";import{R as V}from"./RadioGroup-CzviDqjy.js";import{F as g}from"./FormControlLabel-Dvfq9z2F.js";import{R as C}from"./Radio-CvNuE8df.js";import{T as _}from"./TextField-CZ9n3YAt.js";import{n as j}from"./noop-DX6rZLP_.js";import{G as c}from"./Grid-DO0giNpF.js";import{I as b}from"./InputLabel-CoKqIu5I.js";import{C as T}from"./Checkbox-B4yr_tyB.js";const m="__other";function h(o){const{value:l,onChange:i,options:d,radioGroupProps:u}=o,s=d.some(a=>a.value===l),[r,n]=p.useState(s?l:m),[t,f]=p.useState(s?"":l);return e.jsxs(V,{...u,value:r,onChange:a=>{n(a.target.value);let v=a.target.value;v===m&&(v=t),i(v)},children:[d.map(a=>e.jsx(g,{value:a.value,control:e.jsx(C,{}),label:a.label},a.value)),e.jsx(g,{value:m,control:e.jsx(C,{}),label:"Other"}),e.jsx(_,{value:t,slotProps:{htmlInput:{"aria-label":"Other Value"}},onChange:a=>{f(a.target.value),i(a.target.value)},disabled:r!==m})]})}try{h.displayName="RadioGroupWithOtherString",h.__docgenInfo={description:'A form component that renders a group of radio buttons with an "Other" option that allows the user to enter a custom string.',displayName:"RadioGroupWithOtherString",props:{radioGroupProps:{defaultValue:null,description:"",name:"radioGroupProps",required:!1,type:{name:'Omit<RadioGroupProps, "onChange" | "value">'}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"string"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!0,type:{name:"(newValue: string) => void"}},options:{defaultValue:null,description:"",name:"options",required:!0,type:{name:"{ value: string; label: string; }[]"}}}}}catch{}const y={separator:",",quoteCharacter:'"',escapeCharacter:"\\",lineEnd:`
`,isFirstLineHeader:!0};function x(o){const{value:l,onChange:i=j}=o,d=l??o.defaultValue??y,[u,s]=p.useState(d),r=l??u;return p.useEffect(()=>{i(u)},[u,i]),p.useImperativeHandle(o.ref,()=>({getFormData:()=>r}),[r]),e.jsxs(c,{container:!0,spacing:2,children:[e.jsxs(c,{size:{xs:12},children:[e.jsx(b,{children:"Separator"}),e.jsx(h,{radioGroupProps:{row:!0,name:"separator"},value:r.separator??",",onChange:n=>s(t=>({...t,separator:n})),options:[{value:",",label:"Comma"},{value:"	",label:"Tab"},{value:";",label:"Semicolon"}]})]}),e.jsxs(c,{size:{xs:12},children:[e.jsx(b,{children:"Escape Character"}),e.jsx(h,{radioGroupProps:{row:!0,name:"escapeCharacter"},value:r.escapeCharacter??"\\",onChange:n=>s(t=>({...t,escapeCharacter:n})),options:[{value:"\\",label:"Backslash"}]})]}),e.jsx(c,{size:{xs:12},children:e.jsx(g,{control:e.jsx(T,{}),label:"First line is the header",checked:r.isFirstLineHeader,onChange:(n,t)=>{s(f=>({...f,isFirstLineHeader:t}))}})})]})}try{x.displayName="CsvTableDescriptorForm",x.__docgenInfo={description:"A form to describe a CsvTableDescriptor",displayName:"CsvTableDescriptorForm",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<CsvTableDescriptorFormHandle>"}},defaultValue:{defaultValue:null,description:"The initial value of the form, if an uncontrolled form",name:"defaultValue",required:!1,type:{name:"CsvTableDescriptor"}},value:{defaultValue:null,description:"The current value of the form, if a controlled form",name:"value",required:!1,type:{name:"CsvTableDescriptor"}},onChange:{defaultValue:null,description:"Invoked when the form data changes",name:"onChange",required:!1,type:{name:"(descriptor: CsvTableDescriptor) => void"}}}}}catch{}export{x as C};
