import{j as d}from"./jsx-runtime-Du8NFWEI.js";import{s as u}from"./styled-CVek1lbE.js";import{B as h}from"./Box-DN73Q90z.js";import{c as t}from"./chunk-BsTAULZ2.js";const n=4,l=3,y=u(h)(({theme:e})=>({display:"flex",rowGap:e.spacing(l),columnGap:"min(2%, 16px)",flexWrap:"wrap",justifyContent:"space-evenly","& > *":{flexGrow:.25,flexBasis:"23%"}}));function s(e){if(e.length<n||e.length%n===0||e.length%n===3)return t(e,n);if(e.length%n===2){const r=t(e.slice(-6),3);return[...t(e.slice(0,-6),n),...r]}if(e.length%n===1){const r=t(e.slice(-5),3);return[...t(e.slice(0,-5),n),...r]}return console.error(`chunkItemsIntoEvenlyDistributedGroups: Invalid number of items: ${e==null?void 0:e.length}`),[]}function i(e){const{children:r}=e,o=s(r);return o.map((c,a)=>{const p=a!==o.length-1?{mb:l}:{};return d.jsx(y,{sx:p,children:c})})}try{s.displayName="chunkItemsIntoEvenlyDistributedGroups",s.__docgenInfo={description:"",displayName:"chunkItemsIntoEvenlyDistributedGroups",props:{}}}catch{}try{i.displayName="EvenlyDistributedWrappedContainer",i.__docgenInfo={description:`This component will evenly distribute the children in a wrapped container with a maximum of 4 items per row.
If the number of children is not divisible by 4, the last row(s) will have 3 or 2 items. No row will have 1 item
(unless only one item is provided). This is not possible with pure CSS flex, so this component will use JavaScript
to render the children in chunks.`,displayName:"EvenlyDistributedWrappedContainer",props:{}}}catch{}export{i as E};
