import{v as o}from"./VerificationSubmission-CDh9xETu.js";import{g as u,be as d,bf as l,B as f,bg as S,M as O}from"./useFiles-CKcUsXxo.js";import"./StringUtils-CsrYFBZo.js";import{h as i,H as n}from"./index-g3VecKVC.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-CBGOyoAj.js";import"./SynapseConstants-f1HHzz_j.js";import"./OrientationBanner-m-cOM088.js";import"./index-Dr34NRIV.js";import"./index-Dvc8DXNj.js";import"./iframe-BwvIV_wz.js";import"./spreadSx-CwcO6WA9.js";import"./react-PzVUkSXC.js";import"./FullWidthAlert-CUjAN9qZ.js";import"./Alert-BpXwWVSg.js";import"./createTheme-D21a6jVE.js";import"./DefaultPropsProvider-DUqZ9kBw.js";import"./useSlot-DJuYx4Uy.js";import"./useForkRef-Dhz7ykZQ.js";import"./createSimplePaletteValueFilter-slgZ3hH6.js";import"./createSvgIcon-DW48BYr9.js";import"./Close-DwkY6Qiq.js";import"./IconButton-BPZiwUaT.js";import"./useTimeout-n8UuqgZm.js";import"./ButtonBase-DLjfdFYs.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-BTmW-fZF.js";import"./Paper-ttVskSGJ.js";import"./useTheme-Dmw3ER-A.js";import"./useTheme-Dc8HS8-T.js";import"./Stack-DrKhoQrj.js";import"./extendSxProp-B4WGgZTT.js";import"./getThemeProps-B50kq3gk.js";import"./Box-CTY3I0FB.js";import"./AlertTitle-gzg991Kd.js";import"./Typography-BhPtSSz2.js";import"./index-BLJFs8HZ.js";import"./ClickAwayListener-BucHVlrs.js";import"./getReactElementRef-IfbnFzgG.js";import"./index-CqCBL84x.js";import"./index--qtQ6bhr.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-CDAsFndF.js";import"./Tooltip-snkrOiqJ.js";import"./index-DxUDSVJR.js";import"./useControlled-IlM_E7l9.js";import"./Popper-C8rE9mDK.js";import"./Button-CuRvemX1.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-Bup0EY49.js";import"./QueryClientProvider-ChpI_0EU.js";import"./Link-CLvRSdAZ.js";import"./Collapse-MKzszx7X.js";import"./_baseUniq-WnlZjegG.js";import"./_Uint8Array-DayFYAX9.js";import"./isArray-9GOQtFcp.js";import"./_getTag-BkCGiN6B.js";import"./isEqual-Dks0Mg8j.js";import"./merge-Dy633DfB.js";import"./_initCloneObject-Dqf9gVZ1.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-Bok-lFku.js";import"./inputBaseClasses-AHLU7mnu.js";import"./calculateFriendlyFileSize-tudez9ms.js";import"./CheckCircleTwoTone-B4GsZuMD.js";import"./InfoTwoTone-cRma8_X6.js";import"./useMutation-CnqeAjOr.js";import"./dayjs.min-DtZNiT87.js";import"./chunk-AYJ5UCUI-C5dJESas.js";import"./cloneDeep-DozhuijG.js";import"./Skeleton-B2H4n811.js";import"./SkeletonButton-DX_35qgn.js";import"./SkeletonInlineBlock-CJElzRNk.js";import"./SkeletonTable-Bi6Qng0B.js";import"./times-CJm66HwN.js";import"./toInteger-DMvinDWJ.js";import"./isSymbol-BxQi0hMS.js";import"./SkeletonParagraph-BuL4Zb7n.js";import"./MarkdownSynapse-BZ3bfxga.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(f.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=S(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
