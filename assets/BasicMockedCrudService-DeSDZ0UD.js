var s=Object.defineProperty;var u=(i,e,t)=>e in i?s(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var a=(i,e,t)=>u(i,typeof e!="symbol"?e+"":e,t);import{c as h}from"./cloneDeep-CU8tiSOH.js";import{j as l}from"./useFiles-D-hdekB1.js";import{u as c}from"./uniqueId-CNPmaLAy.js";class I{constructor(e){a(this,"data");a(this,"idField");a(this,"autoGenerateId");this.data=h(e==null?void 0:e.initialData)||[],this.idField=e==null?void 0:e.idField,this.autoGenerateId=e==null?void 0:e.autoGenerateId}getAll(){return[...this.data]}getOneById(e){const t=this.idField;if(!t)throw new Error("idField is not defined");return this.data.find(d=>l(d[t],e))}getOneByPredicate(e){return this.data.find(e)}getOneByField(e,t){return this.data.find(d=>l(d[e],t))}getMany(e){return this.data.filter(e)}create(e){const t=h(e),d=this.idField;if(d&&this.autoGenerateId)t[d]=c();else if(d&&!t[d])throw new Error(`autoGenerateId is not true, but attempted to create new object with idField: ${String(d)} and id: ${t[d]}`);return this.data.push(t),t}update(e,t,d="replace"){const n=this.idField;if(!n)throw new Error("idField is not defined");return this.data=this.data.map(r=>(l(r[n],e)&&(d==="merge"?r={...r,...t}:d==="replace"&&(r=t),r[n]=e),r)),this.getOneById(e)}delete(e){const t=this.idField;if(!t)throw new Error("idField is not defined");this.data=this.data.filter(d=>!l(d[t],e))}clear(){this.data=[]}}export{I as B};
