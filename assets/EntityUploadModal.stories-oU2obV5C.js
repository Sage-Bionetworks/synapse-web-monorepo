import{m as me}from"./mockProject-BmxXp5_k.js";import{f as pe}from"./index-DVKDE631.js";import{j as t}from"./jsx-runtime-D_zvdyIk.js";import{r as m}from"./index-dl3BENNE.js";import{D as ie}from"./DialogBase-Bm5tR3iq.js";import{d as re}from"./ToastMessage-DJiTHqjA.js";import{u as ue,U as fe,M as ye,a as ge}from"./useUploadFiles-B8PmVvij.js";import{ao as he,l as J,N as B,bH as Ie}from"./useFiles-DaAs4C7F.js";import"./VerificationSubmission-BDh1zA9f.js";import{c as X,e as ae,r as Ee}from"./StringUtils-C95LMFI-.js";import"./OrientationBanner-CC_XtpV_.js";import{r as Z,t as xe,v as Ce,a as se,u as le}from"./useEntity-BOVmQDP0.js";import{a as de,b as Ue}from"./FileHandleUtils-Cqt8kRgR.js";import{u as $}from"./useMutation-C3rNwsvu.js";import{u as Fe}from"./QueryClientProvider-kY5BcVat.js";import{n as j}from"./noop-DX6rZLP_.js";import{F as we}from"./FullWidthAlert-CecE_a1y.js";import{p as be}from"./pluralize-BCjMgTWQ.js";import{B as N}from"./Button-CaS34oa5.js";import{B as D}from"./Box-CinyAz2a.js";import{T as P}from"./Typography-7Hx3-lad.js";import{F as Se}from"./FormControlLabel-CPGEFkBv.js";import{C as ve}from"./Checkbox-lMIsMyiH.js";import{S as ce}from"./Stack-CzsLlE0q.js";import{T as q}from"./TextField-V1glEH_h.js";import{P as je}from"./ProjectStorageLimitAlert-C8cBDbkc.js";import{S as ke}from"./LoadingScreen-EzSCYjgO.js";import{A as Te}from"./Alert-DgISjGix.js";import{T as Le,a as ee}from"./Tabs-BpHBm8Cd.js";import"./mockTeam-Cq5e4d4F.js";import"./SynapseConstants-Z3CRsZYt.js";import"./mock_user_profile-Bg50HGfI.js";import"./uniqueId-3nNiaUVm.js";import"./toString-DpPFZSug.js";import"./isArray-CnbFH_tG.js";import"./iframe-YzSniT58.js";import"./isSymbol-DMzg5LrJ.js";import"./times-B_VVKwyp.js";import"./_Uint8Array-Bp2iOdm1.js";import"./identity-DKeuBCMA.js";import"./toInteger-B9w54glN.js";import"./spreadSx-CwcO6WA9.js";import"./Close-CNQ53vkO.js";import"./createSvgIcon-6arnPa6T.js";import"./createTheme-BgxtNNjv.js";import"./DefaultPropsProvider-BY_0FA5C.js";import"./HelpPopover-fPnSS5jU.js";import"./MarkdownPopover-DIvSejUS.js";import"./LightTooltip-D_7UarYM.js";import"./Tooltip-CVuQHWBZ.js";import"./index-C8O0EzsL.js";import"./useTheme-gfAm54P6.js";import"./useTheme-9zFXKC6n.js";import"./useSlot-CHgzIXs0.js";import"./useForkRef-B_TXRjop.js";import"./useTimeout-DEPt3vzo.js";import"./useControlled-CILy8dEh.js";import"./getReactElementRef-OY13IImd.js";import"./index-2OM9t87W.js";import"./index-m5koAVBQ.js";import"./Grow-BetBJGpU.js";import"./Popper-Bf2T5vzu.js";import"./ownerDocument-DW-IO8s5.js";import"./isFocusVisible-B8k4qzLc.js";import"./Link-X6fiBXQM.js";import"./createSimplePaletteValueFilter-DEkc7xSs.js";import"./react-rlO6wCGu.js";import"./MarkdownSynapse-Di_SjFv0.js";import"./useQuery-CB35_T_J.js";import"./SkeletonButton-B-iHCEmp.js";import"./Skeleton-CNwnEJ1Y.js";import"./SkeletonInlineBlock-Cc3of4cA.js";import"./SkeletonTable-DDzbpDFR.js";import"./SkeletonParagraph-l_CdCVgh.js";import"./HelpOutlineTwoTone-DjV24VQT.js";import"./Dialog-2sGyQBHL.js";import"./DialogActions-CNcbF7PT.js";import"./Paper-irBPXwWY.js";import"./Fade-DasqS6yT.js";import"./Modal-C5a1qeVx.js";import"./getScrollbarSize-CaCM53D3.js";import"./ownerWindow-HkKU3E4x.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-DKo0mSTX.js";import"./DialogContent-C_j5wp1D.js";import"./DialogTitle-eP5gpMhz.js";import"./IconButton-e0_pjJVh.js";import"./ButtonBase-Ch46_Px2.js";import"./CircularProgress-CFPitjFl.js";import"./CSSTransition-j42vbj7z.js";import"./FileUploadProgress-DPLSJcFg.js";import"./calculateFriendlyFileSize-DLwkHUF4.js";import"./DeleteTwoTone-Biye0TBm.js";import"./CheckCircleTwoTone-B3hZpcoo.js";import"./LinearProgress-DdovUTR8.js";import"./index.esm-BtUrNS5c.js";import"./Menu-DUtXrpdi.js";import"./Popover-Dqhl0DkH.js";import"./isHostComponent-DVu5iVWx.js";import"./debounce-Be36O1Ab.js";import"./mergeSlotProps-KR9D-pQO.js";import"./MenuList-DGifRrc5.js";import"./List-mKZVgOCL.js";import"./MenuItem-CVwl9fP4.js";import"./dividerClasses-5XCQ1n4_.js";import"./events-DQ172AOg.js";import"./index-cYixLpgy.js";import"./index-DzrBzS8J.js";import"./v4-CtRu48qb.js";import"./fetchWithExponentialTimeout-UV9FrpR8.js";import"./Collapse-3grCuIF0.js";import"./_baseUniq-XoRpnQmG.js";import"./_getTag-CXHbED9t.js";import"./isEqual-D0qOQWhk.js";import"./merge-NKPcWwcN.js";import"./_initCloneObject-CmAZK0SY.js";import"./tinycolor-Begke6kS.js";import"./inputBaseClasses-tyR2w6fO.js";import"./InfoTwoTone-C0-NVkTV.js";import"./index-DrWYxZ6u.js";import"./extendSxProp-BdGy26Iu.js";import"./dayjs.min-Bf5GrB6_.js";import"./chunk-AYJ5UCUI-DrWBj7YT.js";import"./cloneDeep-CMYyigHX.js";import"./index-Ff6_4CvW.js";import"./pickBy-QpgaSpbr.js";import"./isString-DzRI81q3.js";import"./_baseIteratee-BKg0bg0R.js";import"./_baseGet-BuNODYrP.js";import"./hasIn-CtvpkfAG.js";import"./pick-ACcbzcAC.js";import"./_baseSet-BoPdVqrH.js";import"./omit-C1HlLwlG.js";import"./_baseSlice-F8doVSIJ.js";import"./useQueries-_kA3lxoY.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-CBPNTKxi.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-CemeGu0l.js";import"./AlertTitle-DIoVMWOY.js";import"./ClickAwayListener-BXFkIWGN.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-Dfm1s_Js.js";import"./SwitchBase-CmqK6kGO.js";import"./useThemeProps-DY0zHm8Z.js";import"./getThemeProps-DFkkYRku.js";import"./Select-BU6O5yDf.js";import"./FormControl-X5Z8ehnz.js";import"./isMuiElement-BOb1kBls.js";import"./InputBase-BYdWncoX.js";import"./Input-DnmM5iw0.js";import"./InputLabel-C_iHeQ23.js";import"./FormLabel-Bdqfbg4n.js";import"./FormHelperText-btNEFxei.js";import"./Close-B2mQaGHe.js";import"./KeyboardArrowRight-DHG9EWhJ.js";function W(n,e){switch(e.type){case"addItemsPendingConfirmation":return{...n,pendingItems:[...n.pendingItems,...e.newItems]};case"confirmItem":{const a=[...n.confirmedItems,...e.itemsToConfirm],r=n.pendingItems.filter(s=>!e.itemsToConfirm.includes(s));return{confirmedItems:a,pendingItems:r}}case"removePendingItems":{const a=n.pendingItems.filter(r=>!e.itemsToRemove.includes(r));return{confirmedItems:n.confirmedItems,pendingItems:a}}case"clear":return{confirmedItems:[],pendingItems:[]};default:return n}}function Re(){const[n,e]=m.useReducer(W,{pendingItems:[],confirmedItems:[]}),a=(...o)=>{e({type:"addItemsPendingConfirmation",newItems:o})},r=(...o)=>(e({type:"confirmItem",itemsToConfirm:o}),W(n,{type:"confirmItem",itemsToConfirm:o})),s=(...o)=>(e({type:"removePendingItems",itemsToRemove:o}),W(n,{type:"removePendingItems",itemsToRemove:o})),l=()=>{e({type:"clear"})};return{pendingItems:n.pendingItems,confirmedItems:n.confirmedItems,addItemsPendingConfirmation:a,confirmItem:r,removePendingItems:s,clear:l}}async function _e(n,e,a,r){var o;const s=((o=await he(()=>a.entityServicesClient.postRepoV1EntityChild({entityLookupRequest:{parentId:e,entityName:n}})))==null?void 0:o.id)??null;if(s==null)return s;const l=await a.entityServicesClient.getRepoV1EntityId({id:s});if(l.concreteType!="org.sagebionetworks.repo.model.FileEntity"){const p=X(l.concreteType);throw new Error(`A(n) ${ae(p)} named "${n}" already exists in this location (${e}).${` ${r}`}`)}return l.id}function Ne(){const{mutateAsync:n}=Z(),e=Fe(),a=xe(),r=Ce();return $({mutationFn:async s=>{const{rootContainerId:l,path:o}=s;let p=l;for(const c of o){const i=await e.fetchQuery(a({parentId:p,entityName:c}));if(i){const u=await e.fetchQuery(r(i));if(u.concreteType!="org.sagebionetworks.repo.model.Folder"){const h=X(u.concreteType);throw new Error(`A(n) ${ae(h)} named "${c}" already exists in this location (${p}). A folder could not be created.`)}p=i}else{const{id:u}=await n({concreteType:"org.sagebionetworks.repo.model.Folder",name:c,parentId:p});p=u}}return p}})}function Pe(){const{mutateAsync:n}=Ne();return $({mutationFn:e=>{const{file:a,rootContainerId:r}=e,s=a.webkitRelativePath;if(s){const l=s.split("/").slice(0,-1);return n({rootContainerId:r,path:l}).then(o=>({file:a,parentId:o}))}else return Promise.resolve({file:a,parentId:r})}})}function Ae(n){const{synapseClient:e}=J(),{mutateAsync:a}=Pe();return $({...n,mutationFn:async r=>{const s=r.filter(d=>"existingEntityId"in d),l=[];for(const d of r)try{if("rootContainerId"in d){const{file:f,rootContainerId:g}=d;l.push(await a({file:f,rootContainerId:g}))}}catch(f){throw new Error(`Unable to create target folder structure for file ${d.file.name}${Object.hasOwn(f,"message")?`: ${f.message}`:null}`,{cause:f})}const o=await Promise.allSettled(l.map(d=>_e(d.file.name,d.parentId,e,"The file could not be uploaded.").then(f=>({...d,existingEntityId:f})))),p=o.filter(d=>d.status==="rejected");if(p.length>0)throw new Error(`Files could not be uploaded:
	${p.map(d=>d.reason.message).join(`
	`)}`);const c=o.filter(d=>d.status==="fulfilled").map(d=>d.value),u=[...c.filter(d=>d.existingEntityId==null),...s],h=c.filter(d=>d.existingEntityId!=null);return{filesReadyForUpload:u,filesToPromptForNewVersion:h}}})}function Oe(n,e,a){if(e==null)return!1;if(e.isOverLimit)return!0;if(e.maxAllowedFileBytes==null)return!1;const r=(e.sumFileBytes??0)+a,s=Array.from(n).reduce((l,o)=>l+o.size,0);return r+s>e.maxAllowedFileBytes}function Ve(n,e="",a="",r=j){const{synapseClient:s}=J(),{mutateAsync:l}=Z(),{mutateAsync:o}=se(),p=m.useCallback(async function(y,x){if("existingEntityId"in y&&y.existingEntityId){const K=await s.entityServicesClient.getRepoV1EntityId({id:y.existingEntityId});await o({...K,dataFileHandleId:x})}else if("parentId"in y){const K={parentId:y.parentId,name:y.file.name,concreteType:"org.sagebionetworks.repo.model.FileEntity",dataFileHandleId:x};await l(K)}else throw new Error(`Can't upload file without a parent ID or existing entity ID. File was: ${JSON.stringify(y)}`)},[l,s.entityServicesClient,o]),{data:c,isLoading:i,error:u}=de(n,{staleTime:1/0}),h=!!(n&&c),d=(c==null?void 0:c.storageLocationId)||B,f=u==null?void 0:u.message,{pendingItems:g,confirmItem:C,addItemsPendingConfirmation:S,removePendingItems:b,clear:U}=Re(),E=m.useCallback(()=>{U()},[U]),{state:F,startUpload:w,activeUploadCount:k,uploadProgress:T,bytesPendingUpload:L}=ue({onBeforeUpload:E,storageLocationId:d,uploadDestination:c,accessKey:e,secretKey:a,onUploadComplete:p}),A=m.useCallback(I=>{const{filesReadyForUpload:y,filesToPromptForNewVersion:x}=I;y.length>0&&x.length==0&&w(...y),x.length>0&&(C(...y),S(...x))},[S,C,w]),{mutateAsync:O,isPending:R}=Ae(),V=m.useCallback(async I=>{if(c==null){console.error("Upload destination was not loaded, or failed to load! Aborting upload.");return}if(Oe(I.map(x=>x.file),c.projectStorageLocationUsage,L)){r();return}const y=await O(I);A(y)},[L,r,A,O,c]),v=m.useMemo(()=>g.map(I=>({info:{type:"CONFIRM_NEW_VERSION",fileName:I.file.name,existingEntityId:I.existingEntityId},onConfirm:()=>{const{confirmedItems:y,pendingItems:x}=C(I);y.length>0&&x.length==0&&w(...y)},onConfirmAll:()=>{const{confirmedItems:y}=C(...g);w(...y)},onSkip:()=>{const{confirmedItems:y,pendingItems:x}=b(I);y.length>0&&x.length==0&&w(...y)},onCancelAll:()=>{U()}})),[U,C,g,b,w]),_=m.useMemo(()=>f?"ERROR":i?"LOADING":v.length>0?"PROMPT_USER":F,[v.length,f,i,F]);return m.useMemo(()=>({state:_,errorMessage:f,isPrecheckingUpload:R,activeUploadCount:k,initiateUpload:V,activePrompts:v,uploadProgress:T,isUploadReady:h}),[_,f,R,k,V,v,T,h])}function Me(n){return n.type==="CONFIRM_NEW_VERSION"?"Update existing file?":""}function De(n){return n.type==="CONFIRM_NEW_VERSION"?`A file named "${n.fileName}" (${n.existingEntityId}) already exists in this location. Do you want to update the existing file and create a new version?`:""}function H(n){const{activePrompts:e}=n,[a,r]=m.useState(!1);if(e.length===0)return null;const s=e.filter(l=>l.info.type==="CONFIRM_NEW_VERSION").length-1;return t.jsx(ie,{title:Me(e[0].info),open:!0,content:t.jsxs(t.Fragment,{children:[t.jsx(P,{variant:"body1",gutterBottom:!0,children:De(e[0].info)}),e[0].info.type=="CONFIRM_NEW_VERSION"&&s>0&&t.jsx(Se,{control:t.jsx(ve,{}),value:a,onChange:(l,o)=>r(o),label:`Also update ${s.toLocaleString()} other uploaded ${be("file",s)} that already exist${s==1?"s":""}`})]}),onCancel:j,hasCloseButton:!1,actions:t.jsxs(t.Fragment,{children:[e[0].onCancelAll&&t.jsx(N,{variant:"text",color:"error",onClick:e[0].onCancelAll,children:"Cancel All Uploads"}),t.jsx(D,{sx:{flexGrow:1}}),e[0].onSkip&&t.jsx(N,{onClick:e[0].onSkip,children:"No"}),e[0].onConfirm&&t.jsx(N,{variant:"contained",color:"primary",onClick:()=>{a?e[0].onConfirmAll():e[0].onConfirm()},children:"Yes"})]})})}try{H.displayName="EntityUploadPromptDialog",H.__docgenInfo={description:"",displayName:"EntityUploadPromptDialog",props:{activePrompts:{defaultValue:null,description:"",name:"activePrompts",required:!0,type:{name:"UseUploadFileEntitiesReturn"}}}}}catch{}function G(n){const{uploadDestination:e,accessKey:a,setAccessKey:r,secretKey:s,setSecretKey:l}=n;return e==null||!Ie(e)||!e.endpointUrl?t.jsx(t.Fragment,{}):t.jsxs(ce,{sx:{gap:1.5,mb:3},children:[t.jsxs(P,{children:["Authorization is required to access"," ",t.jsx("strong",{children:e.endpointUrl})]}),t.jsx(q,{label:"Access Key",fullWidth:!0,value:a,onChange:o=>{r(o.target.value)}}),t.jsx(q,{label:"Secret Key",type:"password",fullWidth:!0,value:s,onChange:o=>{l(o.target.value)}}),t.jsx(P,{variant:"smallText1",sx:{fontStyle:"italic"},children:"Keys are used to locally sign a web request. They are not transmitted or stored by Synapse."})]})}try{G.displayName="ExternalObjectStoreCredentialsForm",G.__docgenInfo={description:"",displayName:"ExternalObjectStoreCredentialsForm",props:{uploadDestination:{defaultValue:null,description:"",name:"uploadDestination",required:!1,type:{name:"UploadDestination"}},accessKey:{defaultValue:null,description:"",name:"accessKey",required:!0,type:{name:"string"}},setAccessKey:{defaultValue:null,description:"",name:"setAccessKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}},secretKey:{defaultValue:null,description:"",name:"secretKey",required:!0,type:{name:"string"}},setSecretKey:{defaultValue:null,description:"",name:"setSecretKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}}}}}catch{}const Q=m.forwardRef(function(e,a){var R;const{entityId:r,onStateChange:s=j,onUploadReady:l=j}=e,{data:o,isLoading:p}=le(r),c=(o==null?void 0:o.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{data:i,isLoading:u}=de(r),h=p||u,[d,f]=m.useState(""),[g,C]=m.useState(""),[S,b]=m.useState(!1),{initiateUpload:U,state:E,uploadProgress:F,activePrompts:w,isPrecheckingUpload:k,isUploadReady:T}=Ve(r,d,g,()=>b(!0));m.useEffect(()=>{s(E)},[E,s]),m.useEffect(()=>{T&&l()},[T,l]);function L(V){var _;if((_=i==null?void 0:i.projectStorageLocationUsage)!=null&&_.isOverLimit){re("Cannot upload files because the storage limit has been exceeded.","danger");return}const v=Array.from(V).map(I=>c?{file:I,existingEntityId:r}:{file:I,rootContainerId:r});U(v)}m.useImperativeHandle(a,()=>({handleUploads:L}));const A=k||h,O=k?"Preparing files for upload...":"Loading...";return t.jsxs("div",{children:[t.jsx(H,{activePrompts:w}),(i==null?void 0:i.projectStorageLocationUsage)&&t.jsx(je,{usage:i.projectStorageLocationUsage,didUploadsExceedLimit:S}),t.jsx(G,{uploadDestination:i,accessKey:d,setAccessKey:f,secretKey:g,setSecretKey:C}),t.jsx(fe,{onUploadFileList:L,allowMultipleFiles:!c,isLoading:A,loadingText:O,disabled:(R=i==null?void 0:i.projectStorageLocationUsage)==null?void 0:R.isOverLimit,message:t.jsxs(t.Fragment,{children:[t.jsxs(P,{variant:"smallText1",children:["All uploaded files will be stored in",(i==null?void 0:i.storageLocationId)===B&&" Synapse storage",i&&(i==null?void 0:i.storageLocationId)!==B&&t.jsxs(t.Fragment,{children:[":",t.jsx("br",{}),Ue(i)]})]}),i&&i.banner&&t.jsx(we,{sx:{textAlign:"left"},isGlobal:!1,title:"Storage Location Message",description:i.banner,variant:"info"})]})}),t.jsx(ye,{uploaderState:E,uploadProgress:F})]})});try{Q.displayName="EntityUpload",Q.__docgenInfo={description:"",displayName:"EntityUpload",props:{entityId:{defaultValue:null,description:`The ID of the entity to upload to. If this is a container, file(s) will be added as children. If this is a
FileEntity, then a file may be uploaded as a new version`,name:"entityId",required:!0,type:{name:"string"}},onStateChange:{defaultValue:null,description:"Callback that is invoked when the state of the uploader changes",name:"onStateChange",required:!1,type:{name:"(state: EntityUploaderState) => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}function qe(n){let e="";if(n!=null){const a=n.lastIndexOf("/");if(a>-1){const r=n.indexOf("?",a);r>-1?e=n.substring(a+1,r):e=n.substring(a+1)}}return e}function $e(n){const{synapseClient:e}=J(),{mutateAsync:a}=ge(),{mutateAsync:r}=Z(),{mutateAsync:s}=se();return $({...n,mutationFn:async l=>{const{url:o,entityId:p}=l;let c=l.name;(c==""||c==null)&&(c=qe(o));const i=await e.entityServicesClient.getRepoV1EntityId({id:p});let u;if(i.concreteType==="org.sagebionetworks.repo.model.FileEntity")u=!0;else if(Ee(X(i.concreteType)))u=!1;else throw new Error(`The ${p} is not a FileEntity or a container, got concreteType ${i.concreteType}`);const h=await a({externalFileHandleInterface:{concreteType:"org.sagebionetworks.repo.model.file.ExternalFileHandle",fileName:c,externalURL:o}});if(u){const d={...i,dataFileHandleId:h.id};return await s(d)}else{const d={name:c,concreteType:"org.sagebionetworks.repo.model.FileEntity",parentId:p,dataFileHandleId:h.id};return await r(d)}}})}const z=m.forwardRef(function(e,a){const{entityId:r,onIsValidChanged:s=j,onSuccess:l=j}=e,[o,p]=m.useState(""),[c,i]=m.useState(""),{data:u}=le(r),h=(u==null?void 0:u.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{mutate:d,error:f}=$e({onSuccess:l});return m.useEffect(()=>{const g=o.trim().length>0;s(g)},[o,s]),m.useImperativeHandle(a,()=>({submit:()=>{d({url:o.trim(),name:c.trim(),entityId:r})}})),u?t.jsxs(ce,{sx:{gap:2},children:[t.jsx(P,{variant:"body1",children:"Provide a URL to create a link to a file that is located in external storage or hosted on the web. Metadata, provenance, and annotations related to the file can be stored in Synapse, but the file data itself can only be accessed using the link."}),t.jsx(q,{label:"URL",required:!0,fullWidth:!0,value:o,onChange:g=>p(g.target.value)}),!h&&t.jsx(q,{label:"Name",fullWidth:!0,value:c,onChange:g=>i(g.target.value)}),f&&t.jsx(Te,{severity:"error",sx:{my:2},children:(f==null?void 0:f.message)??"An error occurred while attempting to create the link."})]}):t.jsx(D,{sx:{display:"flex",justifyContent:"center"},children:t.jsx(ke,{size:40})})});try{z.displayName="LinkToURL",z.__docgenInfo={description:"",displayName:"LinkToURL",props:{entityId:{defaultValue:null,description:"The ID of the FileEntity that should be updated, or container entity in which a new FileEntity should be created.",name:"entityId",required:!0,type:{name:"string"}},onIsValidChanged:{defaultValue:null,description:"Invoked when the validity of the form changes (e.g. to disable/activate a submit button)",name:"onIsValidChanged",required:!1,type:{name:"(isValid: boolean) => void"}},onSuccess:{defaultValue:null,description:"Invoked when the call to create or update the entity succeeds.",name:"onSuccess",required:!1,type:{name:"(newOrUpdatedEntity: FileEntity) => void"}}}}}catch{}const Y=m.forwardRef(function(e,a){const{entityId:r,open:s,onClose:l,onUploadReady:o}=e,[p,c]=m.useState(0),[i,u]=m.useState("LOADING"),[h,d]=m.useState(!1),f=m.useRef(null),g=m.useRef(null),C=i==="PROMPT_USER"||i==="UPLOADING",S=C||i==="COMPLETE",b=p===0?i!=="COMPLETE":!h;function U(){b||(p===0?l():f.current.submit())}return m.useImperativeHandle(a,()=>({handleUploads:E=>{var F;c(0),(F=g.current)==null||F.handleUploads(E)}})),t.jsx(ie,{DialogProps:{onKeyUp:E=>{E.key==="Enter"&&U()},keepMounted:!0},title:"Upload or Link to File",open:s,maxWidth:"md",fullWidth:!0,content:t.jsxs(t.Fragment,{children:[t.jsxs(Le,{textColor:"secondary",indicatorColor:"secondary",value:p,onChange:(E,F)=>c(F),sx:{mb:2},children:[t.jsx(ee,{label:"Upload File",value:0}),t.jsx(ee,{label:"Link to URL",value:1})]}),t.jsx(D,{sx:{display:p===0?"block":"none"},children:t.jsx(Q,{ref:g,entityId:r,onStateChange:u,onUploadReady:o})}),t.jsx(D,{sx:{display:p===1?"block":"none"},children:t.jsx(z,{ref:f,entityId:r,onIsValidChanged:d,onSuccess:E=>{re(`Successfully created "${E.name}"`,"success"),l()}})})]}),onCancel:()=>{C||l()},hasCloseButton:!C,actions:t.jsxs(t.Fragment,{children:[t.jsx(N,{variant:"outlined",onClick:()=>{l()},disabled:S,children:"Cancel"}),t.jsx(N,{variant:"contained",onClick:U,disabled:b,children:"Finish"})]})})});try{Y.displayName="EntityUploadModal",Y.__docgenInfo={description:"",displayName:"EntityUploadModal",props:{entityId:{defaultValue:null,description:"",name:"entityId",required:!0,type:{name:"string"}},open:{defaultValue:null,description:"",name:"open",required:!0,type:{name:"boolean"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}const Do={title:"Synapse/Upload/EntityUploadModal",component:Y,args:{open:!0,onClose:pe()}},M={args:{entityId:me.entity.id},parameters:{stack:"mock"}};var te,ne,oe;M.parameters={...M.parameters,docs:{...(te=M.parameters)==null?void 0:te.docs,source:{originalSource:`{
  args: {
    entityId: mockProjectEntityData.entity.id
  },
  parameters: {
    stack: 'mock'
  }
}`,...(oe=(ne=M.parameters)==null?void 0:ne.docs)==null?void 0:oe.source}}};const qo=["Demo"];export{M as Demo,qo as __namedExportsOrder,Do as default};
