import{m as me}from"./mockProject-gZnzi-Kz.js";import{f as pe}from"./index-BqBIRtzc.js";import{j as t}from"./jsx-runtime-D_zvdyIk.js";import{r as m}from"./index-B3YonXtA.js";import{D as ie}from"./DialogBase-BJGON8gg.js";import{d as re}from"./ToastMessage-DAq5xRO7.js";import{u as ue,U as fe,M as ye,a as ge}from"./useUploadFiles-DoJRqdEz.js";import{ao as he,l as J,N as B,bH as Ie}from"./useFiles-nz_G27ZD.js";import"./VerificationSubmission-BDh1zA9f.js";import{c as X,e as ae,r as Ee}from"./StringUtils-C95LMFI-.js";import"./OrientationBanner-CPj0PuP9.js";import{q as Z,t as xe,v as Ce,a as se,u as le}from"./useEntity-CghbwQOF.js";import{a as de,b as Ue}from"./FileHandleUtils-C2feLdkl.js";import{u as $}from"./useMutation-DYD3J3xj.js";import{u as Fe}from"./QueryClientProvider-BRz6sphI.js";import{n as j}from"./noop-DX6rZLP_.js";import{F as we}from"./FullWidthAlert-BAt_LGWT.js";import{p as be}from"./pluralize-CFN-qWce.js";import{B as N}from"./Button-Ch1wz1oD.js";import{B as q}from"./Box-PoNijjGW.js";import{T as P}from"./Typography-BlpiGXay.js";import{F as Se}from"./FormControlLabel-D4uN4M9v.js";import{C as ve}from"./Checkbox-DT5lO6Ct.js";import{S as ce}from"./Stack-Cij852nX.js";import{T as D}from"./TextField-BjGmB0p6.js";import{P as je}from"./ProjectStorageLimitAlert-CVzoEzFQ.js";import{S as ke}from"./LoadingScreen-B-udeDjp.js";import{A as Te}from"./Alert-DxUMyYvX.js";import{T as Le,a as ee}from"./Tabs-CjjouxSW.js";import"./mockTeam-Dd9xWFzl.js";import"./SynapseConstants-QIqdlNPs.js";import"./mock_user_profile-Bg50HGfI.js";import"./uniqueId-DmupjK_F.js";import"./toString-DgG0SSWT.js";import"./isArray-D7cLY-Ue.js";import"./iframe-BZuF5Rk5.js";import"./isSymbol-CpU8lUWz.js";import"./times-Bjyl5IyC.js";import"./_Uint8Array-szfHHksL.js";import"./identity-DKeuBCMA.js";import"./toInteger-DRY3A2Wi.js";import"./spreadSx-CwcO6WA9.js";import"./Close-BTm2kQVt.js";import"./createSvgIcon-Bs0uwjDd.js";import"./createTheme-BJKfy1iC.js";import"./DefaultPropsProvider-DuSIaWNU.js";import"./HelpPopover-B9ISk2As.js";import"./MarkdownPopover-DKTRXW49.js";import"./LightTooltip-DL5JsW9k.js";import"./Tooltip-BStWPht6.js";import"./index-BvINnhAG.js";import"./useTheme-Bb3tF0fY.js";import"./useTheme-BqUAtbKs.js";import"./useSlot-BXLighSu.js";import"./useForkRef-BtqTZArO.js";import"./useTimeout-N1XqQ7Tv.js";import"./useControlled-C_6BPMUf.js";import"./getReactElementRef-uQKecpNl.js";import"./index-B7I8xQtn.js";import"./index-Dmzd7xWV.js";import"./Grow-BGI5WGEZ.js";import"./Popper-BfvQl467.js";import"./ownerDocument-DW-IO8s5.js";import"./isFocusVisible-B8k4qzLc.js";import"./Link-Bpl0ygdi.js";import"./createSimplePaletteValueFilter-CxzoQfv0.js";import"./react-BuDUhSyG.js";import"./MarkdownSynapse-BF7WHtTr.js";import"./useQuery-BsSbosha.js";import"./SkeletonButton-CMtka5Ag.js";import"./Skeleton-ClHaAhyN.js";import"./SkeletonInlineBlock-CzXc2U9L.js";import"./SkeletonTable-C68Wlp19.js";import"./SkeletonParagraph-BSkKGl-r.js";import"./HelpOutlineTwoTone-DwNIvFIH.js";import"./Dialog-CcrtATZ0.js";import"./DialogActions-DeRITaB_.js";import"./Paper-DqrrvOAH.js";import"./Fade-hXWdH60e.js";import"./Modal-CRhSq1y2.js";import"./getScrollbarSize-CaCM53D3.js";import"./ownerWindow-HkKU3E4x.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-DYvnx2NP.js";import"./DialogContent-BvKoxfl1.js";import"./DialogTitle-D9ICljLE.js";import"./IconButton-DnWxZwUa.js";import"./ButtonBase-B7_bMh0J.js";import"./CircularProgress-Ce4Ta4eA.js";import"./CSSTransition-CJceyd-6.js";import"./FileUploadProgress-BjKfz2ET.js";import"./calculateFriendlyFileSize-D7pBFWpU.js";import"./DeleteTwoTone-CA6Grdob.js";import"./CheckCircleTwoTone-DGwA4b8a.js";import"./LinearProgress-BsHkNozY.js";import"./index.esm-DOkeoZh1.js";import"./Menu-D1h4Ry4T.js";import"./Popover-zlDUTloe.js";import"./isHostComponent-DVu5iVWx.js";import"./debounce-Be36O1Ab.js";import"./mergeSlotProps-puiMfLej.js";import"./MenuList-BsUQChR2.js";import"./List-1BIniGzx.js";import"./MenuItem-Bs6gLU7K.js";import"./dividerClasses-vo1Ddi-j.js";import"./events-DQ172AOg.js";import"./index-pGPALZt1.js";import"./index--7E75rPn.js";import"./v4-CtRu48qb.js";import"./fetchWithExponentialTimeout-UV9FrpR8.js";import"./Collapse-COA2sox0.js";import"./_baseUniq-BuOmYGlr.js";import"./_getTag-BZgbHbgT.js";import"./isEqual-BQl5jUFq.js";import"./merge-BLtkJLx6.js";import"./_initCloneObject-IL6c6Kxn.js";import"./tinycolor-Begke6kS.js";import"./inputBaseClasses-CTMFoWXf.js";import"./InfoTwoTone-LXUWHOi0.js";import"./index-SV-CQluw.js";import"./extendSxProp-D1NEKyNb.js";import"./dayjs.min-CGFBeRSw.js";import"./chunk-AYJ5UCUI-BiQJU0O1.js";import"./cloneDeep-BGmY4GVF.js";import"./index-BMYyeuyr.js";import"./pickBy-B2F2mtOz.js";import"./isString-Bo6zkfhJ.js";import"./_baseIteratee-EKCKrW6E.js";import"./_baseGet-DZ4Atsmp.js";import"./hasIn-6DDlZSRD.js";import"./pick-CaUqFjJy.js";import"./_baseSet-BwM3Nedy.js";import"./omit-BXAIxlag.js";import"./_baseSlice-F8doVSIJ.js";import"./useQueries-Czrs24Q1.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-DmMWbB2K.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-D-5dpys1.js";import"./AlertTitle-rtt8k-JU.js";import"./ClickAwayListener-CPlRAx9Y.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-Crh_wsVT.js";import"./SwitchBase-BT0QcpG4.js";import"./useThemeProps-CnowrksF.js";import"./getThemeProps-B0O8BOmA.js";import"./Select-BhMCcQ1Y.js";import"./FormControl-EJimVvN1.js";import"./isMuiElement-DqgSfaHL.js";import"./InputBase-JHo58_6H.js";import"./Input-BI_MNOFX.js";import"./InputLabel-Cn4J0uX9.js";import"./FormLabel-DAZA1HqF.js";import"./FormHelperText-Djb_6oz7.js";import"./Close-Cpf8yWN0.js";import"./KeyboardArrowRight-CLKyRi6w.js";function W(n,e){switch(e.type){case"addItemsPendingConfirmation":return{...n,pendingItems:[...n.pendingItems,...e.newItems]};case"confirmItem":{const a=[...n.confirmedItems,...e.itemsToConfirm],r=n.pendingItems.filter(s=>!e.itemsToConfirm.includes(s));return{confirmedItems:a,pendingItems:r}}case"removePendingItems":{const a=n.pendingItems.filter(r=>!e.itemsToRemove.includes(r));return{confirmedItems:n.confirmedItems,pendingItems:a}}case"clear":return{confirmedItems:[],pendingItems:[]};default:return n}}function Re(){const[n,e]=m.useReducer(W,{pendingItems:[],confirmedItems:[]}),a=(...o)=>{e({type:"addItemsPendingConfirmation",newItems:o})},r=(...o)=>(e({type:"confirmItem",itemsToConfirm:o}),W(n,{type:"confirmItem",itemsToConfirm:o})),s=(...o)=>(e({type:"removePendingItems",itemsToRemove:o}),W(n,{type:"removePendingItems",itemsToRemove:o})),l=()=>{e({type:"clear"})};return{pendingItems:n.pendingItems,confirmedItems:n.confirmedItems,addItemsPendingConfirmation:a,confirmItem:r,removePendingItems:s,clear:l}}async function _e(n,e,a,r){var o;const s=((o=await he(()=>a.entityServicesClient.postRepoV1EntityChild({entityLookupRequest:{parentId:e,entityName:n}})))==null?void 0:o.id)??null;if(s==null)return s;const l=await a.entityServicesClient.getRepoV1EntityId({id:s});if(l.concreteType!="org.sagebionetworks.repo.model.FileEntity"){const p=X(l.concreteType);throw new Error(`A(n) ${ae(p)} named "${n}" already exists in this location (${e}).${` ${r}`}`)}return l.id}function Ne(){const{mutateAsync:n}=Z(),e=Fe(),a=xe(),r=Ce();return $({mutationFn:async s=>{const{rootContainerId:l,path:o}=s;let p=l;for(const c of o){const i=await e.fetchQuery(a({parentId:p,entityName:c}));if(i){const u=await e.fetchQuery(r(i));if(u.concreteType!="org.sagebionetworks.repo.model.Folder"){const h=X(u.concreteType);throw new Error(`A(n) ${ae(h)} named "${c}" already exists in this location (${p}). A folder could not be created.`)}p=i}else{const{id:u}=await n({concreteType:"org.sagebionetworks.repo.model.Folder",name:c,parentId:p});p=u}}return p}})}function Pe(){const{mutateAsync:n}=Ne();return $({mutationFn:e=>{const{file:a,rootContainerId:r}=e,s=a.webkitRelativePath;if(s){const l=s.split("/").slice(0,-1);return n({rootContainerId:r,path:l}).then(o=>({file:a,parentId:o}))}else return Promise.resolve({file:a,parentId:r})}})}function Ae(n){const{synapseClient:e}=J(),{mutateAsync:a}=Pe();return $({...n,mutationFn:async r=>{const s=r.filter(d=>"existingEntityId"in d),l=[];for(const d of r)try{if("rootContainerId"in d){const{file:f,rootContainerId:g}=d;l.push(await a({file:f,rootContainerId:g}))}}catch(f){throw new Error(`Unable to create target folder structure for file ${d.file.name}${Object.hasOwn(f,"message")?`: ${f.message}`:null}`,{cause:f})}const o=await Promise.allSettled(l.map(d=>_e(d.file.name,d.parentId,e,"The file could not be uploaded.").then(f=>({...d,existingEntityId:f})))),p=o.filter(d=>d.status==="rejected");if(p.length>0)throw new Error(`Files could not be uploaded:
	${p.map(d=>d.reason.message).join(`
	`)}`);const c=o.filter(d=>d.status==="fulfilled").map(d=>d.value),u=[...c.filter(d=>d.existingEntityId==null),...s],h=c.filter(d=>d.existingEntityId!=null);return{filesReadyForUpload:u,filesToPromptForNewVersion:h}}})}function Oe(n,e,a){if(e==null)return!1;if(e.isOverLimit)return!0;if(e.maxAllowedFileBytes==null)return!1;const r=(e.sumFileBytes??0)+a,s=Array.from(n).reduce((l,o)=>l+o.size,0);return r+s>e.maxAllowedFileBytes}function Ve(n,e="",a="",r=j){const{synapseClient:s}=J(),{mutateAsync:l}=Z(),{mutateAsync:o}=se(),p=m.useCallback(async function(y,x){if("existingEntityId"in y&&y.existingEntityId){const K=await s.entityServicesClient.getRepoV1EntityId({id:y.existingEntityId});await o({...K,dataFileHandleId:x})}else if("parentId"in y){const K={parentId:y.parentId,name:y.file.name,concreteType:"org.sagebionetworks.repo.model.FileEntity",dataFileHandleId:x};await l(K)}else throw new Error(`Can't upload file without a parent ID or existing entity ID. File was: ${JSON.stringify(y)}`)},[l,s.entityServicesClient,o]),{data:c,isLoading:i,error:u}=de(n,{staleTime:1/0}),h=!!(n&&c),d=(c==null?void 0:c.storageLocationId)||B,f=u==null?void 0:u.message,{pendingItems:g,confirmItem:C,addItemsPendingConfirmation:S,removePendingItems:b,clear:U}=Re(),E=m.useCallback(()=>{U()},[U]),{state:F,startUpload:w,activeUploadCount:k,uploadProgress:T,bytesPendingUpload:L}=ue({onBeforeUpload:E,storageLocationId:d,uploadDestination:c,accessKey:e,secretKey:a,onUploadComplete:p}),A=m.useCallback(I=>{const{filesReadyForUpload:y,filesToPromptForNewVersion:x}=I;y.length>0&&x.length==0&&w(...y),x.length>0&&(C(...y),S(...x))},[S,C,w]),{mutateAsync:O,isPending:R}=Ae(),V=m.useCallback(async I=>{if(c==null){console.error("Upload destination was not loaded, or failed to load! Aborting upload.");return}if(Oe(I.map(x=>x.file),c.projectStorageLocationUsage,L)){r();return}const y=await O(I);A(y)},[L,r,A,O,c]),v=m.useMemo(()=>g.map(I=>({info:{type:"CONFIRM_NEW_VERSION",fileName:I.file.name,existingEntityId:I.existingEntityId},onConfirm:()=>{const{confirmedItems:y,pendingItems:x}=C(I);y.length>0&&x.length==0&&w(...y)},onConfirmAll:()=>{const{confirmedItems:y}=C(...g);w(...y)},onSkip:()=>{const{confirmedItems:y,pendingItems:x}=b(I);y.length>0&&x.length==0&&w(...y)},onCancelAll:()=>{U()}})),[U,C,g,b,w]),_=m.useMemo(()=>f?"ERROR":i?"LOADING":v.length>0?"PROMPT_USER":F,[v.length,f,i,F]);return m.useMemo(()=>({state:_,errorMessage:f,isPrecheckingUpload:R,activeUploadCount:k,initiateUpload:V,activePrompts:v,uploadProgress:T,isUploadReady:h}),[_,f,R,k,V,v,T,h])}function Me(n){return n.type==="CONFIRM_NEW_VERSION"?"Update existing file?":""}function qe(n){return n.type==="CONFIRM_NEW_VERSION"?`A file named "${n.fileName}" (${n.existingEntityId}) already exists in this location. Do you want to update the existing file and create a new version?`:""}function H(n){const{activePrompts:e}=n,[a,r]=m.useState(!1);if(e.length===0)return null;const s=e.filter(l=>l.info.type==="CONFIRM_NEW_VERSION").length-1;return t.jsx(ie,{title:Me(e[0].info),open:!0,content:t.jsxs(t.Fragment,{children:[t.jsx(P,{variant:"body1",gutterBottom:!0,children:qe(e[0].info)}),e[0].info.type=="CONFIRM_NEW_VERSION"&&s>0&&t.jsx(Se,{control:t.jsx(ve,{}),value:a,onChange:(l,o)=>r(o),label:`Also update ${s.toLocaleString()} other uploaded ${be("file",s)} that already exist${s==1?"s":""}`})]}),onCancel:j,hasCloseButton:!1,actions:t.jsxs(t.Fragment,{children:[e[0].onCancelAll&&t.jsx(N,{variant:"text",color:"error",onClick:e[0].onCancelAll,children:"Cancel All Uploads"}),t.jsx(q,{sx:{flexGrow:1}}),e[0].onSkip&&t.jsx(N,{onClick:e[0].onSkip,children:"No"}),e[0].onConfirm&&t.jsx(N,{variant:"contained",color:"primary",onClick:()=>{a?e[0].onConfirmAll():e[0].onConfirm()},children:"Yes"})]})})}try{H.displayName="EntityUploadPromptDialog",H.__docgenInfo={description:"",displayName:"EntityUploadPromptDialog",props:{activePrompts:{defaultValue:null,description:"",name:"activePrompts",required:!0,type:{name:"UseUploadFileEntitiesReturn"}}}}}catch{}function G(n){const{uploadDestination:e,accessKey:a,setAccessKey:r,secretKey:s,setSecretKey:l}=n;return e==null||!Ie(e)||!e.endpointUrl?t.jsx(t.Fragment,{}):t.jsxs(ce,{sx:{gap:1.5,mb:3},children:[t.jsxs(P,{children:["Authorization is required to access"," ",t.jsx("strong",{children:e.endpointUrl})]}),t.jsx(D,{label:"Access Key",fullWidth:!0,value:a,onChange:o=>{r(o.target.value)}}),t.jsx(D,{label:"Secret Key",type:"password",fullWidth:!0,value:s,onChange:o=>{l(o.target.value)}}),t.jsx(P,{variant:"smallText1",sx:{fontStyle:"italic"},children:"Keys are used to locally sign a web request. They are not transmitted or stored by Synapse."})]})}try{G.displayName="ExternalObjectStoreCredentialsForm",G.__docgenInfo={description:"",displayName:"ExternalObjectStoreCredentialsForm",props:{uploadDestination:{defaultValue:null,description:"",name:"uploadDestination",required:!1,type:{name:"UploadDestination"}},accessKey:{defaultValue:null,description:"",name:"accessKey",required:!0,type:{name:"string"}},setAccessKey:{defaultValue:null,description:"",name:"setAccessKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}},secretKey:{defaultValue:null,description:"",name:"secretKey",required:!0,type:{name:"string"}},setSecretKey:{defaultValue:null,description:"",name:"setSecretKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}}}}}catch{}const Q=m.forwardRef(function(e,a){var R;const{entityId:r,onStateChange:s=j,onUploadReady:l=j}=e,{data:o,isLoading:p}=le(r),c=(o==null?void 0:o.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{data:i,isLoading:u}=de(r),h=p||u,[d,f]=m.useState(""),[g,C]=m.useState(""),[S,b]=m.useState(!1),{initiateUpload:U,state:E,uploadProgress:F,activePrompts:w,isPrecheckingUpload:k,isUploadReady:T}=Ve(r,d,g,()=>b(!0));m.useEffect(()=>{s(E)},[E,s]),m.useEffect(()=>{T&&l()},[T,l]);function L(V){var _;if((_=i==null?void 0:i.projectStorageLocationUsage)!=null&&_.isOverLimit){re("Cannot upload files because the storage limit has been exceeded.","danger");return}const v=Array.from(V).map(I=>c?{file:I,existingEntityId:r}:{file:I,rootContainerId:r});U(v)}m.useImperativeHandle(a,()=>({handleUploads:L}));const A=k||h,O=k?"Preparing files for upload...":"Loading...";return t.jsxs("div",{children:[t.jsx(H,{activePrompts:w}),(i==null?void 0:i.projectStorageLocationUsage)&&t.jsx(je,{usage:i.projectStorageLocationUsage,didUploadsExceedLimit:S}),t.jsx(G,{uploadDestination:i,accessKey:d,setAccessKey:f,secretKey:g,setSecretKey:C}),t.jsx(fe,{onUploadFileList:L,allowMultipleFiles:!c,isLoading:A,loadingText:O,disabled:(R=i==null?void 0:i.projectStorageLocationUsage)==null?void 0:R.isOverLimit,message:t.jsxs(t.Fragment,{children:[t.jsxs(P,{variant:"smallText1",children:["All uploaded files will be stored in",(i==null?void 0:i.storageLocationId)===B&&" Synapse storage",i&&(i==null?void 0:i.storageLocationId)!==B&&t.jsxs(t.Fragment,{children:[":",t.jsx("br",{}),Ue(i)]})]}),i&&i.banner&&t.jsx(we,{sx:{textAlign:"left"},isGlobal:!1,title:"Storage Location Message",description:i.banner,variant:"info"})]})}),t.jsx(ye,{uploaderState:E,uploadProgress:F})]})});try{Q.displayName="EntityUpload",Q.__docgenInfo={description:"",displayName:"EntityUpload",props:{entityId:{defaultValue:null,description:`The ID of the entity to upload to. If this is a container, file(s) will be added as children. If this is a
FileEntity, then a file may be uploaded as a new version`,name:"entityId",required:!0,type:{name:"string"}},onStateChange:{defaultValue:null,description:"Callback that is invoked when the state of the uploader changes",name:"onStateChange",required:!1,type:{name:"(state: EntityUploaderState) => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}function De(n){let e="";if(n!=null){const a=n.lastIndexOf("/");if(a>-1){const r=n.indexOf("?",a);r>-1?e=n.substring(a+1,r):e=n.substring(a+1)}}return e}function $e(n){const{synapseClient:e}=J(),{mutateAsync:a}=ge(),{mutateAsync:r}=Z(),{mutateAsync:s}=se();return $({...n,mutationFn:async l=>{const{url:o,entityId:p}=l;let c=l.name;(c==""||c==null)&&(c=De(o));const i=await e.entityServicesClient.getRepoV1EntityId({id:p});let u;if(i.concreteType==="org.sagebionetworks.repo.model.FileEntity")u=!0;else if(Ee(X(i.concreteType)))u=!1;else throw new Error(`The ${p} is not a FileEntity or a container, got concreteType ${i.concreteType}`);const h=await a({externalFileHandleInterface:{concreteType:"org.sagebionetworks.repo.model.file.ExternalFileHandle",fileName:c,externalURL:o}});if(u){const d={...i,dataFileHandleId:h.id};return await s(d)}else{const d={name:c,concreteType:"org.sagebionetworks.repo.model.FileEntity",parentId:p,dataFileHandleId:h.id};return await r(d)}}})}const z=m.forwardRef(function(e,a){const{entityId:r,onIsValidChanged:s=j,onSuccess:l=j}=e,[o,p]=m.useState(""),[c,i]=m.useState(""),{data:u}=le(r),h=(u==null?void 0:u.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{mutate:d,error:f}=$e({onSuccess:l});return m.useEffect(()=>{const g=o.trim().length>0;s(g)},[o,s]),m.useImperativeHandle(a,()=>({submit:()=>{d({url:o.trim(),name:c.trim(),entityId:r})}})),u?t.jsxs(ce,{sx:{gap:2},children:[t.jsx(P,{variant:"body1",children:"Provide a URL to create a link to a file that is located in external storage or hosted on the web. Metadata, provenance, and annotations related to the file can be stored in Synapse, but the file data itself can only be accessed using the link."}),t.jsx(D,{label:"URL",required:!0,fullWidth:!0,value:o,onChange:g=>p(g.target.value)}),!h&&t.jsx(D,{label:"Name",fullWidth:!0,value:c,onChange:g=>i(g.target.value)}),f&&t.jsx(Te,{severity:"error",sx:{my:2},children:(f==null?void 0:f.message)??"An error occurred while attempting to create the link."})]}):t.jsx(q,{sx:{display:"flex",justifyContent:"center"},children:t.jsx(ke,{size:40})})});try{z.displayName="LinkToURL",z.__docgenInfo={description:"",displayName:"LinkToURL",props:{entityId:{defaultValue:null,description:"The ID of the FileEntity that should be updated, or container entity in which a new FileEntity should be created.",name:"entityId",required:!0,type:{name:"string"}},onIsValidChanged:{defaultValue:null,description:"Invoked when the validity of the form changes (e.g. to disable/activate a submit button)",name:"onIsValidChanged",required:!1,type:{name:"(isValid: boolean) => void"}},onSuccess:{defaultValue:null,description:"Invoked when the call to create or update the entity succeeds.",name:"onSuccess",required:!1,type:{name:"(newOrUpdatedEntity: FileEntity) => void"}}}}}catch{}const Y=m.forwardRef(function(e,a){const{entityId:r,open:s,onClose:l,onUploadReady:o}=e,[p,c]=m.useState(0),[i,u]=m.useState("LOADING"),[h,d]=m.useState(!1),f=m.useRef(null),g=m.useRef(null),C=i==="PROMPT_USER"||i==="UPLOADING",S=C||i==="COMPLETE",b=p===0?i!=="COMPLETE":!h;function U(){b||(p===0?l():f.current.submit())}return m.useImperativeHandle(a,()=>({handleUploads:E=>{var F;c(0),(F=g.current)==null||F.handleUploads(E)}})),t.jsx(ie,{DialogProps:{onKeyUp:E=>{E.key==="Enter"&&U()},keepMounted:!0},title:"Upload or Link to File",open:s,maxWidth:"md",fullWidth:!0,content:t.jsxs(t.Fragment,{children:[t.jsxs(Le,{textColor:"secondary",indicatorColor:"secondary",value:p,onChange:(E,F)=>c(F),sx:{mb:2},children:[t.jsx(ee,{label:"Upload File",value:0}),t.jsx(ee,{label:"Link to URL",value:1})]}),t.jsx(q,{sx:{display:p===0?"block":"none"},children:t.jsx(Q,{ref:g,entityId:r,onStateChange:u,onUploadReady:o})}),t.jsx(q,{sx:{display:p===1?"block":"none"},children:t.jsx(z,{ref:f,entityId:r,onIsValidChanged:d,onSuccess:E=>{re(`Successfully created "${E.name}"`,"success"),l()}})})]}),onCancel:()=>{C||l()},hasCloseButton:!C,actions:t.jsxs(t.Fragment,{children:[t.jsx(N,{variant:"outlined",onClick:()=>{l()},disabled:S,children:"Cancel"}),t.jsx(N,{variant:"contained",onClick:U,disabled:b,children:"Finish"})]})})});try{Y.displayName="EntityUploadModal",Y.__docgenInfo={description:"",displayName:"EntityUploadModal",props:{entityId:{defaultValue:null,description:"",name:"entityId",required:!0,type:{name:"string"}},open:{defaultValue:null,description:"",name:"open",required:!0,type:{name:"boolean"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}const qo={title:"Synapse/Upload/EntityUploadModal",component:Y,args:{open:!0,onClose:pe()}},M={args:{entityId:me.entity.id},parameters:{stack:"mock"}};var te,ne,oe;M.parameters={...M.parameters,docs:{...(te=M.parameters)==null?void 0:te.docs,source:{originalSource:`{
  args: {
    entityId: mockProjectEntityData.entity.id
  },
  parameters: {
    stack: 'mock'
  }
}`,...(oe=(ne=M.parameters)==null?void 0:ne.docs)==null?void 0:oe.source}}};const Do=["Demo"];export{M as Demo,Do as __namedExportsOrder,qo as default};
