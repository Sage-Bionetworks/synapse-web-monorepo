import{v as o}from"./VerificationSubmission-CDh9xETu.js";import{g as u,be as d,bf as l,B as f,bg as S,M as O}from"./useFiles-GM08LsrG.js";import"./StringUtils-CsrYFBZo.js";import{h as i,H as n}from"./index-C81eqmbn.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-C0I0GBGp.js";import"./SynapseConstants-CQGbYJZY.js";import"./OrientationBanner-D9LH13fs.js";import"./index-CJBSyepz.js";import"./index-Dv-Auh_6.js";import"./iframe-C98LgnIh.js";import"./spreadSx-CwcO6WA9.js";import"./react-CYEz1WY0.js";import"./FullWidthAlert-BQo4TeQt.js";import"./Alert-f48QNb2h.js";import"./createTheme-CmQ7L9FI.js";import"./DefaultPropsProvider-D7UrraQT.js";import"./useSlot-D-57qVPr.js";import"./useForkRef-aUOfydcE.js";import"./createSimplePaletteValueFilter-MBB8wY7q.js";import"./createSvgIcon-BLEghBNK.js";import"./Close-BYXn6ehd.js";import"./IconButton-CFgYDnd0.js";import"./useTimeout-CrbDv4W6.js";import"./ButtonBase-A9zHO6bs.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-rsYMJ3_V.js";import"./Paper-Dt5MOLDV.js";import"./useTheme-BRwJ2BiM.js";import"./useTheme-B0hF4srd.js";import"./Stack-BrVSW58k.js";import"./extendSxProp-DgwqkoGF.js";import"./getThemeProps-CzMOA3dK.js";import"./Box-CuUhZXQS.js";import"./AlertTitle-DjtviQhk.js";import"./Typography-CVtis2FJ.js";import"./index-CCjom-eT.js";import"./ClickAwayListener-BscEfLN0.js";import"./getReactElementRef-DaUzJele.js";import"./index-0Ntr3xje.js";import"./index-DH8ZwtL1.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-BI3-bs-0.js";import"./Tooltip-BRjr85jo.js";import"./index-DQyNv6H4.js";import"./useControlled-BPUCCY57.js";import"./Popper-CXdg4K-k.js";import"./Button-HugWKABJ.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-BnV8m8MS.js";import"./QueryClientProvider-C8vVXgYp.js";import"./Link-CrDU1RWE.js";import"./Collapse-B_GDzTTw.js";import"./_baseUniq-CqX7G2j0.js";import"./_Uint8Array-B1GgWYrH.js";import"./isArray-CjLdZUWa.js";import"./_getTag-o-5Eopw1.js";import"./isEqual-nclDIja9.js";import"./merge-BX7tbRVV.js";import"./_initCloneObject-iMbuWMMe.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-C0IATwVZ.js";import"./inputBaseClasses-CROUrq90.js";import"./calculateFriendlyFileSize-0imf3u_G.js";import"./CheckCircleTwoTone--JEdlD7D.js";import"./InfoTwoTone-BVVUUJao.js";import"./useMutation-DuSiyCX7.js";import"./dayjs.min-Bo9-7NDX.js";import"./chunk-AYJ5UCUI-FxR7alk-.js";import"./cloneDeep-B_QLLDkA.js";import"./Skeleton-C2rRnGCD.js";import"./SkeletonButton-DK56isUm.js";import"./SkeletonInlineBlock-BinR0KFv.js";import"./SkeletonTable-VIE-Blx7.js";import"./times-CQM6hN1x.js";import"./toInteger-C6c1t912.js";import"./isSymbol-73O3xJHn.js";import"./SkeletonParagraph-DsjECyO_.js";import"./MarkdownSynapse-CCEUdOgx.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(f.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=S(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
