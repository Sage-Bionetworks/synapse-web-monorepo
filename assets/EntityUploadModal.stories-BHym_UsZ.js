import{r as u,dk as ue,d5 as J,dq as oe,aD as pe,aE as K,as as X,c8 as j,iT as B,j as t,B as P,V as D,X as N,j8 as me,bp as ae,c5 as q,ax as ye,J as se,h8 as fe,e5 as ge,c3 as he,hj as Ie}from"./iframe-DkJtXMGY.js";import{D as re}from"./DialogBase-buJoyvfa.js";import{u as Ee,U as xe,M as Ce,a as Ue}from"./useUploadFiles-Ef7fkL0E.js";import{q as Z,s as Fe,r as we,t as le,u as de}from"./useEntity-CO16wdW2.js";import{b as ce,c as be}from"./FileHandleUtils-Bz8pGMQJ.js";import{p as Se}from"./pluralize-Dtp1DlEB.js";import{F as ve}from"./FormControlLabel-BtRUWfK0.js";import{C as je}from"./Checkbox-1S1SsZEO.js";import{P as ke}from"./ProjectStorageLimitAlert-D4iFPslL.js";import{a as _e,T as ee}from"./Tabs-NNsgGg1P.js";import"./index-r8ZA1smB.js";import"./Close-BlNc4-DS.js";import"./HelpPopover-Bw54_hwN.js";import"./MarkdownPopover-HbQMpPTM.js";import"./LightTooltip-DemkIWEH.js";import"./MarkdownSynapse-Cj88j8IZ.js";import"./SkeletonButton-Wvy1B_g_.js";import"./SkeletonInlineBlock-BZs9NYqd.js";import"./SkeletonTable-Boy2sN_O.js";import"./SkeletonParagraph-D2M_qyIo.js";import"./FileUploadProgress-9JJzk7nS.js";import"./index.esm-B-FRsXMc.js";import"./MenuItem-__VZzdvD.js";import"./events-DQ172AOg.js";import"./index-DeHyV-bG.js";import"./pickBy-TCGe6MDQ.js";import"./isString-BGlEt5YE.js";import"./_baseIteratee-fqRe5hEX.js";import"./useQueries-Z-3gwq5U.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-iYy68X6j.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-B1ApGHDu.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./SwitchBase-LVCk0Af2.js";import"./KeyboardArrowRight-DbHT7G6L.js";function W(n,e){switch(e.type){case"addItemsPendingConfirmation":return{...n,pendingItems:[...n.pendingItems,...e.newItems]};case"confirmItem":{const s=[...n.confirmedItems,...e.itemsToConfirm],a=n.pendingItems.filter(r=>!e.itemsToConfirm.includes(r));return{confirmedItems:s,pendingItems:a}}case"removePendingItems":{const s=n.pendingItems.filter(a=>!e.itemsToRemove.includes(a));return{confirmedItems:n.confirmedItems,pendingItems:s}}case"clear":return{confirmedItems:[],pendingItems:[]};default:return n}}function Te(){const[n,e]=u.useReducer(W,{pendingItems:[],confirmedItems:[]}),s=(...i)=>{e({type:"addItemsPendingConfirmation",newItems:i})},a=(...i)=>(e({type:"confirmItem",itemsToConfirm:i}),W(n,{type:"confirmItem",itemsToConfirm:i})),r=(...i)=>(e({type:"removePendingItems",itemsToRemove:i}),W(n,{type:"removePendingItems",itemsToRemove:i})),l=()=>{e({type:"clear"})};return{pendingItems:n.pendingItems,confirmedItems:n.confirmedItems,addItemsPendingConfirmation:s,confirmItem:a,removePendingItems:r,clear:l}}async function Le(n,e,s,a){var i;const r=((i=await ue(()=>s.entityServicesClient.postRepoV1EntityChild({entityLookupRequest:{parentId:e,entityName:n}})))==null?void 0:i.id)??null;if(r==null)return r;const l=await s.entityServicesClient.getRepoV1EntityId({id:r});if(l.concreteType!="org.sagebionetworks.repo.model.FileEntity"){const p=J(l.concreteType);throw new Error(`A(n) ${oe(p)} named "${n}" already exists in this location (${e}).${` ${a}`}`)}return l.id}function Re(){const{mutateAsync:n}=Z(),e=pe(),s=Fe(),a=we();return K({mutationFn:async r=>{const{rootContainerId:l,path:i}=r;let p=l;for(const c of i){const o=await e.fetchQuery(s({parentId:p,entityName:c}));if(o){const m=await e.fetchQuery(a(o));if(m.concreteType!="org.sagebionetworks.repo.model.Folder"){const h=J(m.concreteType);throw new Error(`A(n) ${oe(h)} named "${c}" already exists in this location (${p}). A folder could not be created.`)}p=o}else{const{id:m}=await n({concreteType:"org.sagebionetworks.repo.model.Folder",name:c,parentId:p});p=m}}return p}})}function Pe(){const{mutateAsync:n}=Re();return K({mutationFn:e=>{const{file:s,rootContainerId:a}=e,r=s.webkitRelativePath;if(r){const l=r.split("/").slice(0,-1);return n({rootContainerId:a,path:l}).then(i=>({file:s,parentId:i}))}else return Promise.resolve({file:s,parentId:a})}})}function Ne(n){const{synapseClient:e}=X(),{mutateAsync:s}=Pe();return K({...n,mutationFn:async a=>{const r=a.filter(d=>"existingEntityId"in d),l=[];for(const d of a)try{if("rootContainerId"in d){const{file:y,rootContainerId:g}=d;l.push(await s({file:y,rootContainerId:g}))}}catch(y){throw new Error(`Unable to create target folder structure for file ${d.file.name}${Object.hasOwn(y,"message")?`: ${y.message}`:null}`,{cause:y})}const i=await Promise.allSettled(l.map(d=>Le(d.file.name,d.parentId,e,"The file could not be uploaded.").then(y=>({...d,existingEntityId:y})))),p=i.filter(d=>d.status==="rejected");if(p.length>0)throw new Error(`Files could not be uploaded:
	${p.map(d=>d.reason.message).join(`
	`)}`);const c=i.filter(d=>d.status==="fulfilled").map(d=>d.value),m=[...c.filter(d=>d.existingEntityId==null),...r],h=c.filter(d=>d.existingEntityId!=null);return{filesReadyForUpload:m,filesToPromptForNewVersion:h}}})}function Oe(n,e,s){if(e==null)return!1;if(e.isOverLimit)return!0;if(e.maxAllowedFileBytes==null)return!1;const a=(e.sumFileBytes??0)+s,r=Array.from(n).reduce((l,i)=>l+i.size,0);return a+r>e.maxAllowedFileBytes}function Ae(n,e="",s="",a=j){const{synapseClient:r}=X(),{mutateAsync:l}=Z(),{mutateAsync:i}=le(),p=u.useCallback(async function(f,x){if("existingEntityId"in f&&f.existingEntityId){const $=await r.entityServicesClient.getRepoV1EntityId({id:f.existingEntityId});await i({...$,dataFileHandleId:x})}else if("parentId"in f){const $={parentId:f.parentId,name:f.file.name,concreteType:"org.sagebionetworks.repo.model.FileEntity",dataFileHandleId:x};await l($)}else throw new Error(`Can't upload file without a parent ID or existing entity ID. File was: ${JSON.stringify(f)}`)},[l,r.entityServicesClient,i]),{data:c,isLoading:o,error:m}=ce(n,{staleTime:1/0}),h=!!(n&&c),d=(c==null?void 0:c.storageLocationId)||B,y=m==null?void 0:m.message,{pendingItems:g,confirmItem:C,addItemsPendingConfirmation:S,removePendingItems:b,clear:U}=Te(),E=u.useCallback(()=>{U()},[U]),{state:F,startUpload:w,activeUploadCount:k,uploadProgress:_,bytesPendingUpload:T}=Ee({onBeforeUpload:E,storageLocationId:d,uploadDestination:c,accessKey:e,secretKey:s,onUploadComplete:p}),O=u.useCallback(I=>{const{filesReadyForUpload:f,filesToPromptForNewVersion:x}=I;f.length>0&&x.length==0&&w(...f),x.length>0&&(C(...f),S(...x))},[S,C,w]),{mutateAsync:A,isPending:L}=Ne(),V=u.useCallback(async I=>{if(c==null){console.error("Upload destination was not loaded, or failed to load! Aborting upload.");return}if(Oe(I.map(x=>x.file),c.projectStorageLocationUsage,T)){a();return}const f=await A(I);O(f)},[T,a,O,A,c]),v=u.useMemo(()=>g.map(I=>({info:{type:"CONFIRM_NEW_VERSION",fileName:I.file.name,existingEntityId:I.existingEntityId},onConfirm:()=>{const{confirmedItems:f,pendingItems:x}=C(I);f.length>0&&x.length==0&&w(...f)},onConfirmAll:()=>{const{confirmedItems:f}=C(...g);w(...f)},onSkip:()=>{const{confirmedItems:f,pendingItems:x}=b(I);f.length>0&&x.length==0&&w(...f)},onCancelAll:()=>{U()}})),[U,C,g,b,w]),R=u.useMemo(()=>y?"ERROR":o?"LOADING":v.length>0?"PROMPT_USER":F,[v.length,y,o,F]);return u.useMemo(()=>({state:R,errorMessage:y,isPrecheckingUpload:L,activeUploadCount:k,initiateUpload:V,activePrompts:v,uploadProgress:_,isUploadReady:h}),[R,y,L,k,V,v,_,h])}function Ve(n){return n.type==="CONFIRM_NEW_VERSION"?"Update existing file?":""}function Me(n){return n.type==="CONFIRM_NEW_VERSION"?`A file named "${n.fileName}" (${n.existingEntityId}) already exists in this location. Do you want to update the existing file and create a new version?`:""}function G(n){const{activePrompts:e}=n,[s,a]=u.useState(!1);if(e.length===0)return null;const r=e.filter(l=>l.info.type==="CONFIRM_NEW_VERSION").length-1;return t.jsx(re,{title:Ve(e[0].info),open:!0,content:t.jsxs(t.Fragment,{children:[t.jsx(N,{variant:"body1",gutterBottom:!0,children:Me(e[0].info)}),e[0].info.type=="CONFIRM_NEW_VERSION"&&r>0&&t.jsx(ve,{control:t.jsx(je,{}),value:s,onChange:(l,i)=>a(i),label:`Also update ${r.toLocaleString()} other uploaded ${Se("file",r)} that already exist${r==1?"s":""}`})]}),onCancel:j,hasCloseButton:!1,actions:t.jsxs(t.Fragment,{children:[e[0].onCancelAll&&t.jsx(P,{variant:"text",color:"error",onClick:e[0].onCancelAll,children:"Cancel All Uploads"}),t.jsx(D,{sx:{flexGrow:1}}),e[0].onSkip&&t.jsx(P,{onClick:e[0].onSkip,children:"No"}),e[0].onConfirm&&t.jsx(P,{variant:"contained",color:"primary",onClick:()=>{s?e[0].onConfirmAll():e[0].onConfirm()},children:"Yes"})]})})}try{G.displayName="EntityUploadPromptDialog",G.__docgenInfo={description:"",displayName:"EntityUploadPromptDialog",props:{activePrompts:{defaultValue:null,description:"",name:"activePrompts",required:!0,type:{name:"UseUploadFileEntitiesReturn"}}}}}catch{}function H(n){const{uploadDestination:e,accessKey:s,setAccessKey:a,secretKey:r,setSecretKey:l}=n;return e==null||!me(e)||!e.endpointUrl?t.jsx(t.Fragment,{}):t.jsxs(ae,{sx:{gap:1.5,mb:3},children:[t.jsxs(N,{children:["Authorization is required to access"," ",t.jsx("strong",{children:e.endpointUrl})]}),t.jsx(q,{label:"Access Key",fullWidth:!0,value:s,onChange:i=>{a(i.target.value)}}),t.jsx(q,{label:"Secret Key",type:"password",fullWidth:!0,value:r,onChange:i=>{l(i.target.value)}}),t.jsx(N,{variant:"smallText1",sx:{fontStyle:"italic"},children:"Keys are used to locally sign a web request. They are not transmitted or stored by Synapse."})]})}try{H.displayName="ExternalObjectStoreCredentialsForm",H.__docgenInfo={description:"",displayName:"ExternalObjectStoreCredentialsForm",props:{uploadDestination:{defaultValue:null,description:"",name:"uploadDestination",required:!1,type:{name:"UploadDestination"}},accessKey:{defaultValue:null,description:"",name:"accessKey",required:!0,type:{name:"string"}},setAccessKey:{defaultValue:null,description:"",name:"setAccessKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}},secretKey:{defaultValue:null,description:"",name:"secretKey",required:!0,type:{name:"string"}},setSecretKey:{defaultValue:null,description:"",name:"setSecretKey",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}}}}}catch{}const Q=u.forwardRef(function(e,s){var L;const{entityId:a,onStateChange:r=j,onUploadReady:l=j}=e,{data:i,isLoading:p}=de(a),c=(i==null?void 0:i.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{data:o,isLoading:m}=ce(a),h=p||m,[d,y]=u.useState(""),[g,C]=u.useState(""),[S,b]=u.useState(!1),{initiateUpload:U,state:E,uploadProgress:F,activePrompts:w,isPrecheckingUpload:k,isUploadReady:_}=Ae(a,d,g,()=>b(!0));u.useEffect(()=>{r(E)},[E,r]),u.useEffect(()=>{_&&l()},[_,l]);function T(V){var R;if((R=o==null?void 0:o.projectStorageLocationUsage)!=null&&R.isOverLimit){se("Cannot upload files because the storage limit has been exceeded.","danger");return}const v=Array.from(V).map(I=>c?{file:I,existingEntityId:a}:{file:I,rootContainerId:a});U(v)}u.useImperativeHandle(s,()=>({handleUploads:T}));const O=k||h,A=k?"Preparing files for upload...":"Loading...";return t.jsxs("div",{children:[t.jsx(G,{activePrompts:w}),(o==null?void 0:o.projectStorageLocationUsage)&&t.jsx(ke,{usage:o.projectStorageLocationUsage,didUploadsExceedLimit:S}),t.jsx(H,{uploadDestination:o,accessKey:d,setAccessKey:y,secretKey:g,setSecretKey:C}),t.jsx(xe,{onUploadFileList:T,allowMultipleFiles:!c,isLoading:O,loadingText:A,disabled:(L=o==null?void 0:o.projectStorageLocationUsage)==null?void 0:L.isOverLimit,message:t.jsxs(t.Fragment,{children:[t.jsxs(N,{variant:"smallText1",children:["All uploaded files will be stored in",(o==null?void 0:o.storageLocationId)===B&&" Synapse storage",o&&(o==null?void 0:o.storageLocationId)!==B&&t.jsxs(t.Fragment,{children:[":",t.jsx("br",{}),be(o)]})]}),o&&o.banner&&t.jsx(ye,{sx:{textAlign:"left"},isGlobal:!1,title:"Storage Location Message",description:o.banner,variant:"info"})]})}),t.jsx(Ce,{uploaderState:E,uploadProgress:F})]})});try{Q.displayName="EntityUpload",Q.__docgenInfo={description:"",displayName:"EntityUpload",props:{entityId:{defaultValue:null,description:`The ID of the entity to upload to. If this is a container, file(s) will be added as children. If this is a
FileEntity, then a file may be uploaded as a new version`,name:"entityId",required:!0,type:{name:"string"}},onStateChange:{defaultValue:null,description:"Callback that is invoked when the state of the uploader changes",name:"onStateChange",required:!1,type:{name:"(state: EntityUploaderState) => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}function De(n){let e="";if(n!=null){const s=n.lastIndexOf("/");if(s>-1){const a=n.indexOf("?",s);a>-1?e=n.substring(s+1,a):e=n.substring(s+1)}}return e}function qe(n){const{synapseClient:e}=X(),{mutateAsync:s}=Ue(),{mutateAsync:a}=Z(),{mutateAsync:r}=le();return K({...n,mutationFn:async l=>{const{url:i,entityId:p}=l;let c=l.name;(c==""||c==null)&&(c=De(i));const o=await e.entityServicesClient.getRepoV1EntityId({id:p});let m;if(o.concreteType==="org.sagebionetworks.repo.model.FileEntity")m=!0;else if(fe(J(o.concreteType)))m=!1;else throw new Error(`The ${p} is not a FileEntity or a container, got concreteType ${o.concreteType}`);const h=await s({externalFileHandleInterface:{concreteType:"org.sagebionetworks.repo.model.file.ExternalFileHandle",fileName:c,externalURL:i}});if(m){const d={...o,dataFileHandleId:h.id};return await r(d)}else{const d={name:c,concreteType:"org.sagebionetworks.repo.model.FileEntity",parentId:p,dataFileHandleId:h.id};return await a(d)}}})}const z=u.forwardRef(function(e,s){const{entityId:a,onIsValidChanged:r=j,onSuccess:l=j}=e,[i,p]=u.useState(""),[c,o]=u.useState(""),{data:m}=de(a),h=(m==null?void 0:m.concreteType)==="org.sagebionetworks.repo.model.FileEntity",{mutate:d,error:y}=qe({onSuccess:l});return u.useEffect(()=>{const g=i.trim().length>0;r(g)},[i,r]),u.useImperativeHandle(s,()=>({submit:()=>{d({url:i.trim(),name:c.trim(),entityId:a})}})),m?t.jsxs(ae,{sx:{gap:2},children:[t.jsx(N,{variant:"body1",children:"Provide a URL to create a link to a file that is located in external storage or hosted on the web. Metadata, provenance, and annotations related to the file can be stored in Synapse, but the file data itself can only be accessed using the link."}),t.jsx(q,{label:"URL",required:!0,fullWidth:!0,value:i,onChange:g=>p(g.target.value)}),!h&&t.jsx(q,{label:"Name",fullWidth:!0,value:c,onChange:g=>o(g.target.value)}),y&&t.jsx(he,{severity:"error",sx:{my:2},children:(y==null?void 0:y.message)??"An error occurred while attempting to create the link."})]}):t.jsx(D,{sx:{display:"flex",justifyContent:"center"},children:t.jsx(ge,{size:40})})});try{z.displayName="LinkToURL",z.__docgenInfo={description:"",displayName:"LinkToURL",props:{entityId:{defaultValue:null,description:"The ID of the FileEntity that should be updated, or container entity in which a new FileEntity should be created.",name:"entityId",required:!0,type:{name:"string"}},onIsValidChanged:{defaultValue:null,description:"Invoked when the validity of the form changes (e.g. to disable/activate a submit button)",name:"onIsValidChanged",required:!1,type:{name:"(isValid: boolean) => void"}},onSuccess:{defaultValue:null,description:"Invoked when the call to create or update the entity succeeds.",name:"onSuccess",required:!1,type:{name:"(newOrUpdatedEntity: FileEntity) => void"}}}}}catch{}const Y=u.forwardRef(function(e,s){const{entityId:a,open:r,onClose:l,onUploadReady:i}=e,[p,c]=u.useState(0),[o,m]=u.useState("LOADING"),[h,d]=u.useState(!1),y=u.useRef(null),g=u.useRef(null),C=o==="PROMPT_USER"||o==="UPLOADING",S=C||o==="COMPLETE",b=p===0?o!=="COMPLETE":!h;function U(){b||(p===0?l():y.current.submit())}return u.useImperativeHandle(s,()=>({handleUploads:E=>{var F;c(0),(F=g.current)==null||F.handleUploads(E)}})),t.jsx(re,{DialogProps:{onKeyUp:E=>{E.key==="Enter"&&U()},keepMounted:!0},title:"Upload or Link to File",open:r,maxWidth:"md",fullWidth:!0,content:t.jsxs(t.Fragment,{children:[t.jsxs(_e,{textColor:"secondary",indicatorColor:"secondary",value:p,onChange:(E,F)=>c(F),sx:{mb:2},children:[t.jsx(ee,{label:"Upload File",value:0}),t.jsx(ee,{label:"Link to URL",value:1})]}),t.jsx(D,{sx:{display:p===0?"block":"none"},children:t.jsx(Q,{ref:g,entityId:a,onStateChange:m,onUploadReady:i})}),t.jsx(D,{sx:{display:p===1?"block":"none"},children:t.jsx(z,{ref:y,entityId:a,onIsValidChanged:d,onSuccess:E=>{se(`Successfully created "${E.name}"`,"success"),l()}})})]}),onCancel:()=>{C||l()},hasCloseButton:!C,actions:t.jsxs(t.Fragment,{children:[t.jsx(P,{variant:"outlined",onClick:()=>{l()},disabled:S,children:"Cancel"}),t.jsx(P,{variant:"contained",onClick:U,disabled:b,children:"Finish"})]})})});try{Y.displayName="EntityUploadModal",Y.__docgenInfo={description:"",displayName:"EntityUploadModal",props:{entityId:{defaultValue:null,description:"",name:"entityId",required:!0,type:{name:"string"}},open:{defaultValue:null,description:"",name:"open",required:!0,type:{name:"boolean"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},onUploadReady:{defaultValue:null,description:"Callback that is invoked when component is ready to upload",name:"onUploadReady",required:!1,type:{name:"() => void"}}}}}catch{}const{fn:Ke}=__STORYBOOK_MODULE_TEST__,bt={title:"Synapse/Upload/EntityUploadModal",component:Y,args:{open:!0,onClose:Ke()}},M={args:{entityId:Ie.entity.id},parameters:{stack:"mock"}};var te,ne,ie;M.parameters={...M.parameters,docs:{...(te=M.parameters)==null?void 0:te.docs,source:{originalSource:`{
  args: {
    entityId: mockProjectEntityData.entity.id
  },
  parameters: {
    stack: 'mock'
  }
}`,...(ie=(ne=M.parameters)==null?void 0:ne.docs)==null?void 0:ie.source}}};const St=["Demo"];export{M as Demo,St as __namedExportsOrder,bt as default};
