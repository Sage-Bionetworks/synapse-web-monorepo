import{u as o}from"./VerificationSubmission-CNoSrCdk.js";import{g as u,bb as d,bc as l,B as S,bd as f,M as O}from"./useFiles-CUiolQtu.js";import"./StringUtils-BmiE0y30.js";import{h as i,H as n}from"./index-Dmhwr62_.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-CO-siE9i.js";import"./SynapseConstants-vhsZtUjo.js";import"./OrientationBanner-BFdTeK-_.js";import"./index-C1J3TF4n.js";import"./index-BWYAF8lU.js";import"./iframe-yyANH0os.js";import"./spreadSx-CwcO6WA9.js";import"./react-D8Qeut8Q.js";import"./FullWidthAlert-BEZ4ORhM.js";import"./Alert-23XrgefS.js";import"./createTheme-BIkK4vAx.js";import"./DefaultPropsProvider-rerTD_WB.js";import"./useSlot-9cyZ6jgL.js";import"./useForkRef-3RAnBlw2.js";import"./createSimplePaletteValueFilter-Db0Nak9e.js";import"./createSvgIcon-Dp5pXPxK.js";import"./Close-D46JNv69.js";import"./IconButton-BYc-lBIW.js";import"./useTimeout-Cj7Ad7uF.js";import"./ButtonBase-k3fET7tS.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-CF22j_wE.js";import"./Paper-Cl3IGk_S.js";import"./useTheme-Bdzv-Cyq.js";import"./useTheme-BvqfD93n.js";import"./Stack-Dp6jq4N4.js";import"./extendSxProp-CAI-rqjs.js";import"./getThemeProps-BBH5x4Xu.js";import"./Box-DVmmo7o0.js";import"./AlertTitle-C4APA_m_.js";import"./Typography-fee9a3WB.js";import"./index-DJ3RBYQ3.js";import"./ClickAwayListener-DEOiO8wg.js";import"./getReactElementRef-Dhk2uDEE.js";import"./index-CYb0fCN1.js";import"./index-qGeDa7OH.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-99E260oC.js";import"./Tooltip-D11GPAI5.js";import"./index-CpgqNKCb.js";import"./useControlled-BhJABjDl.js";import"./Popper-Dd9ZCGgG.js";import"./Button-ChvyBgQs.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-kP5bDzxo.js";import"./QueryClientProvider-BNTU3bEl.js";import"./Link-BHnRdTee.js";import"./Collapse-6d7tJFAU.js";import"./_baseUniq-5PKrMJpi.js";import"./_Uint8Array-DM_d1Jz_.js";import"./isArray-DMpRDESY.js";import"./_getTag-DFeirRww.js";import"./isEqual-CPSyp1EL.js";import"./merge-CZZIB5B1.js";import"./_initCloneObject-Dn7RHs7d.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-LPHQT0EL.js";import"./inputBaseClasses-DVJUYt1O.js";import"./calculateFriendlyFileSize-CXbkyRqM.js";import"./CheckCircleTwoTone-BgnJHJ-3.js";import"./InfoTwoTone-Br0yDVnb.js";import"./useMutation-BlaYELbj.js";import"./dayjs.min-CYOliFU3.js";import"./chunk-AYJ5UCUI-VuZVNL9M.js";import"./cloneDeep-FAtHP8s_.js";import"./Skeleton-QExJC7b2.js";import"./SkeletonButton-CbbF7GM-.js";import"./SkeletonInlineBlock-ZIcve0kU.js";import"./SkeletonTable-CytrP16p.js";import"./times-j8ymOn6e.js";import"./toInteger-cpVm-g8l.js";import"./isSymbol-CtQJT7_P.js";import"./SkeletonParagraph-Bd3sbAsA.js";import"./MarkdownSynapse-xbvn6IL_.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
