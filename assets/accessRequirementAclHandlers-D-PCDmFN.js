import{b as c}from"./index-Be3MfuFw.js";import{m as A}from"./mockAccessRequirements-dM7yMd-M.js";import{M as m,b as I}from"./userProfileHandlers-B4PRP-Fy.js";import{M as _}from"./mock_user_profile-DulivbBT.js";import{l as n}from"./index-K4Vwx9fZ.js";import{af as a}from"./SynapseClient-8bMSqgwM.js";const N="1234567",p={id:A.id.toString(),resourceAccess:[{principalId:m,accessType:[c.REVIEW_SUBMISSIONS]},{principalId:I,accessType:[c.EXEMPTION_ELIGIBLE]},{principalId:_,accessType:[c.EXEMPTION_ELIGIBLE,c.REVIEW_SUBMISSIONS]}]},l=[p];function M(e){return n.rest.get(`${e}${a(":id")}`,async(t,r,s)=>{let o=404,i={reason:`Mock Service worker could not find an ACL for access requirement with ID ${t.params.id}`};const u=l.find(E=>E.id===t.params.id);return u&&(i=u,o=200),r(s.status(o),s.json(i))})}function S(e){return n.rest.delete(`${e}${a(":id")}`,async(t,r,s)=>r(s.status(200)))}function d(e){return n.rest.post(`${e}${a(":id")}`,async(t,r,s)=>r(s.status(201),s.json(t)))}function C(e){return n.rest.put(`${e}${a(":id")}`,async(t,r,s)=>r(s.status(200),s.json(t)))}function y(e){return[M(e),S(e),d(e),C(e)]}export{p as M,N as a,y as g};
