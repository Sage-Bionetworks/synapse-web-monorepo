import{aE as ge,i3 as Ie,j as e,dr as r,c5 as R,V as C,X as se,_ as h,dq as F,fx as le,i4 as ce,r as a,i5 as Ve,hX as ve,c3 as q,B as Y,J as xe}from"./iframe-DkJtXMGY.js";import{q as Oe,o as Le}from"./useEntity-CO16wdW2.js";import{u as je,a as Pe,T as Ne}from"./TableColumnSchemaForm-B1MAR5Vc.js";import{D as Me}from"./DialogBase-buJoyvfa.js";import{E as Ae}from"./EntityViewMaskEditor-CQGv20iz.js";import{E as Be}from"./EntityViewScopeEditor-uu8FKFco.js";import{S as ke}from"./SubmissionViewScopeEditor-BfmuDDiG.js";import{u as pe}from"./useGetFeatureFlag-C81kPC3B.js";import{W as de,a as T,b as _}from"./WizardChoiceButton-IKF8HzMT.js";import{k as De}from"./index-BYpz4R5I.js";import"./index-r8ZA1smB.js";import"./pickBy-TCGe6MDQ.js";import"./isString-BGlEt5YE.js";import"./_baseIteratee-fqRe5hEX.js";import"./useQueries-Z-3gwq5U.js";import"./queryOptions-C9woPjwX.js";import"./useInfiniteQuery-iYy68X6j.js";import"./InfiniteQueryUtils-CKlRW-xB.js";import"./useEntityBundle-B1ApGHDu.js";import"./SchemaDrivenAnnotationEditor-ahYb2L0A.js";import"./useSchema-BURBpdhN.js";import"./ConfirmationDialog-DYXCYbxt.js";import"./JsonSchemaForm-DKYLsf2n.js";import"./enums-DEEgdRlW.js";import"./_arrayReduce-CrxnWFSq.js";import"./_baseEach-BWCq4nkB.js";import"./uniq-BY50vU0D.js";import"./forEach-B8iwwgef.js";import"./GridLegacy-kxAEsx-9.js";import"./MarkdownPopover-HbQMpPTM.js";import"./LightTooltip-DemkIWEH.js";import"./MarkdownSynapse-Cj88j8IZ.js";import"./SkeletonButton-Wvy1B_g_.js";import"./SkeletonInlineBlock-BZs9NYqd.js";import"./SkeletonTable-Boy2sN_O.js";import"./SkeletonParagraph-D2M_qyIo.js";import"./HelpTwoTone-BtgvyVn6.js";import"./ContentCopy-VQO8hClA.js";import"./Close-BlNc4-DS.js";import"./ArrowUpward-CDeIUYL5.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./groupBy-CDC241_8.js";import"./_createAggregator-yAzaqnfe.js";import"./_baseMap-lB5D5faS.js";import"./ListItem-CU_IxpDS.js";import"./listItemButtonClasses-CsxA2vb9.js";import"./DateTimePicker-BR4MscyF.js";import"./useMobilePicker-BQTbo9ri.js";import"./index-C-_p9hnQ.js";import"./index-Chjiymov.js";import"./visuallyHidden-Dan1xhjv.js";import"./InputAdornment-C08nIKom.js";import"./index-BhkdXidL.js";import"./Chip-C5Eg6zQf.js";import"./Tabs-NNsgGg1P.js";import"./KeyboardArrowRight-DbHT7G6L.js";import"./MenuItem-__VZzdvD.js";import"./Autocomplete-D8JJjyd7.js";import"./usePreviousProps-B2s_NTFp.js";import"./use-deep-compare-effect.esm-aTxZvlU9.js";import"./TextWidget-DRGRa_yI.js";import"./pluralize-Dtp1DlEB.js";import"./MultiValueField-YKPycj2i.js";import"./JSONArrayEditorModal-B4SqJ5lS.js";import"./papaparse.min-D1KxGBLm.js";import"./EntityFinderModal-BOkmhP5J.js";import"./WarningDialog-DZrWNb5R.js";import"./EntityFinder-BSjdqWAe.js";import"./Search-YNLkUiEj.js";import"./immutable.es-BJjDfH8f.js";import"./defineProperty-CegpTSss.js";import"./extends-CF3RwP-h.js";import"./useEntitySelection-D5WeSzBR.js";import"./useGetEntityChildren-DOnHhcV6.js";import"./StyledTanStackTable-9YbBDCsM.js";import"./StyledTableContainer-5GgQ8JVv.js";import"./ExpandCollapseButton-wK_XGzzi.js";import"./index-t7ij6kBr.js";import"./ColumnHeader-CAs1jQJk.js";import"./EnumFacetFilterUI-BmdO_Apo.js";import"./FacetFilterHeader-rNjBBCj1.js";import"./FormControlLabel-BtRUWfK0.js";import"./Checkbox-1S1SsZEO.js";import"./SwitchBase-LVCk0Af2.js";import"./Radio-DnYOEHwV.js";import"./ModifiedOnCell-Bl7H7l1w.js";import"./useDownloadList-BqvEC_EH.js";import"./DownloadConfirmationUtils-Dd4OzkE7.js";import"./UserBadge-D10KGNES.js";import"./Card-BrdkgB5x.js";import"./EntityBadgeIcons-CSXnzm0-.js";import"./index-DHBZhc45.js";import"./AnnotationsTable-D9-BNAqj.js";import"./EntityModal-Dpl1ujzB.js";import"./FileHandleUtils-Bz8pGMQJ.js";import"./LockTwoTone-qAEF7vz4.js";import"./EntityIcon-Ll_hyWOT.js";import"./FileEntityDirectDownload-BmN4wCvJ.js";import"./DirectDownload-1txuteuZ.js";import"./SynapseTableConstants-2qH3fDlQ.js";import"./HelpPopover-Bw54_hwN.js";import"./useFavorites-BtRaHRTD.js";import"./useGetEntityHeaders-BV7RK0QT.js";import"./NoSearchResults-ViLdhsmp.js";import"./useSearch-D5wjYLHn.js";import"./DropdownSelect-DbPTI3Fr.js";import"./getValidReactChildren-DkwvkbW2.js";import"./index.esm-B-FRsXMc.js";import"./FormGroup-DCl1RDUc.js";import"./EntityHeaderTable-ITaUhk8d.js";import"./EntityHeaderTableCellRenderers-D_q2uHwG.js";import"./EntityLink-BqpJWKI0.js";import"./ErrorChip-CrnWChky.js";import"./useDebouncedEffect-CbC68BJS.js";import"./upperFirst-DicdBOFC.js";import"./_stringToArray-Cn5Hcc4J.js";import"./useEvaluation-v9vFZXFu.js";import"./EvaluationFinder-CKv38Eju.js";import"./Grid-CVeqhvD2.js";import"./ListItemIcon-CKBraPLc.js";import"./ListItemText-CZ27qOtB.js";import"./RadioGroup-CGXPC58P.js";import"./Slider-zoiZ_8eO.js";function We(t){return ge({...t,mutationFn:i=>Ie(i.sql,i.entityType)})}const Fe=e.jsxs(C,{sx:{mb:2.5},children:[e.jsx(se,{variant:"body1",sx:{color:"grey.700",mb:1.25},children:"If you store normalized data in Synapse tables, views, or datasets, you can combine separate data sources using Materialized Views. A materialized view is a type of Synapse table that is defined using a Synapse SQL statement, which can contain SQL keywords such as JOIN and UNION to combine existing Synapse tables."}),e.jsx(h,{href:"https://help.synapse.org/docs/Combining-Data-from-Multiple-Table-Sources.2973270158.html",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Materialized Views"})]}),qe=e.jsx(C,{sx:{mb:2.5},children:e.jsx(se,{variant:"body1",sx:{color:"grey.700",mb:1.25},children:"A Synapse Virtual Table is a type of table that is defined by a Synapse SQL query. Any query on a Virtual Table will execute the defining SQL statement on the referenced table. The defining SQL of a Virtual Table cannot include JOIN clauses on multiple tables."})});function U(t){const{entityType:i,...s}=t;return e.jsxs(e.Fragment,{children:[i===r.materializedview&&Fe,i===r.virtualtable&&qe,e.jsx(R,{label:"Defining SQL",placeholder:"SELECT * FROM syn123",fullWidth:!0,multiline:!0,required:!0,minRows:6,...s})]})}try{U.displayName="SqlDefinedTableEditor",U.__docgenInfo={description:"Component used to edit the SQL of a Synapse entity defined by SQL, such as a MaterializedView or VirtualTable",displayName:"SqlDefinedTableEditor",props:{component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<TextFieldSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:"{ root?: SlotProps<ElementType<FormControlProps, keyof IntrinsicElements>, {}, BaseTextFieldProps>; ... 4 more ...; select?: SlotProps<...>; } | { ...; } | { ...; }"}},entityType:{defaultValue:null,description:"",name:"entityType",required:!1,type:{name:"enum",value:[{value:'"link"'},{value:'"table"'},{value:'"file"'},{value:'"folder"'},{value:'"entityview"'},{value:'"submissionview"'},{value:'"dataset"'},{value:'"datasetcollection"'},{value:'"project"'},{value:'"dockerrepo"'},{value:'"materializedview"'},{value:'"virtualtable"'},{value:'"recordset"'}]}}}}}catch{}function Ye(t,i){switch(t){case"CHOOSE_TABLE_TYPE":return"Create Table or View";case"CHOOSE_VIEW_TYPE":return"Create View";case"ENTITY_VIEW_SCOPE":case"SUBMISSION_VIEW_SCOPE":return`Define ${F(i)} Scope`;case"TABLE_SQL":return"Create a SQL-Defined View";case"TABLE_COLUMNS":return`Add Columns to ${F(i)}`;case"TABLE_NAME":return`Create the ${F(i)}`}}function Re(t,i){switch(t){case"CHOOSE_TABLE_TYPE":break;case"CHOOSE_VIEW_TYPE":return"CHOOSE_TABLE_TYPE";case"ENTITY_VIEW_SCOPE":case"SUBMISSION_VIEW_SCOPE":case"TABLE_SQL":return"CHOOSE_VIEW_TYPE";case"TABLE_COLUMNS":if(i===r.table)return"CHOOSE_TABLE_TYPE";if(i===r.entityview)return"ENTITY_VIEW_SCOPE";if(i===r.submissionview)return"SUBMISSION_VIEW_SCOPE";break;case"TABLE_NAME":if(i===r.table||i===r.entityview||i===r.submissionview)return"TABLE_COLUMNS";if(i===r.materializedview||i===r.virtualtable)return"TABLE_SQL";break}return console.warn(`Unknown previous step at ${t} for type ${i}`),"CHOOSE_TABLE_TYPE"}function re(t){return t==="TABLE_NAME"}function Ue(t){return t===r.table?"TABLE_COLUMNS":t===r.entityview?"ENTITY_VIEW_SCOPE":t===r.submissionview?"SUBMISSION_VIEW_SCOPE":t===r.materializedview||t===r.virtualtable?"TABLE_SQL":"CHOOSE_TABLE_TYPE"}function ze(t,i,s){[r.table,r.entityview,r.submissionview,r.dataset,r.datasetcollection].includes(i)&&s.length>0&&(t.columnIds=s.map(f=>f.id))}function He(t,i,s){[r.entityview,r.submissionview].includes(i)&&s.length>0&&(t.scopeIds=s)}function Qe(t,i,s){i===r.entityview&&(t.viewTypeMask=s)}function $e(t,i,s){[r.materializedview,r.virtualtable].includes(i)&&(t.definingSQL=s)}function z(t){const{name:i,setName:s,description:y,setDescription:f}=t,n=pe(le.DESCRIPTION_FIELD);return e.jsxs(e.Fragment,{children:[e.jsx(R,{required:!0,label:"Name",value:i,onChange:c=>{s(c.target.value)},fullWidth:!0}),n&&e.jsx(R,{label:"Description",value:y,onChange:c=>{f(c.target.value||void 0)},fullWidth:!0,multiline:!0,rows:3,sx:{my:2}})]})}try{z.displayName="TableNameForm",z.__docgenInfo={description:`React component for the naming a new table or view.
Renders UI to provide the name and description of a table or view.`,displayName:"TableNameForm",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},setName:{defaultValue:null,description:"",name:"setName",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}},description:{defaultValue:null,description:"",name:"description",required:!0,type:{name:"string"}},setDescription:{defaultValue:null,description:"",name:"setDescription",required:!0,type:{name:"Dispatch<SetStateAction<string>>"}}}}}catch{}const Je=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"Synapse tables are used to organize web-accessible, sharable, and queryable data. Tables may be queried and edited with the Synapse UI, as well as with the Synapse programmatic clients."}),e.jsx(h,{href:"https://help.synapse.org/docs/Organizing-Data-With-Tables.2011038095.html",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Tables"})]}),Ge=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"Views allow you to see and query groups of other objects in Synapse, such as files, tables, projects, or submissions and any associated annotations about those items."}),e.jsx(h,{href:"https://help.synapse.org/docs/Views.2011070739.html",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Views"})]});function H(t){const{onTableSelected:i,onViewSelected:s}=t;return e.jsxs(de,{children:[e.jsx(T,{title:"Table",description:Je,onClick:()=>{i()}}),e.jsx(T,{title:"View",description:Ge,onClick:s})]})}try{H.displayName="TableTypeSelection",H.__docgenInfo={description:`React component for the first step of creating a new table or view.
The user will decide if they want to create a Table or a View`,displayName:"TableTypeSelection",props:{onTableSelected:{defaultValue:null,description:"",name:"onTableSelected",required:!0,type:{name:"() => void"}},onViewSelected:{defaultValue:null,description:"",name:"onViewSelected",required:!0,type:{name:"() => void"}}}}}catch{}const Ke=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"This view lists all files, folders, and/or tables in the selected folders or projects."}),e.jsx(h,{href:"https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaFileView",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about File Views"})]}),Xe=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"This view lists all (and only) your selected projects."}),e.jsx(h,{href:"https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaProjectView",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Project Views"})]}),Ze=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"This view lists all submissions within one or more evaluation queues."}),e.jsx(h,{href:"https://help.synapse.org/docs/Views.2011070739.html#Views-CreatingaSubmissionView",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Submission Views"})]}),et=e.jsxs(e.Fragment,{children:[e.jsx(_,{children:"The results of a query across multiple sources, defined by a SQL statement."}),e.jsx(h,{href:"https://help.synapse.org/docs/Combining-Data-from-Multiple-Table-Sources.2973270158.html",target:"_blank",onClick:t=>{t.stopPropagation()},children:"More about Materialized Views"})]}),tt=e.jsx(_,{children:"A saved query on another table or view where complex filters can be applied to aggregated results."});function Q(t){const{onTypeSelected:i}=t,s=pe(le.VIRTUALTABLE_SUPPORT);return e.jsxs(de,{children:[e.jsx(T,{title:"Files, Folders, and Other Objects",description:Ke,onClick:()=>{i(r.entityview)}}),e.jsx(T,{title:"Projects",description:Xe,onClick:()=>{i(r.entityview,ce)}}),e.jsx(T,{title:"Challenge Submissions",description:Ze,onClick:()=>{i(r.submissionview)}}),e.jsx(T,{title:"Materialized View",description:et,onClick:()=>{i(r.materializedview)}}),s&&e.jsx(T,{title:"Virtual Table",description:tt,onClick:()=>{i(r.virtualtable)}})]})}try{Q.displayName="ViewTypeSelection",Q.__docgenInfo={description:`React component for selecting a View type in the View creation wizard.
Renders UI to show all view types where the user must choose one to continue.`,displayName:"ViewTypeSelection",props:{onTypeSelected:{defaultValue:null,description:"",name:"onTypeSelected",required:!0,type:{name:"(type: EntityType, viewTypeMask?: number) => void"}}}}}catch{}function $(t){const{open:i,parentId:s,onComplete:y,onCancel:f}=t,[n,c]=a.useState("CHOOSE_TABLE_TYPE"),[w,me]=a.useState(""),[g,ue]=a.useState(void 0),[o,Ee]=a.useState(void 0),[d,Se]=a.useState([]),[m,Te]=a.useState([]),[p,J]=a.useState(Ve),v=p===ce,[S,x]=a.useState([]),O=a.useRef(null),[b,he]=a.useState(""),u=a.useMemo(()=>{if(o===r.entityview)return{scope:d,viewTypeMask:p,viewEntityType:o};if(o===r.submissionview)return{scope:m,viewEntityType:o}},[o,d,m,p]),{data:L,isLoading:j,isError:P}=je(u==null?void 0:u.viewEntityType,u==null?void 0:u.viewTypeMask,{enabled:n==="ENTITY_VIEW_SCOPE"||n==="SUBMISSION_VIEW_SCOPE",staleTime:1/0}),{mutateAsync:G,error:N}=Oe({onSuccess:l=>{y(l.id)}}),{mutate:K,data:I,error:M}=We({onSuccess:l=>{l&&l.isValid&&c("TABLE_NAME")}}),A=a.useMemo(()=>M?M.reason:I&&I.invalidReason?I.invalidReason:null,[M,I]),{mutateAsync:X,error:B}=Pe(),k=a.useCallback((l,E)=>{Ee(l),E!=null&&J(E),c(Ue(l))},[]),Z=a.useCallback(()=>{c("CHOOSE_VIEW_TYPE")},[]),ee=a.useCallback(async()=>{if(!o){console.error("entityType was not defined!"),c("CHOOSE_TABLE_TYPE");return}let l=[];if(S&&o!==r.materializedview&&o!==r.virtualtable)try{l=await X(S.map(W=>Le(W,De)))}catch{return}const E={name:w,description:g,parentId:s,concreteType:ve(o)};ze(E,o,l),He(E,o,o===r.submissionview?m:d),Qe(E,o,p),$e(E,o,b);try{await G(E)}catch{return}},[S,X,G,g,o,w,s,d,m,b,p]),te=a.useCallback(l=>{x(l),c("TABLE_NAME")},[]),ie=a.useCallback(()=>{O.current!=null&&O.current.submit()},[]),_e=n!=="CHOOSE_TABLE_TYPE",ye=n!=="CHOOSE_TABLE_TYPE"&&n!=="CHOOSE_VIEW_TYPE",fe=a.useCallback(()=>{const l=Re(n,o);["CHOOSE_TABLE_TYPE","CHOOSE_VIEW_TYPE"].includes(l)&&x([]),c(l)},[n,o]),be=a.useCallback(()=>{re(n)?ee():n==="TABLE_SQL"&&o?K({sql:b,entityType:o}):n==="TABLE_COLUMNS"?ie():(n==="ENTITY_VIEW_SCOPE"||n==="SUBMISSION_VIEW_SCOPE")&&(S.length==0&&L&&x(L.map(l=>({...l,id:void 0}))),c("TABLE_COLUMNS"))},[n,ee,ie,S.length,L,K,o,b]),Ce=a.useMemo(()=>n==="ENTITY_VIEW_SCOPE"?d.length===0||p===0||j&&!P:n==="SUBMISSION_VIEW_SCOPE"?m.length===0||p===0||j&&!P:!1,[d.length,m.length,n,p,j,P]),D=a.useMemo(()=>e.jsxs(e.Fragment,{children:[N&&e.jsx(q,{sx:{my:2},severity:"error",children:N.message}),B&&e.jsx(q,{sx:{my:2},severity:"error",children:B.message}),A&&e.jsx(q,{sx:{my:2},severity:"error",children:A})]}),[B,N,A]),we=a.useMemo(()=>{switch(n){case"CHOOSE_TABLE_TYPE":return e.jsx(H,{onTableSelected:()=>{k(r.table)},onViewSelected:Z});case"CHOOSE_VIEW_TYPE":return e.jsx(Q,{onTypeSelected:k});case"ENTITY_VIEW_SCOPE":return e.jsxs(e.Fragment,{children:[e.jsx(Be,{scopeIds:d,onChange:Se,isProjectView:v}),!v&&e.jsx(Ae,{value:p,onChange:J})]});case"SUBMISSION_VIEW_SCOPE":return e.jsx(ke,{evaluationIds:m,onChange:Te});case"TABLE_SQL":return e.jsxs(e.Fragment,{children:[e.jsx(C,{sx:{mt:1.25},children:e.jsx(U,{value:b,onChange:l=>he(l.target.value),entityType:o})}),D]});case"TABLE_COLUMNS":return e.jsx(Ne,{initialData:S,entityType:o,ref:O,onSubmit:te,viewScope:u});case"TABLE_NAME":return e.jsxs(e.Fragment,{children:[e.jsx(z,{name:w,setName:me,description:g,setDescription:ue}),D]})}},[n,Z,k,d,v,p,m,w,g,b,o,D,S,te,u]);return e.jsx(Me,{open:i,onCancel:f,maxWidth:"md",title:Ye(n,o),content:we,actions:e.jsxs(C,{sx:{display:"flex",width:"100%",gap:2.25,mt:2},children:[_e&&e.jsx(Y,{variant:"outlined",onClick:fe,children:"Back"}),e.jsx(C,{sx:{m:"auto"}}),e.jsx(Y,{variant:"outlined",onClick:f,children:"Cancel"}),ye&&e.jsx(Y,{variant:"contained",onClick:be,disabled:Ce,children:re(n)?"Finish":"Next"})]})})}try{$.displayName="CreateTableViewWizard",$.__docgenInfo={description:`Wizard to create a Synapse table, view, or other table type.

See the README.md in this folder for a visualization of the flowchart`,displayName:"CreateTableViewWizard",props:{open:{defaultValue:null,description:"",name:"open",required:!0,type:{name:"boolean"}},parentId:{defaultValue:null,description:"",name:"parentId",required:!0,type:{name:"string"}},onCancel:{defaultValue:null,description:"",name:"onCancel",required:!0,type:{name:"() => void"}},onComplete:{defaultValue:null,description:"",name:"onComplete",required:!0,type:{name:"(newEntityId: string) => void"}}}}}catch{}const{fn:it}=__STORYBOOK_MODULE_TEST__,_r={title:"Synapse/Create Table Wizard",component:$,parameters:{design:{type:"figma",url:"https://www.figma.com/file/vLusb6uSfhx45OyFx5IHwy/(XDM)-Extensible-Data-Management-Comps?type=design&node-id=7108-22337&mode=design&t=acwaLAqUDge5p8eQ-4"}},tags:["autodocs"]},V={args:{open:!0,parentId:"syn23567475",onComplete:t=>{xe(`Successfully created ${t}`)},onCancel:it()}};var oe,ne,ae;V.parameters={...V.parameters,docs:{...(oe=V.parameters)==null?void 0:oe.docs,source:{originalSource:`{
  args: {
    open: true,
    parentId: 'syn23567475',
    onComplete: newId => {
      displayToast(\`Successfully created \${newId}\`);
    },
    onCancel: fn()
  }
}`,...(ae=(ne=V.parameters)==null?void 0:ne.docs)==null?void 0:ae.source}}};const yr=["Demo"];export{V as Demo,yr as __namedExportsOrder,_r as default};
