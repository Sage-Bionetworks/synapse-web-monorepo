import{u as o}from"./VerificationSubmission-CNoSrCdk.js";import{g as u,bb as d,bc as l,B as S,bd as f,M as O}from"./useFiles-CwBFozNb.js";import"./StringUtils-BmiE0y30.js";import{h as i,H as n}from"./index-dL2SSLUU.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-D8PAyB8k.js";import"./SynapseConstants-H9QYZQx4.js";import"./OrientationBanner-CNeoJCz0.js";import"./index-DS8XOEZK.js";import"./index-ChY5Rm6r.js";import"./iframe-CqQBMbol.js";import"./spreadSx-CwcO6WA9.js";import"./react-DWoRMFdS.js";import"./FullWidthAlert-BORMZYsm.js";import"./Alert-Cb4ypvVc.js";import"./createTheme-yejIOOkb.js";import"./DefaultPropsProvider-CH4awBfy.js";import"./useSlot-CESV_KM2.js";import"./useForkRef-Bmi28WuE.js";import"./createSimplePaletteValueFilter-vjYDemZD.js";import"./createSvgIcon-BsG8pbCe.js";import"./Close-CYN-IZzU.js";import"./IconButton-BYEsdF7g.js";import"./useTimeout-B6D9Pure.js";import"./ButtonBase-OFJXx0k5.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-DR9XS5It.js";import"./Paper-BGXgkOJn.js";import"./useTheme-DTyxxCa-.js";import"./useTheme-BfPp1CkS.js";import"./Stack-WojIaCdv.js";import"./extendSxProp-B7a0KEn2.js";import"./getThemeProps-OsG-0KZZ.js";import"./Box-DnISmt3M.js";import"./AlertTitle-C3WBFCmK.js";import"./Typography-BRD-yvy7.js";import"./index-_5AG2bz6.js";import"./ClickAwayListener-DFWrRdPK.js";import"./getReactElementRef-CPbW36NU.js";import"./index-BtYd2M4Q.js";import"./index-CTRw8MjU.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-Brrrt1Cb.js";import"./Tooltip-DyXSSX-F.js";import"./index-C0Hx0yuJ.js";import"./useControlled-RMaq-pts.js";import"./Popper-Dj_XAtVq.js";import"./Button-CHpGI9QY.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-qLmhWmxw.js";import"./QueryClientProvider-BvTCMYrF.js";import"./Link-DouBH94E.js";import"./Collapse-CS4SoJcv.js";import"./_baseUniq-BNiF46u2.js";import"./_Uint8Array-ZkOH5xaJ.js";import"./isArray-BatmeEgt.js";import"./_getTag-DL7PcpR3.js";import"./isEqual-BmZyvHNS.js";import"./merge-DrBJrbmn.js";import"./_initCloneObject-BXiQnqVl.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-CaDQddmk.js";import"./inputBaseClasses-D442M768.js";import"./calculateFriendlyFileSize-198o5yg1.js";import"./CheckCircleTwoTone-BmTJI1it.js";import"./InfoTwoTone-DPmSL3RU.js";import"./useMutation-Bs_GnPAU.js";import"./dayjs.min-NAl5tlfA.js";import"./chunk-AYJ5UCUI-B1Fmi4bj.js";import"./cloneDeep-5C23vurL.js";import"./Skeleton-DsgEN2lO.js";import"./SkeletonButton-CIVdic4R.js";import"./SkeletonInlineBlock-WwVItYM2.js";import"./SkeletonTable-DSUve1AL.js";import"./times-DlX9HG50.js";import"./toInteger-BCSFDXqt.js";import"./isSymbol-CDSpVJXg.js";import"./SkeletonParagraph-Agn3W6LW.js";import"./MarkdownSynapse-BJXn8bWN.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
