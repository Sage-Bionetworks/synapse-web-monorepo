import{j as r}from"./jsx-runtime-N6ye8Cll.js";import{J as c}from"./useFiles-wPL3noqa.js";import{p as y}from"./SqlFunctions-BxcEiHsR.js";import"./StringUtils-lE31obNl.js";import{j as f,i as R}from"./SynapseConstants-DVzzGxGK.js";import"./SkeletonButton-BRl78l5U.js";import"./SkeletonInlineBlock-ixzYcb3a.js";import{S as q}from"./SkeletonTable-CyLitWLR.js";import"./SkeletonParagraph-Bxb6rwDB.js";import{R as _}from"./RowDataTable-CYkOMP_T.js";const o=a=>{const{columnAliases:s,columnLinks:n,query:t,displayedColumns:l}=a,i=y(t.sql),u={partMask:f|R,concreteType:"org.sagebionetworks.repo.model.table.QueryBundleRequest",entityId:i,query:t},{data:e,isLoading:m}=c(u),d=(e==null?void 0:e.queryResult.queryResults.rows[0].values)??[],p=(e==null?void 0:e.queryResult.queryResults.headers)??[];return m?r.jsx(q,{numRows:6,numCols:1}):r.jsx(_,{columnAliases:s,columnLinks:n,rowData:d,headers:p,displayedColumns:l})};try{o.displayName="RowDataTableWithQuery",o.__docgenInfo={description:"For the first row returned by the query, displays a table of column names and Synapse Table row data represented as key/value pairs",displayName:"RowDataTableWithQuery",props:{query:{defaultValue:null,description:"The query used to retrieve data",name:"query",required:!0,type:{name:"Query"}},displayedColumns:{defaultValue:null,description:"Optional list of column names whose data should be displayed in the table. If not provided, all columns with data will be shown.",name:"displayedColumns",required:!1,type:{name:"string[]"}},columnAliases:{defaultValue:null,description:"Optional display value overrides for column names",name:"columnAliases",required:!1,type:{name:"Record<string, string>"}},columnLinks:{defaultValue:null,description:"Optional configuration for linking columns",name:"columnLinks",required:!1,type:{name:"LabelLinkConfig"}}}}}catch{}export{o as R};
