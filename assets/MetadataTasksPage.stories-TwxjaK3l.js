import{j as o}from"./jsx-runtime-D_zvdyIk.js";import{I as F}from"./InfiniteTableLayout-BGkdhSiY.js";import{u as j,c as q,g as G,S as V}from"./StyledTanStackTable-DFXHiuY3.js";import{C as m}from"./ColumnHeader-B6zyQY9T.js";import{U as R}from"./UserBadge-BoHKLUt0.js";import{l as C,g as I,B as w}from"./useFiles-D9eBDzux.js";import"./OrientationBanner-D3KAsP4w.js";import{r as P}from"./index-BAUB8VxZ.js";import"./VerificationSubmission-BDh1zA9f.js";import"./StringUtils-C95LMFI-.js";import{u as B}from"./useInfiniteQuery-Dg_Bksko.js";import{u as E}from"./useEntityBundle-CLxtER_I.js";import{f as N}from"./DateFormatter-DELH7-0o.js";import{d as O}from"./dayjs.min-Bq55Fdj0.js";import{u as S}from"./useMutation-DbSD0zUI.js";import{g as L,u as v}from"./useGridSession-DT-kEq1J.js";import{i as D}from"./_baseUniq-C6s3Loyy.js";import{u as A}from"./QueryClientProvider-Db2j_WHz.js";import{T as H}from"./Tooltip-D5KeB_wU.js";import{B as $}from"./Button-C6MKCi2u.js";import{c as z}from"./createSvgIcon-cYtzdOwk.js";import{L as Q}from"./Link-Cez3cIoy.js";import"./LoadingScreen-8xr-s-oZ.js";import"./Backdrop-D1kaju81.js";import"./createTheme-QOrAiC8v.js";import"./useSlot-DvaOHrx3.js";import"./useForkRef-BOC0myPy.js";import"./DefaultPropsProvider-BNmp3YDg.js";import"./Fade-D7n7NZNC.js";import"./useTheme-DC3v4V5z.js";import"./useTheme-CE_afK7b.js";import"./getReactElementRef-o5Cru5cj.js";import"./useTimeout-YGtm5ulj.js";import"./index-dVVgrbsH.js";import"./iframe-CEgLHbLB.js";import"./index-DZrE4oxZ.js";import"./Box-CJ_mc_KC.js";import"./extendSxProp-68QBnwPw.js";import"./Typography-DBeu9HJZ.js";import"./index-Byhwwvse.js";import"./createSimplePaletteValueFilter-Dk8LfQw2.js";import"./LinearProgress-DPDAOGeP.js";import"./index-BTEM2iTZ.js";import"./StyledTableContainer-B6FiQKVR.js";import"./merge-D2adZoeu.js";import"./_Uint8Array-CY2fm9S_.js";import"./isArray-fTt9doPm.js";import"./_initCloneObject-BfCQnLPN.js";import"./identity-DKeuBCMA.js";import"./ExpandCollapseButton-4A0q5l9-.js";import"./IconSvg-BlVTbpRr.js";import"./spreadSx-CwcO6WA9.js";import"./LayersTwoTone-DeVT8RqQ.js";import"./ContentCopyTwoTone-VLLDj1Gm.js";import"./HelpOutlineTwoTone-XGcNpEm7.js";import"./ErrorOutlined-C1WyGeSM.js";import"./GetAppTwoTone-D-8oLVEn.js";import"./InfoOutlined-CWiKXhPr.js";import"./PhoneTwoTone-D0NK0Ukk.js";import"./DeleteTwoTone-C-Fazt4Z.js";import"./CheckCircleTwoTone-D4WLn7r6.js";import"./index-BL06NoFi.js";import"./index-D3zZJKpo.js";import"./const-BP60AzNb.js";import"./Skeleton-C0B6B6Td.js";import"./EnumFacetFilterUI-DB1zNW6D.js";import"./FacetFilterHeader-bchZ6ERG.js";import"./IconButton-BFqyrDq4.js";import"./ButtonBase-Xz_eRae2.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-ePAruf6a.js";import"./FormControlLabel-B8enCsGD.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-PG3Ak4s-.js";import"./Checkbox-DaZa584U.js";import"./SwitchBase-BnFhiAZG.js";import"./useControlled-CI2yt4-5.js";import"./mergeSlotProps-DkCE0OsK.js";import"./Radio-BPjT0FSV.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Select-D_XZj8Vv.js";import"./Menu-YfYcRFzg.js";import"./Grow-OlzdlbwJ.js";import"./Popover-DfQuXddf.js";import"./isHostComponent-DVu5iVWx.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Modal-al2Bao74.js";import"./getScrollbarSize-CaCM53D3.js";import"./Paper-B6p4m8Ct.js";import"./MenuList-C_0KZEXe.js";import"./List-C3kYEe9m.js";import"./FormControl-DaMxWI9o.js";import"./isMuiElement-BlFzTzLU.js";import"./inputBaseClasses-CVINOxDr.js";import"./InputBase-DR-bS_BE.js";import"./Input-DrnRaRXo.js";import"./MenuItem-YZ8rzj_E.js";import"./dividerClasses-CqOgaN6k.js";import"./TextField-ZgbIDgi_.js";import"./InputLabel-Cn-JBOFp.js";import"./FormLabel-J1ZmMUM1.js";import"./FormHelperText-BYthMsqm.js";import"./Collapse-DrBAZrf0.js";import"./noop-DX6rZLP_.js";import"./isEqual-CSeg9Uiq.js";import"./_getTag-wZmIsRPD.js";import"./HelpTwoTone-DfIjOzgb.js";import"./SynapseConstants-BzHhhFhS.js";import"./useQuery-DUgtzxZD.js";import"./SkeletonTable-CgpiacY2.js";import"./times-Bj8erGIf.js";import"./toInteger-Dz1HtPbN.js";import"./isSymbol-BaLaqVNf.js";import"./ToastMessage-DnGjsI-E.js";import"./FullWidthAlert-T2yM82RP.js";import"./Alert-CXVLc8vo.js";import"./Close-NLvB7XHm.js";import"./Stack-CAodq4L2.js";import"./useThemeProps-Q4q-imGj.js";import"./getThemeProps-CB6wP6r1.js";import"./AlertTitle-ysdi09bF.js";import"./ClickAwayListener-DHpiF-gd.js";import"./uniqueId-CZXu24eu.js";import"./toString-c2hWB_jG.js";import"./CSSTransition-9PNegUcz.js";import"./Divider-O8fAU7t3.js";import"./Card-D1YioRop.js";import"./Avatar-DYi9SycJ.js";import"./Chip-DWuER_PH.js";import"./fetchWithExponentialTimeout-UV9FrpR8.js";import"./tinycolor-Begke6kS.js";import"./calculateFriendlyFileSize-BvXrAxXk.js";import"./InfoTwoTone-Cd8riuW_.js";import"./chunk-AYJ5UCUI-C9vLqfh1.js";import"./cloneDeep-D1-JOxW9.js";import"./index-Ceq_OOHv.js";import"./react-YFCJrhYh.js";import"./localizedFormat-azfYfaOr.js";import"./utc-XgD-yDfy.js";import"./waitForAsyncResult-Cb_jNxh0.js";import"./queryOptions-C9woPjwX.js";import"./Popper-DIHHlKWR.js";const U=z(o.jsx("path",{d:"M19 5v9h-5v5H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10l6-6V5c0-1.1-.9-2-2-2m-7 11H7v-2h5zm5-4H7V8h10z"}));function l(t){const r=t.taskProperties;if(r==null)throw new Error("CurationTask is missing taskProperties");switch(r.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return r.fileViewId;case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return r.recordSetId;default:throw new Error(`Unknown taskProperties concreteType: ${r.concreteType}`)}}try{l.displayName="getGridSourceIdForTask",l.__docgenInfo={description:`For a given CurationTask that could be used to create a GridSession, return the ID of the source entity that would be
used to create the GridSession.`,displayName:"getGridSourceIdForTask",props:{taskId:{defaultValue:null,description:`The unique identifier issued to this task when it was created.
@memberof CurationTask`,name:"taskId",required:!1,type:{name:"{number}"}},dataType:{defaultValue:null,description:`Will match the data type that a contributor plans to contribute.  The dataType must be unique within a project.
@memberof CurationTask`,name:"dataType",required:!1,type:{name:"{string}"}},projectId:{defaultValue:null,description:`The synId of the project.
@memberof CurationTask`,name:"projectId",required:!1,type:{name:"{string}"}},instructions:{defaultValue:null,description:`Instructions to the data contributor.
@memberof CurationTask`,name:"instructions",required:!1,type:{name:"{string}"}},etag:{defaultValue:null,description:`Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.
@memberof CurationTask`,name:"etag",required:!1,type:{name:"{string}"}},createdOn:{defaultValue:null,description:"@memberof CurationTask",name:"createdOn",required:!1,type:{name:"{string}"}},modifiedOn:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedOn",required:!1,type:{name:"{string}"}},createdBy:{defaultValue:null,description:"@memberof CurationTask",name:"createdBy",required:!1,type:{name:"{string}"}},modifiedBy:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedBy",required:!1,type:{name:"{string}"}},taskProperties:{defaultValue:null,description:"@memberof CurationTask",name:"taskProperties",required:!1,type:{name:"{CurationTaskProperties}"}}}}}catch{}function W(t,r){const{synapseClient:e,keyFactory:i}=C();return B({...r,queryKey:i.getCurationTaskListKey(t),queryFn:a=>e.curationTaskServicesClient.postRepoV1CurationTaskList({listCurationTaskRequest:{projectId:t,nextPageToken:a.pageParam}}),initialPageParam:void 0,getNextPageParam:a=>a.nextPageToken})}function K(t,r){return`${I(w.PORTAL_ENDPOINT)}Synapse:${t}`}function J(t){return`${I(w.PORTAL_ENDPOINT)}Grid:${t}`}function u(t){switch(t.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",initialQuery:{sql:`SELECT * FROM ${t.fileViewId}`}};case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",recordSetId:t.recordSetId};default:throw new Error(`Unknown taskProperties concreteType: ${t.concreteType}`)}}try{u.displayName="getCreateGridRequestForMetadataTask",u.__docgenInfo={description:"Generates a CreateGridRequest for a metadata task based on its properties.",displayName:"getCreateGridRequestForMetadataTask",props:{concreteType:{defaultValue:null,description:`Indicates which implementation of CurationTaskProperties this object represents. Possible values include: 'org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties' and 'org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties'.
@memberof FileBasedMetadataTaskProperties
@memberof RecordBasedMetadataTaskProperties`,name:"concreteType",required:!0,type:{name:`{string}
{string}`}},uploadFolderId:{defaultValue:null,description:`The synId of the folder where data files of this type are to be uploaded.
@memberof FileBasedMetadataTaskProperties`,name:"uploadFolderId",required:!1,type:{name:"{string}"}},fileViewId:{defaultValue:null,description:`The synId of the FileView that shows all data of this type.  This FileView will be used to start new grid sessions for file annotation curation.
@memberof FileBasedMetadataTaskProperties`,name:"fileViewId",required:!1,type:{name:"{string}"}},recordSetId:{defaultValue:null,description:`The synId of the RecordSet that will contain all record-based metadata for a specific type.  This RecordSet will be used to start new grid sessions for both 'upsert' and record-based curation for this type.
@memberof RecordBasedMetadataTaskProperties`,name:"recordSetId",required:!1,type:{name:"{string}"}}}}}catch{}async function X(t,r){const{queryClient:e}=r,{keyFactory:i,synapseClient:a}=r.synapseContext,s=await e.fetchQuery(L({sourceId:t},{keyFactory:i,synapseClient:a}));return D(s.page)?null:s.page[0]}function Y(){const t=A(),r=C(),{mutateAsync:e}=v();return S({mutationFn:async({sourceId:i,createRequest:a})=>{const s=await X(i,{queryClient:t,synapseContext:r});return s??(await e(a)).gridSession}})}function Z(){const{mutateAsync:t}=Y();return S({mutationFn:async({curationTask:r})=>{const e=r.taskProperties;if(e==null)throw new Error("CurationTask is missing taskProperties");const i=l(r),a=u(e);return await t({sourceId:i,createRequest:a})}})}function f(t){const{curationTask:r}=t,{mutateAsync:e,isPending:i}=Z(),a=P.useCallback(async()=>{const n=await e({curationTask:r}),d=J(n.sessionId);window.open(d,"_blank","noopener")},[r,e]),s=o.jsx(H,{title:"Open a Working Copy document to edit metadata",children:o.jsx($,{size:"small",startIcon:o.jsx(U,{}),loading:i,onClick:()=>{a()},children:"Working Copy"})});return o.jsx(o.Fragment,{children:s})}try{f.displayName="MetadataTaskTableActionCell",f.__docgenInfo={description:`Handles rendering the 'Actions' cell in the Metadata Task table, which provides buttons for the user
to accomplish the actions they can take on a Metadata Task, such as opening a data grid for the entity referenced
by the task.`,displayName:"MetadataTaskTableActionCell",props:{curationTask:{defaultValue:null,description:"",name:"curationTask",required:!0,type:{name:"CurationTask"}},canEdit:{defaultValue:null,description:"",name:"canEdit",required:!0,type:{name:"boolean"}}}}}catch{}function ee(t){const r=q();return[r.accessor("dataType",{header:e=>o.jsx(m,{...e,title:"Data Type"}),cell:({row:e,getValue:i})=>{const a=l(e.original);return o.jsx(Q,{href:K(a),children:i()})},enableSorting:!1,enableColumnFilter:!1}),r.accessor("instructions",{header:e=>o.jsx(m,{...e,title:"Instructions"}),cell:({getValue:e})=>o.jsx("p",{children:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedBy",{header:e=>o.jsx(m,{...e,title:"Modified By"}),cell:({getValue:e})=>o.jsx(R,{userId:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedOn",{header:e=>o.jsx(m,{...e,title:"Modified On"}),cell:({getValue:e})=>N(O(e())),enableSorting:!1,enableColumnFilter:!1}),r.display({id:"actions",header:e=>o.jsx(m,{...e,title:"Actions"}),cell:({row:e})=>o.jsx(f,{curationTask:e.original,canEdit:t})})]}function g(t){var T;const{projectId:r}=t,{data:e,hasNextPage:i,fetchNextPage:a,isLoading:s,isFetchingNextPage:n}=W(r),{data:d,isLoading:_}=E(r),M=((T=d==null?void 0:d.permissions)==null?void 0:T.canEdit)??!1,x=P.useMemo(()=>(e==null?void 0:e.pages.flatMap(p=>p.page))??[],[e]);return{table:j({data:x,columns:ee(M),getRowId:p=>String(p.taskId),getCoreRowModel:G(),columnResizeMode:"onChange",manualSorting:!1,meta:{getWrapInExpandableTd:p=>p.column.id==="instructions"}}),isLoading:s||_,hasNextPage:i,fetchNextPage:a,isFetchingNextPage:n}}try{g.displayName="useMetadataTaskTable",g.__docgenInfo={description:"Provides a table instance and loading states for displaying metadata curation tasks associated with a project.",displayName:"useMetadataTaskTable",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}function y(t){const{projectId:r}=t,{table:e,isLoading:i,hasNextPage:a,fetchNextPage:s,isFetchingNextPage:n}=g({projectId:r});return o.jsx(F,{table:o.jsx(V,{table:e,styledTableContainerProps:{sx:{my:2}}}),isLoading:i,isEmpty:!i&&e.getRowModel().rows.length===0,hasNextPage:a,onFetchNextPageClicked:()=>{s()},isFetchingNextPage:n})}try{y.displayName="MetadataTasksPage",y.__docgenInfo={description:"Displays a list of metadata curation tasks for a particular project, with actions that can be performed on each task.",displayName:"MetadataTasksPage",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}const Or={title:"Synapse/Entity/MetadataTaskTable",component:y},c={name:"MetadataTaskTable",args:{projectId:"syn12554559"},parameters:{stack:"development"}};var k,h,b;c.parameters={...c.parameters,docs:{...(k=c.parameters)==null?void 0:k.docs,source:{originalSource:`{
  name: 'MetadataTaskTable',
  args: {
    projectId: 'syn12554559'
  },
  parameters: {
    stack: 'development'
  }
}`,...(b=(h=c.parameters)==null?void 0:h.docs)==null?void 0:b.source}}};const Lr=["Demo"];export{c as Demo,Lr as __namedExportsOrder,Or as default};
