import{v as o}from"./VerificationSubmission-CDh9xETu.js";import{g as u,be as d,bf as l,B as f,bg as S,M as O}from"./useFiles-GseVYpjW.js";import"./StringUtils-CsrYFBZo.js";import{h as i,H as n}from"./index-CRwZzm2I.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-F21eAFiI.js";import"./SynapseConstants-BecqIzhK.js";import"./OrientationBanner-CMmM2nyC.js";import"./index-qKI0Fo62.js";import"./index-DUnR2wGU.js";import"./iframe-DxIMUiis.js";import"./spreadSx-CwcO6WA9.js";import"./react-BtLSKeTf.js";import"./FullWidthAlert-CgwAdh3k.js";import"./Alert-OcKEIYp6.js";import"./createTheme-BeLomVuw.js";import"./DefaultPropsProvider-Ch4-9Ppr.js";import"./useSlot-QI6ENMq9.js";import"./useForkRef-12BzkMWI.js";import"./createSimplePaletteValueFilter-DXXCLVZW.js";import"./createSvgIcon-BP5oj4Nx.js";import"./Close-CNp0-j0C.js";import"./IconButton-CxtjwAaM.js";import"./useTimeout-NW5ssq_A.js";import"./ButtonBase-cWAJQrxa.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-B4vna3RV.js";import"./Paper-D5jfsf_T.js";import"./useTheme-DqJVsaV_.js";import"./useTheme-Bz9krQHR.js";import"./Stack-DiJhusha.js";import"./extendSxProp-CrNYGNvh.js";import"./getThemeProps-DmCS3g9S.js";import"./Box-DdkmxDon.js";import"./AlertTitle-D82A8tMJ.js";import"./Typography-D4ivI4uJ.js";import"./index-DSC2q4_Y.js";import"./ClickAwayListener-XLfp0UFq.js";import"./getReactElementRef-CFI6Vxtr.js";import"./index-C70ee6RX.js";import"./index-BcO9ILEt.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-BqG2xl5N.js";import"./Tooltip-D3bJvEAc.js";import"./index-CNaEswH4.js";import"./useControlled-BEh-GGuG.js";import"./Popper-CZN6YGZz.js";import"./Button-B3GtIfhR.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-BoJvFqc3.js";import"./QueryClientProvider-CmpDJ9Jl.js";import"./Link-BLcNJuX4.js";import"./Collapse-DOavcrSg.js";import"./_baseUniq-BhG86eyQ.js";import"./_Uint8Array-DhmTz7H2.js";import"./isArray-CHk-r7uL.js";import"./_getTag-C-hzITuP.js";import"./isEqual-CRTjFSJk.js";import"./merge-DwBHZN9j.js";import"./_initCloneObject-Uix_53RU.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-BiglsW2E.js";import"./inputBaseClasses-C0Gy_uNc.js";import"./calculateFriendlyFileSize-DgnhvtUi.js";import"./CheckCircleTwoTone-BuvGG69W.js";import"./InfoTwoTone-DXv8Re3u.js";import"./useMutation-4FuFtcke.js";import"./dayjs.min-DjHfNNqw.js";import"./chunk-AYJ5UCUI-C211ZVfw.js";import"./cloneDeep-NhLAab3Z.js";import"./Skeleton-BpQQLQwA.js";import"./SkeletonButton-qO6NDYYY.js";import"./SkeletonInlineBlock-BSEr0iih.js";import"./SkeletonTable-C84jxVAM.js";import"./times-CyZ6BRW1.js";import"./toInteger-rN0-b999.js";import"./isSymbol-Ba5uo1Dt.js";import"./SkeletonParagraph-C3kdU6O9.js";import"./MarkdownSynapse-CH79z1jT.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(f.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=S(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
