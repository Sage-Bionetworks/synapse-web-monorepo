import{j as o}from"./jsx-runtime-D_zvdyIk.js";import{I as F}from"./InfiniteTableLayout-C3F4KywL.js";import{u as j,c as q,g as G,S as V}from"./StyledTanStackTable-BdJmk2j9.js";import{C as m}from"./ColumnHeader-BvlpGW8v.js";import{U as R}from"./UserBadge-93nIsCK4.js";import{l as C,g as I,B as w}from"./useFiles-Cgzy-UOs.js";import"./OrientationBanner-B-ePgMgA.js";import{r as P}from"./index-DYU4zQP4.js";import"./VerificationSubmission-BDh1zA9f.js";import"./StringUtils-C95LMFI-.js";import{u as B}from"./useInfiniteQuery-BsJyTvbM.js";import{u as E}from"./useEntityBundle-DflWZIse.js";import{f as N}from"./DateFormatter-D0hH7c5e.js";import{d as O}from"./dayjs.min-cfMBjx7E.js";import{u as S}from"./useMutation-LE6k3MXY.js";import{g as L,u as v}from"./useGridSession--ClPZifv.js";import{i as D}from"./_baseUniq-CBD_yH4a.js";import{u as A}from"./QueryClientProvider-CSdz-HYV.js";import{T as H}from"./Tooltip-B8bILZi4.js";import{B as $}from"./Button-BzugqlFq.js";import{c as z}from"./createSvgIcon-CJq3GPug.js";import{L as Q}from"./Link-DK5p9S4e.js";import"./LoadingScreen-5dV0-KWf.js";import"./Backdrop-CIlG7ePs.js";import"./createTheme-D6vtmGls.js";import"./useSlot-BgeUbv5P.js";import"./useForkRef-B_b-SuM8.js";import"./DefaultPropsProvider-D79KYO17.js";import"./Fade-Sl0_f7QX.js";import"./useTheme-B6btaWkK.js";import"./useTheme-jKwAIb8E.js";import"./getReactElementRef-ae5BIBIv.js";import"./useTimeout-DSZInHOh.js";import"./index-DLMJWAwA.js";import"./iframe-Dzw5MRYT.js";import"./index-Q7xPuOjn.js";import"./Box-39RMP0Tq.js";import"./extendSxProp-jOxRgKts.js";import"./Typography-D_DaiChI.js";import"./index-Dar7vQJe.js";import"./createSimplePaletteValueFilter-DiVtTFlb.js";import"./LinearProgress-CFkLgso2.js";import"./index-B6fN69mf.js";import"./StyledTableContainer-DcOdFAvg.js";import"./merge-DNRE-STY.js";import"./_Uint8Array-TncfCM6A.js";import"./isArray-C9PAhTKa.js";import"./_initCloneObject-c2L5_zs5.js";import"./identity-DKeuBCMA.js";import"./ExpandCollapseButton-Cg6UZQun.js";import"./IconSvg-CVHrIuGk.js";import"./spreadSx-CwcO6WA9.js";import"./LayersTwoTone-SCwBf29Q.js";import"./ContentCopyTwoTone-f0IxEWTE.js";import"./HelpOutlineTwoTone--8XyHs19.js";import"./ErrorOutlined-C-BLvBPV.js";import"./GetAppTwoTone-CZjjAtoG.js";import"./InfoOutlined-CWG00Yai.js";import"./PhoneTwoTone-LU9BTxl5.js";import"./DeleteTwoTone-BPHgcUyp.js";import"./CheckCircleTwoTone-OWQRjOdu.js";import"./index-C87De7eR.js";import"./index-BW4nvg8e.js";import"./const-BP60AzNb.js";import"./Skeleton-yhG155b8.js";import"./EnumFacetFilterUI-Q4F1Vnqo.js";import"./FacetFilterHeader-B825InLL.js";import"./IconButton-Do5oKPlN.js";import"./ButtonBase-Cu3m8cFt.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-N97qRnH8.js";import"./FormControlLabel-Dvfq9z2F.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-8fUkk9TB.js";import"./Checkbox-B4yr_tyB.js";import"./SwitchBase-DIFtM2Rb.js";import"./useControlled-DdNq8r6Y.js";import"./mergeSlotProps-E6ylgRuh.js";import"./Radio-CvNuE8df.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Select-D3zVjZ8k.js";import"./Menu-DE-ag9mx.js";import"./Grow-DMQBUM0r.js";import"./Popover-CDmsq-U8.js";import"./isHostComponent-DVu5iVWx.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Modal-BYDCVB3z.js";import"./getScrollbarSize-CaCM53D3.js";import"./Paper-BzOGyJwo.js";import"./MenuList-Cuuau29l.js";import"./List-DJMV-W8Q.js";import"./FormControl-D5LTBeJr.js";import"./isMuiElement-B1NWuFtY.js";import"./inputBaseClasses-snNCF3aG.js";import"./InputBase--G7daRsZ.js";import"./Input-Sdgc4Zn2.js";import"./MenuItem-Dm-G9JKq.js";import"./dividerClasses-CBxIztQm.js";import"./TextField-CZ9n3YAt.js";import"./InputLabel-CoKqIu5I.js";import"./FormLabel-Be9MLH6Z.js";import"./FormHelperText-vg6WbVdw.js";import"./Collapse-Db_2nbsu.js";import"./noop-DX6rZLP_.js";import"./isEqual-DDB_N-aI.js";import"./_getTag-bNxNCrK-.js";import"./HelpTwoTone-BG1Wmlsa.js";import"./SynapseConstants-BDAc_b3v.js";import"./useQuery-E5rXX0Vh.js";import"./SkeletonTable-DSGln7MI.js";import"./times-BlUVaLCq.js";import"./toInteger-CkXpGADb.js";import"./isSymbol-DAxmQ6M7.js";import"./ToastMessage-uSNqoqh9.js";import"./FullWidthAlert-DHE2a9_E.js";import"./Alert-DCImWyvQ.js";import"./Close-ENGBsyeS.js";import"./Stack-DTY49AsT.js";import"./useThemeProps-BwYz91DR.js";import"./getThemeProps-DTKeK2V7.js";import"./AlertTitle-wUZCnToq.js";import"./ClickAwayListener-BnxSEmfx.js";import"./uniqueId-CDyS7OYF.js";import"./toString-ZvTL8d5u.js";import"./CSSTransition-rQbdVApR.js";import"./Divider-FPiqLPVt.js";import"./Card-BRn5ZWyZ.js";import"./Avatar-CNViEm0-.js";import"./Chip-DRbufFw2.js";import"./fetchWithExponentialTimeout-UV9FrpR8.js";import"./tinycolor-Begke6kS.js";import"./calculateFriendlyFileSize-DlLZ7LPJ.js";import"./InfoTwoTone-8gb8-LI8.js";import"./chunk-AYJ5UCUI-CRYqNbdW.js";import"./cloneDeep-BLVmDque.js";import"./index-gmBK_iDy.js";import"./react-vlrGuRz8.js";import"./localizedFormat-CKKrofqb.js";import"./utc-oW_V0tWv.js";import"./waitForAsyncResult-Cb_jNxh0.js";import"./queryOptions-C9woPjwX.js";import"./Popper-tgLzwkuw.js";const U=z(o.jsx("path",{d:"M19 5v9h-5v5H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h10l6-6V5c0-1.1-.9-2-2-2m-7 11H7v-2h5zm5-4H7V8h10z"}));function l(t){const r=t.taskProperties;if(r==null)throw new Error("CurationTask is missing taskProperties");switch(r.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return r.fileViewId;case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return r.recordSetId;default:throw new Error(`Unknown taskProperties concreteType: ${r.concreteType}`)}}try{l.displayName="getGridSourceIdForTask",l.__docgenInfo={description:`For a given CurationTask that could be used to create a GridSession, return the ID of the source entity that would be
used to create the GridSession.`,displayName:"getGridSourceIdForTask",props:{taskId:{defaultValue:null,description:`The unique identifier issued to this task when it was created.
@memberof CurationTask`,name:"taskId",required:!1,type:{name:"{number}"}},dataType:{defaultValue:null,description:`Will match the data type that a contributor plans to contribute.  The dataType must be unique within a project.
@memberof CurationTask`,name:"dataType",required:!1,type:{name:"{string}"}},projectId:{defaultValue:null,description:`The synId of the project.
@memberof CurationTask`,name:"projectId",required:!1,type:{name:"{string}"}},instructions:{defaultValue:null,description:`Instructions to the data contributor.
@memberof CurationTask`,name:"instructions",required:!1,type:{name:"{string}"}},etag:{defaultValue:null,description:`Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an entity is out-of-date.
@memberof CurationTask`,name:"etag",required:!1,type:{name:"{string}"}},createdOn:{defaultValue:null,description:"@memberof CurationTask",name:"createdOn",required:!1,type:{name:"{string}"}},modifiedOn:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedOn",required:!1,type:{name:"{string}"}},createdBy:{defaultValue:null,description:"@memberof CurationTask",name:"createdBy",required:!1,type:{name:"{string}"}},modifiedBy:{defaultValue:null,description:"@memberof CurationTask",name:"modifiedBy",required:!1,type:{name:"{string}"}},taskProperties:{defaultValue:null,description:"@memberof CurationTask",name:"taskProperties",required:!1,type:{name:"{CurationTaskProperties}"}}}}}catch{}function W(t,r){const{synapseClient:e,keyFactory:i}=C();return B({...r,queryKey:i.getCurationTaskListKey(t),queryFn:a=>e.curationTaskServicesClient.postRepoV1CurationTaskList({listCurationTaskRequest:{projectId:t,nextPageToken:a.pageParam}}),initialPageParam:void 0,getNextPageParam:a=>a.nextPageToken})}function K(t,r){return`${I(w.PORTAL_ENDPOINT)}Synapse:${t}`}function J(t){return`${I(w.PORTAL_ENDPOINT)}Grid:${t}`}function u(t){switch(t.concreteType){case"org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",initialQuery:{sql:`SELECT * FROM ${t.fileViewId}`}};case"org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties":return{concreteType:"org.sagebionetworks.repo.model.grid.CreateGridRequest",recordSetId:t.recordSetId};default:throw new Error(`Unknown taskProperties concreteType: ${t.concreteType}`)}}try{u.displayName="getCreateGridRequestForMetadataTask",u.__docgenInfo={description:"Generates a CreateGridRequest for a metadata task based on its properties.",displayName:"getCreateGridRequestForMetadataTask",props:{concreteType:{defaultValue:null,description:`Indicates which implementation of CurationTaskProperties this object represents. Possible values include: 'org.sagebionetworks.repo.model.curation.metadata.FileBasedMetadataTaskProperties' and 'org.sagebionetworks.repo.model.curation.metadata.RecordBasedMetadataTaskProperties'.
@memberof FileBasedMetadataTaskProperties
@memberof RecordBasedMetadataTaskProperties`,name:"concreteType",required:!0,type:{name:`{string}
{string}`}},uploadFolderId:{defaultValue:null,description:`The synId of the folder where data files of this type are to be uploaded.
@memberof FileBasedMetadataTaskProperties`,name:"uploadFolderId",required:!1,type:{name:"{string}"}},fileViewId:{defaultValue:null,description:`The synId of the FileView that shows all data of this type.  This FileView will be used to start new grid sessions for file annotation curation.
@memberof FileBasedMetadataTaskProperties`,name:"fileViewId",required:!1,type:{name:"{string}"}},recordSetId:{defaultValue:null,description:`The synId of the RecordSet that will contain all record-based metadata for a specific type.  This RecordSet will be used to start new grid sessions for both 'upsert' and record-based curation for this type.
@memberof RecordBasedMetadataTaskProperties`,name:"recordSetId",required:!1,type:{name:"{string}"}}}}}catch{}async function X(t,r){const{queryClient:e}=r,{keyFactory:i,synapseClient:a}=r.synapseContext,s=await e.fetchQuery(L({sourceId:t},{keyFactory:i,synapseClient:a}));return D(s.page)?null:s.page[0]}function Y(){const t=A(),r=C(),{mutateAsync:e}=v();return S({mutationFn:async({sourceId:i,createRequest:a})=>{const s=await X(i,{queryClient:t,synapseContext:r});return s??(await e(a)).gridSession}})}function Z(){const{mutateAsync:t}=Y();return S({mutationFn:async({curationTask:r})=>{const e=r.taskProperties;if(e==null)throw new Error("CurationTask is missing taskProperties");const i=l(r),a=u(e);return await t({sourceId:i,createRequest:a})}})}function f(t){const{curationTask:r}=t,{mutateAsync:e,isPending:i}=Z(),a=P.useCallback(async()=>{const n=await e({curationTask:r}),d=J(n.sessionId);window.open(d,"_blank","noopener")},[r,e]),s=o.jsx(H,{title:"Open a Working Copy document to edit metadata",children:o.jsx($,{size:"small",startIcon:o.jsx(U,{}),loading:i,onClick:()=>{a()},children:"Working Copy"})});return o.jsx(o.Fragment,{children:s})}try{f.displayName="MetadataTaskTableActionCell",f.__docgenInfo={description:`Handles rendering the 'Actions' cell in the Metadata Task table, which provides buttons for the user
to accomplish the actions they can take on a Metadata Task, such as opening a data grid for the entity referenced
by the task.`,displayName:"MetadataTaskTableActionCell",props:{curationTask:{defaultValue:null,description:"",name:"curationTask",required:!0,type:{name:"CurationTask"}},canEdit:{defaultValue:null,description:"",name:"canEdit",required:!0,type:{name:"boolean"}}}}}catch{}function ee(t){const r=q();return[r.accessor("dataType",{header:e=>o.jsx(m,{...e,title:"Data Type"}),cell:({row:e,getValue:i})=>{const a=l(e.original);return o.jsx(Q,{href:K(a),children:i()})},enableSorting:!1,enableColumnFilter:!1}),r.accessor("instructions",{header:e=>o.jsx(m,{...e,title:"Instructions"}),cell:({getValue:e})=>o.jsx("p",{children:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedBy",{header:e=>o.jsx(m,{...e,title:"Modified By"}),cell:({getValue:e})=>o.jsx(R,{userId:e()}),enableSorting:!1,enableColumnFilter:!1}),r.accessor("modifiedOn",{header:e=>o.jsx(m,{...e,title:"Modified On"}),cell:({getValue:e})=>N(O(e())),enableSorting:!1,enableColumnFilter:!1}),r.display({id:"actions",header:e=>o.jsx(m,{...e,title:"Actions"}),cell:({row:e})=>o.jsx(f,{curationTask:e.original,canEdit:t})})]}function g(t){var T;const{projectId:r}=t,{data:e,hasNextPage:i,fetchNextPage:a,isLoading:s,isFetchingNextPage:n}=W(r),{data:d,isLoading:_}=E(r),M=((T=d==null?void 0:d.permissions)==null?void 0:T.canEdit)??!1,x=P.useMemo(()=>(e==null?void 0:e.pages.flatMap(p=>p.page))??[],[e]);return{table:j({data:x,columns:ee(M),getRowId:p=>String(p.taskId),getCoreRowModel:G(),columnResizeMode:"onChange",manualSorting:!1,meta:{getWrapInExpandableTd:p=>p.column.id==="instructions"}}),isLoading:s||_,hasNextPage:i,fetchNextPage:a,isFetchingNextPage:n}}try{g.displayName="useMetadataTaskTable",g.__docgenInfo={description:"Provides a table instance and loading states for displaying metadata curation tasks associated with a project.",displayName:"useMetadataTaskTable",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}function y(t){const{projectId:r}=t,{table:e,isLoading:i,hasNextPage:a,fetchNextPage:s,isFetchingNextPage:n}=g({projectId:r});return o.jsx(F,{table:o.jsx(V,{table:e,styledTableContainerProps:{sx:{my:2}}}),isLoading:i,isEmpty:!i&&e.getRowModel().rows.length===0,hasNextPage:a,onFetchNextPageClicked:()=>{s()},isFetchingNextPage:n})}try{y.displayName="MetadataTasksPage",y.__docgenInfo={description:"Displays a list of metadata curation tasks for a particular project, with actions that can be performed on each task.",displayName:"MetadataTasksPage",props:{projectId:{defaultValue:null,description:"",name:"projectId",required:!0,type:{name:"string"}}}}}catch{}const Or={title:"Synapse/Entity/MetadataTaskTable",component:y},c={name:"MetadataTaskTable",args:{projectId:"syn12554559"},parameters:{stack:"development"}};var k,h,b;c.parameters={...c.parameters,docs:{...(k=c.parameters)==null?void 0:k.docs,source:{originalSource:`{
  name: 'MetadataTaskTable',
  args: {
    projectId: 'syn12554559'
  },
  parameters: {
    stack: 'development'
  }
}`,...(b=(h=c.parameters)==null?void 0:h.docs)==null?void 0:b.source}}};const Lr=["Demo"];export{c as Demo,Lr as __namedExportsOrder,Or as default};
