import{l}from"./index-9f_cw2Bh.js";import{U as f,ab as E,ac as y,ad as D,ae as $,af as g,ag as v,ah as _,ai as k}from"./useFiles-dge585EC.js";import{n as T}from"./RegularExpressions-vjpKT7U4.js";import{m as L,a as w}from"./index-qMWpmEiO.js";import{a as N}from"./mockEntity-Cfnr2nE7.js";import{U as I}from"./index-BNbykmw2.js";import{m as h}from"./mockSchema-BWwGxRu6.js";import{u as b}from"./uniqueId-CSw6ftlJ.js";const j=1111,C=2222,A=3333,O=4444,m={storageLocationId:f,uploadType:I.S3,banner:"",concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination",projectStorageLocationUsage:{maxAllowedFileBytes:1024*1024*1024*100,sumFileBytes:0,storageLocationId:f,isOverLimit:!1}},S={...m,baseKey:"exampleS3BaseKey",stsEnabled:!0,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"},U={...S,storageLocationId:j,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalS3Bucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalS3UploadDestination"},M={...m,baseKey:"exampleGCPBaseKey",storageLocationId:C,uploadType:I.GOOGLECLOUDSTORAGE,bucket:"myExternalGCPBucket",concreteType:"org.sagebionetworks.repo.model.file.ExternalGoogleCloudUploadDestination"},B={...m,storageLocationId:A,uploadType:I.HTTPS,url:"https://myurl.fake",concreteType:"org.sagebionetworks.repo.model.file.ExternalUploadDestination"},R={...m,storageLocationId:O,uploadType:I.HTTPS,endpointUrl:"https://my-endpoint.fake",bucket:"myExternalObjectStoreBucket",keyPrefixUUID:"uuidKeyPrefix",concreteType:"org.sagebionetworks.repo.model.file.ExternalObjectStoreUploadDestination"},G=[S,U,M,B,R];function P(r){const n=r.map(T);return w.filter(a=>n.includes(T(a.id)))}function u(r){const n=P([r]);if(n.length!=0)return n[0]}function K(r,n){return l.rest.post(`${r}${k(":entityId")}`,async(a,o,s)=>{let e=404,t={reason:`Mock Service worker could not find a mock entity bundle with ID ${a.params.entityId}`};{const i=u(a.params.entityId);i!=null&&i.bundle&&(t=i.bundle,e=200)}return o(s.status(e),s.json(t))})}function H(r,n){return l.rest.post(`${r}${k(":entityId",":versionNumber")}`,async(a,o,s)=>{const e=a.params.entityId,t=parseInt(a.params.versionNumber);let i=404,c={reason:`Mock Service worker could not find a mock entity bundle with ID ${e}`};{const d=u(e);if(d){const p=d.bundle;d.versions&&d.versions[t]?c={...p,entity:d.versions[t]}:c=p,i=200}}return o(s.status(i),s.json(c))})}const Q=r=>[l.rest.post(`${r}${E}`,async(n,a,o)=>{let s=200;const e=await n.json();let t={reason:"..."};return e?e.name===N?(t.reason="Invalid project name",s=403):t={id:b("syn"),...e}:(s=400,t={reason:`Mock service worker received the following malformed body for PUT ${E} : ${JSON.stringify(e)}`}),a(o.status(s),o.json(t))}),l.rest.get(`${r}${y(":entityId")}`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find a mock entity with ID ${n.params.entityId}`};const t=u(n.params.entityId);return t&&(e=t.entity,s=200),a(o.status(s),o.json(e))}),l.rest.get(`${r}${D(":entityId")}`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find mock entity versions for ID ${n.params.entityId}`};const t=u(n.params.entityId);return t&&t.versionInfo&&(e={results:t.versionInfo},s=200),a(o.status(s),o.json(e))}),l.rest.get(`${r}${$(":entityId",":versionNumber")}`,async(n,a,o)=>{let s=404;const e=n.params.entityId,t=n.params.versionNumber.toString(),i=parseInt(t);let c={reason:`Mock Service worker could not find a mock versioned entity with ID ${e}.${t}`};const d=u(n.params.entityId);return d&&d.versions&&d.versions[i]&&(c=d.versions[i],s=200),a(o.status(s),o.json(c))}),K(r),H(r),l.rest.get(`${r}${g(":entityId")}`,async(n,a,o)=>a(o.status(200),o.json(h))),l.rest.get(`${r}${v(":entityId")}`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const t=u(n.params.entityId);return t!=null&&t.json&&(e=t.json,s=200),a(o.status(s),o.json(e))}),l.rest.post(`${r}${_}`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`};const i=n.body.references.map(c=>{var p;const d=(p=u(c.targetId))==null?void 0:p.entityHeader;if(d)return{...d,id:c.targetId}}).filter(c=>!!c);return i&&(e={results:i},s=200),a(o.status(s),o.json(e))}),l.rest.get(`${r}${y(":entityId")}/path`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find a mock entity path using ID ${n.params.entityId}`};const t=u(n.params.entityId);return t&&t.path&&(e=t.path,s=200),a(o.status(s),o.json(e))}),l.rest.get(`${r}/file/v1/entity/:id/uploadDestination`,async(n,a,o)=>{const s=m;return a(o.status(200),o.json(s))}),l.rest.get(`${r}/file/v1/entity/:id/uploadDestination/:storageLocationId`,async(n,a,o)=>{let s=404,e={reason:`Mock Service worker could not find an uploadDestination using storageLocationId ${n.params.storageLocationId}`};const t=G.find(i=>Number(n.params.storageLocationId)===i.storageLocationId);return t&&(e=t,s=200),a(o.status(s),o.json(e))}),l.rest.get(`${r}/repo/v1/projects`,async(n,a,o)=>{const s={results:L.map(e=>({name:e.name,id:e.id,lastActivity:"2024-01-04T21:11:59.000Z",modifiedBy:parseInt(e.entity.modifiedBy),modifiedOn:e.entity.modifiedOn}))};return a(o.status(200),o.json(s))}),l.rest.post(`${r}${y(":entityId")}/acl`,async(n,a,o)=>{var i;const s=u(n.params.entityId);let e,t;return s?(i=s.bundle)!=null&&i.accessControlList?(e=403,t={reason:"Resource already has an ACL."}):(t=await n.json(),e=201):(e=404,t={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`}),a(o.status(e),o.json(t))}),l.rest.put(`${r}${y(":entityId")}/acl`,async(n,a,o)=>{var i;const s=u(n.params.entityId);let e,t;return s?(i=s==null?void 0:s.bundle)!=null&&i.accessControlList?(t=await n.json(),e=200):(t={reason:"Cannot update ACL for a resource which inherits its permissions."},e=403):(e=404,t={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`}),a(o.status(e),o.json(t))}),l.rest.delete(`${r}${y(":entityId")}/acl`,async(n,a,o)=>{var i;const s=u(n.params.entityId);let e,t;return s?(i=s==null?void 0:s.bundle)!=null&&i.accessControlList?(t="",e=200):(t={reason:"Cannot delete ACL for a resource which inherits its permissions."},e=403):(e=404,t={reason:`Mock Service worker could not find a mock entity bundle with ID ${n.params.entityId}`}),a(o.status(e),o.json(t))})];export{Q as g};
