import{l as c}from"./index-CGGsuVLc.js";import{d as S,e as R,E as g,b as l,f}from"./SynapseClient-D4M9LQNp.js";import{O as _,M as I,S as y}from"./index-Pxtlv3yl.js";import{f as p,g as T,M as C,h as q,a as M}from"./mockAccessRequirements-BK_9IO5o.js";import{m}from"./MockSubmission-D8lgzrj3.js";import{M as E}from"./mock_user_profile-DyzXylki.js";const d=new Map,w=e=>[c.rest.get(`${e}${S(":id")}`,async(r,t,n)=>{let s=404,a={reason:`Mock Service worker could not find an access requirement with ID ${r.params.id}`};const o=p.find(i=>i.id.toString()===r.params.id);return o&&(a=o,s=200),t(n.status(s),n.json(a))}),c.rest.get(`${e}${R(":id")}`,async(r,t,n)=>{let s=404,a={reason:`Mock Service worker could not find an access requirement wiki page key with AR ID ${r.params.id}`};const o=T.find(i=>i.ownerObjectType===_.ACCESS_REQUIREMENT&&String(i.ownerObjectId)===r.params.id);return o&&(a=o,s=200),t(n.status(s),n.json(a))})];function $(e){return c.rest.post(`${e}${f}`,async(r,t,n)=>{const s=await r.json();return t(n.status(201),n.json({...s,id:C,etag:q}))})}function j(e){return c.rest.put(`${e}${S(":id")}`,async(r,t,n)=>{const s=await r.json();return t(n.status(200),n.json(s))})}const N=(e,r=":entityId",t=p)=>[c.rest.get(`${e}${g(r)}`,async(n,s,a)=>{const i={results:t,totalNumberOfResults:t.length};return s(a.status(200),a.json(i))})],B=(e,r=[M])=>c.rest.get(`${e}/repo/v1/team/:teamId/accessRequirement`,async(t,n,s)=>{const o={results:r,totalNumberOfResults:r.length};return n(s.status(200),s.json(o))}),b=(e,r)=>(r&&r.forEach(t=>{d.set(t.accessRequirementId,t)}),[c.rest.get(`${e}${l(":id")}`,async(t,n,s)=>{let a;const o=p.find(u=>t.params.id===u.id.toString());let i=d.get(t.params.id);if(i&&(a=i),!a&&o){const u=o.concreteType===I;a={accessRequirementId:t.params.id,concreteType:u?"org.sagebionetworks.repo.model.dataaccess.ManagedACTAccessRequirementStatus":"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0,currentSubmissionStatus:u?{submissionId:m.id,submittedBy:m.submittedBy,modifiedOn:m.modifiedOn,state:y.APPROVED}:void 0}}const A=a?200:404;return n(s.status(A),s.json(a))})]);function D(e){return c.rest.post(`${e}/repo/v1/accessApproval`,async(r,t,n)=>{const s=await r.json(),a=200,o={...s,id:123,etag:"mock-etag",createdOn:new Date().toISOString(),modifiedOn:new Date().toISOString(),createdBy:String(E),modifiedBy:String(E)};return d.set(String(s.requirementId),{accessRequirementId:String(s.requirementId),concreteType:"org.sagebionetworks.repo.model.dataaccess.BasicAccessRequirementStatus",isApproved:!0}),t(n.status(a),n.json(o))})}function h(e){return[...w(e),$(e),j(e),...N(e),B(e),...b(e),D(e)]}export{N as a,b,h as c,w as g};
