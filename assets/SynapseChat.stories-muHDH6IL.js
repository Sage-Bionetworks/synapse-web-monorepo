import{S as p}from"./SynapseChat-Cz15TpoN.js";import{g as e}from"./chatHandlers-CNzHNrfr.js";import{M as t}from"./SynapseClient-CCAdBNnm.js";import{g as a}from"./userProfileHandlers-Ovo1xEuy.js";import{g as s}from"./entityHandlers-Du1ffIjb.js";import"./jsx-runtime-DoxjgJx5.js";import"./index-Cu9bd8lq.js";import"./SkeletonButton-DkbNcQyC.js";import"./Skeleton-DTl-q8yD.js";import"./createTheme-CSXEdrm4.js";import"./index-GEGPABih.js";import"./styled-DhbZfYjm.js";import"./colorManipulator-CBwtHKAF.js";import"./Button-PewxtVEx.js";import"./ButtonBase-B1PyklHR.js";import"./TransitionGroupContext-C4KIfRep.js";import"./useForkRef-Bm_QQ74L.js";import"./useIsFocusVisible-Lp1_y5xp.js";import"./SkeletonInlineBlock-jATawT4h.js";import"./SkeletonTable-BTaXwfue.js";import"./times-BHmAKp8a.js";import"./_baseTimes-DoMoQz2v.js";import"./identity-DKeuBCMA.js";import"./toInteger-CYyrx-ZX.js";import"./isObject-C3e4t58V.js";import"./isSymbol-BzKS7Qf1.js";import"./isArray-ggc3KxVp.js";import"./Box-CSxp1att.js";import"./SkeletonParagraph-u6_MNbF7.js";import"./utils-BX4sETT_.js";import"./index-BlO3JfGB.js";import"./ListItem-Qj3w5zMb.js";import"./List-pdzHoHkt.js";import"./listItemButtonClasses-DbOSaINN.js";import"./isMuiElement-yx-QWTmT.js";import"./isHostComponent-DVu5iVWx.js";import"./ListItemText-DPvFcSQk.js";import"./listItemTextClasses-T2uoXzON.js";import"./Typography-5kwXSe6k.js";import"./createSvgIcon-RFCzz5wB.js";import"./useMutation-DAMF4D7y.js";import"./useQuery-ChYzlhEH.js";import"./useInfiniteQuery-DdR8RdBU.js";import"./RegularExpressions-DlyA5nPV.js";import"./index-DfM7mfu0.js";import"./OrientationBanner-BsmFKABX.js";import"./FullWidthAlert-DfzvViOl.js";import"./Alert-BjW6UdMW.js";import"./mergeSlotProps-BvStzxp7.js";import"./Paper-BNspCzZ8.js";import"./IconButton-dV1PosdL.js";import"./Stack-B3TCA9BM.js";import"./AlertTitle-CaC9w9kZ.js";import"./Grow-WB7TPAH6.js";import"./ClickAwayListener-Ba-YFlDA.js";import"./ownerDocument-DW-IO8s5.js";import"./Tooltip-BUEOzDXu.js";import"./index-DnaZGQZH.js";import"./useControlled-JEQ1v-P8.js";import"./useId-g68bhPgm.js";import"./TextField-GbZ9n7Oq.js";import"./FormControl-B1FZbS9n.js";import"./useFormControl-vG3XTiAH.js";import"./inputBaseClasses-OXp8mACw.js";import"./ownerWindow-BN2rbQ_G.js";import"./InputLabel-P11qyNNg.js";import"./Select-DpA6F0ME.js";import"./Menu-ak7szB2C.js";import"./Modal-CslmxWuO.js";import"./Backdrop-C5PbY0-B.js";import"./Fade-BnvAYJFW.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./createChainedFunction-BO_9K8Jh.js";import"./MenuList-CzULwBAB.js";import"./ArrowUpward-CZZiNhbL.js";import"./index-CbvVsAEo.js";import"./util-Ct2ns1Jn.js";import"./index-C2pXwPwl.js";import"./asyncJobHandlers-BDfTTJnD.js";import"./BasicMockedCrudService-C1f_5esL.js";import"./cloneDeep-DAplHtCV.js";import"./_baseClone-Mno-BXwZ.js";import"./_Uint8Array-C7sos_v8.js";import"./_Map-BfIf8dAI.js";import"./_initCloneObject-Sqh2TOTy.js";import"./_defineProperty-7gnA7JV6.js";import"./_getAllKeys-C1rIrh0g.js";import"./_getTag-CNUVqXoc.js";import"./isEqual-ChBGaxNe.js";import"./_cacheHas-C64lAb-V.js";import"./_setToArray-CSiN_fit.js";import"./uniqueId-CSw6ftlJ.js";import"./toString-CYyvKWOl.js";import"./SynapseConstants-CnTS8uWh.js";import"./tinycolor-Begke6kS.js";import"./InfoTwoTone-q2nFdSda.js";import"./CheckCircleTwoTone-DZeepUDu.js";import"./dayjs.min-D1RcYm3-.js";import"./index-SDyqs4cU.js";import"./tiny-invariant-CopsF_GD.js";import"./Link-Cn1DJ6En.js";import"./StringUtils-5IsdMFw2.js";import"./mockEntity-D2XCSIzW.js";import"./mock_user_profile-CyZOyNQ0.js";import"./mockFileEntity-BYXQCcrd.js";import"./mock_file_handle-C-011_te.js";import"./mockProject-BdbDl4gy.js";import"./mockTeam-CC8zR7Kn.js";import"./index-Cu68-FDB.js";import"./mockTableEntity-DTTSKAYX.js";import"./mockFileEntityACLVariants-D1ISgG3w.js";import"./fakerUtils-bF6LKVwK.js";import"./mockSchema-DyawTsgJ.js";const ht={title:"Synapse/Chat",component:p,parameters:{chromatic:{viewports:[600,1200]}}},r={args:{initialMessage:"hello"},parameters:{stack:"mock",msw:{handlers:[...a(t),...s(t),...e(t)]}}};var o,m,i;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  args: {
    initialMessage: 'hello'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getUserProfileHandlers(MOCK_REPO_ORIGIN), ...getEntityHandlers(MOCK_REPO_ORIGIN), ...getChatbotHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(i=(m=r.parameters)==null?void 0:m.docs)==null?void 0:i.source}}};const Ot=["ChatWithSynapse"];export{r as ChatWithSynapse,Ot as __namedExportsOrder,ht as default};
